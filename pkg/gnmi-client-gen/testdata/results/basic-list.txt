/*
* SPDX-FileCopyrightText: 2022-present Intel Corporation
*
* SPDX-License-Identifier: Apache-2.0
*/

// Generated via gnmi-gen.go, do NOT edit

package api

import (
    "context"
    "fmt"
    "github.com/onosproject/config-models/pkg/gnmi-client-gen/gnmi_utils"
    "github.com/openconfig/gnmi/proto/gnmi"
    "google.golang.org/grpc"
    "google.golang.org/grpc/codes"
    "google.golang.org/grpc/status"
    "reflect"
    "time"
)

type GnmiClient struct {
    client gnmi.GNMIClient
}

func NewTestGnmiClient(conn *grpc.ClientConn) *GnmiClient {
    gnmi_client := gnmi.NewGNMIClient(conn)
    return &GnmiClient{client: gnmi_client}
}

func (c *GnmiClient) Get_List1(ctx context.Context, target string,
list1_list1leaf2 uint16,
) (*Test_List1, error) {
    gnmiCtx, cancel := context.WithTimeout(ctx, 10*time.Second)
    defer cancel()


    path := []*gnmi.Path{
        {
            Elem: []*gnmi.PathElem{
                {
                    Name: "list1",
                    Key: map[string]string{
                        "list1leaf2": fmt.Sprint(list1_list1leaf2),
                    },
                },
            },
            Target: target,
        },
    }

    req := &gnmi.GetRequest{
        Encoding: gnmi.Encoding_JSON,
        Path:     path,
    }
    res, err := c.client.Get(gnmiCtx, req)

    if err != nil {
        return nil, err
    }

    val, err := gnmi_utils.GetResponseUpdate(res)

    if err != nil {
        return nil, err
    }

    json := val.GetJsonVal()
    st := Device{}
    Unmarshal(json, &st)

    if reflect.ValueOf(st.List1).Kind() == reflect.Ptr && reflect.ValueOf(st.List1).IsNil() {
        return nil, status.Error(codes.NotFound, "List1-not-found")
    }
    if res, ok := st.List1[list1_list1leaf2]; ok {
        return res, nil
    }

    return nil, status.Error(codes.NotFound, "List1-not-found")
}


func (c *GnmiClient) Get_List1_List(ctx context.Context, target string,
) (map[uint16]*Test_List1, error) {
    gnmiCtx, cancel := context.WithTimeout(ctx, 10*time.Second)
    defer cancel()


    path := []*gnmi.Path{
        {
            Elem: []*gnmi.PathElem{
                {
                    Name: "list1",
                },
            },
            Target: target,
        },
    }

    req := &gnmi.GetRequest{
        Encoding: gnmi.Encoding_JSON,
        Path:     path,
    }
    res, err := c.client.Get(gnmiCtx, req)

    if err != nil {
        return nil, err
    }

    val, err := gnmi_utils.GetResponseUpdate(res)

    if err != nil {
        return nil, err
    }

    json := val.GetJsonVal()
    st := Device{}
    Unmarshal(json, &st)

    if reflect.ValueOf(st.List1).Kind() == reflect.Ptr && reflect.ValueOf(st.List1).IsNil() {
        return nil, status.Error(codes.NotFound, "List1-not-found")
    }
    return st.List1, nil
}


func (c *GnmiClient) Get_List1_List1leaf1(ctx context.Context, target string,
list1_list1leaf2 uint16,
) (string, error) {
    gnmiCtx, cancel := context.WithTimeout(ctx, 10*time.Second)
    defer cancel()


    path := []*gnmi.Path{
        {
            Elem: []*gnmi.PathElem{
                {
                    Name: "list1",
                    Key: map[string]string{
                        "list1leaf2": fmt.Sprint(list1_list1leaf2),
                    },
                },
                {
                    Name: "list1leaf1",
                },
            },
            Target: target,
        },
    }

    req := &gnmi.GetRequest{
        Encoding: gnmi.Encoding_PROTO,
        Path:     path,
    }
    res, err := c.client.Get(gnmiCtx, req)

    if err != nil {
        return "", err
    }

    val, err := gnmi_utils.GetResponseUpdate(res)

    if err != nil {
        return "", err
    }

    if val.GetStringVal() == "" {
        return "", status.Error(codes.NotFound, "list1leaf1-not-found")
    }

    return val.GetStringVal(), nil
}
func (c *GnmiClient) Get_List1_List1leaf2(ctx context.Context, target string,
list1_list1leaf2 uint16,
) (uint16, error) {
    gnmiCtx, cancel := context.WithTimeout(ctx, 10*time.Second)
    defer cancel()


    path := []*gnmi.Path{
        {
            Elem: []*gnmi.PathElem{
                {
                    Name: "list1",
                    Key: map[string]string{
                        "list1leaf2": fmt.Sprint(list1_list1leaf2),
                    },
                },
                {
                    Name: "list1leaf2",
                },
            },
            Target: target,
        },
    }

    req := &gnmi.GetRequest{
        Encoding: gnmi.Encoding_PROTO,
        Path:     path,
    }
    res, err := c.client.Get(gnmiCtx, req)

    if err != nil {
        return 0, err
    }

    val, err := gnmi_utils.GetResponseUpdate(res)

    if err != nil {
        return 0, err
    }

    if uint16(val.GetUintVal()) == 0 {
        return 0, status.Error(codes.NotFound, "list1leaf2-not-found")
    }

    return uint16(val.GetUintVal()), nil
}