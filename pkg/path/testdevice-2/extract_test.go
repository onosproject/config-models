/*
 * SPDX-FileCopyrightText: 2022-present Intel Corporation
 *
 * SPDX-License-Identifier: Apache-2.0
 */

package testdevice_2

import (
	"github.com/onosproject/config-models/pkg/path"
	"github.com/onosproject/onos-api/go/onos/config/admin"
	configapi "github.com/onosproject/onos-api/go/onos/config/v2"
	"github.com/openconfig/ygot/ygot"
	"github.com/stretchr/testify/assert"
	"io/ioutil"
	"os"
	"testing"
)

var td20xRoPaths []*admin.ReadOnlyPath
var td20xRwPaths []*admin.ReadWritePath

const Prefixed = "PREFIXED"

func TestMain(m *testing.M) {
	oldValue, wasPreviouslySet := os.LookupEnv(Prefixed)
	if !wasPreviouslySet {
		if err := os.Setenv(Prefixed, Prefixed); err != nil {
			panic(err)
		}
	}
	defer func() {
		if wasPreviouslySet {
			os.Setenv(Prefixed, oldValue)
		} else {
			os.Unsetenv(Prefixed)
		}
	}()
	var err error
	schemaTree, err := ygot.GzipToSchema(testdevice20XSchema)
	if err != nil {
		panic(err)
	}

	td20xRoPaths, td20xRwPaths = path.ExtractPaths(schemaTree)
	if err != nil {
		panic(err)
	}

	exitVal := m.Run()

	os.Exit(exitVal)
}

func Test_ExtractPaths(t *testing.T) {
	for _, roPath := range td20xRoPaths {
		switch path := roPath.Path; path {
		case "/t1:cont1a/cont2a/leaf2c":
			assert.Equal(t, 1, len(roPath.SubPath))
			sp := roPath.SubPath[0]
			assert.Equal(t, "leaf2c", sp.AttrName)
		case "/t1:cont1b-state":
			assert.Equal(t, 7, len(roPath.SubPath))
			for _, sp := range roPath.SubPath {
				switch subPath := sp.SubPath; subPath {
				case "/leaf2d":
					assert.Equal(t, "leaf2d", sp.AttrName)
				case "/list2b[index1=*][index2=*]/index1":
					assert.Equal(t, "index1", sp.AttrName)
				case "/list2b[index1=*][index2=*]/index2":
					assert.Equal(t, "index2", sp.AttrName)
				case "/list2b[index1=*][index2=*]/leaf3c":
					assert.Equal(t, "leaf3c", sp.AttrName)
				case "/list2b[index1=*][index2=*]/leaf3d":
					assert.Equal(t, "leaf3d", sp.AttrName)
				case "/cont2c/leaf3a":
					assert.Equal(t, "leaf3a", sp.AttrName)
				case "/cont2c/leaf3b":
					assert.Equal(t, "leaf3b", sp.AttrName)
				default:
					t.Fatalf("unexpected subpath %s for RO path %s", subPath, path)
				}
			}
		default:
			t.Fatalf("unexpected RO path %s", path)
		}
	}

	assert.Equal(t, 15, len(td20xRwPaths))

}

func Test_GetPathValuesConfig(t *testing.T) {
	sampleConfig, err := ioutil.ReadFile("../testdata/sample-testdevice2-config.json")
	assert.NoError(t, err)

	pathValues, err := path.GetPathValues("", sampleConfig)
	assert.NoError(t, err)
	assert.Equal(t, 12, len(pathValues))

	for _, pathValue := range pathValues {
		value := pathValue.GetValue()
		switch path := pathValue.Path; path {
		case `/t1:cont1a/cont2a/leaf2a`:
			assert.Equal(t, "1", (&value).ValueToString())
			assert.Equal(t, configapi.ValueType_UINT, (&value).Type)
		case "/t1:cont1a/cont2a/leaf2b":
			assert.Equal(t, "0.432", (&value).ValueToString())
			assert.Equal(t, configapi.ValueType_DECIMAL, (&value).Type)
		case "/t1:cont1a/cont2a/leaf2e":
			assert.Equal(t, "[5 4 3 2 1] 32", (&value).ValueToString())
			assert.Equal(t, configapi.ValueType_LEAFLIST_INT, (&value).Type)
		case "/t1:cont1a/cont2a/leaf2f":
			assert.Equal(t, "dGhpcyBpcyBhIHRlc3QgdGVzdAo=", (&value).ValueToString())
			assert.Equal(t, configapi.ValueType_BYTES, (&value).Type)
		case "/t1:cont1a/cont2a/leaf2g":
			assert.Equal(t, "true", (&value).ValueToString())
			assert.Equal(t, configapi.ValueType_BOOL, (&value).Type)
		case "/t1:cont1a/leaf1a":
			assert.Equal(t, "leaf1aval", (&value).ValueToString())
			assert.Equal(t, configapi.ValueType_STRING, (&value).Type)
		case "/t1:cont1a/list2a[name=0]/name":
			assert.Equal(t, "l2a1", (&value).ValueToString())
			assert.Equal(t, configapi.ValueType_STRING, (&value).Type)
		case "/t1:cont1a/list2a[name=0]/tx-power":
			assert.Equal(t, "5", (&value).ValueToString())
			assert.Equal(t, configapi.ValueType_UINT, (&value).Type)
		case "/t1:cont1a/list2a[name=0]/rx-power":
			assert.Equal(t, "25", (&value).ValueToString())
			assert.Equal(t, configapi.ValueType_UINT, (&value).Type)
		case "/t1:cont1a/list2a[name=1]/name":
			assert.Equal(t, "l2a2", (&value).ValueToString())
			assert.Equal(t, configapi.ValueType_STRING, (&value).Type)
		case "/t1:cont1a/list2a[name=1]/tx-power":
			assert.Equal(t, "6", (&value).ValueToString())
			assert.Equal(t, configapi.ValueType_UINT, (&value).Type)
		case "/t1:cont1a/list2a[name=1]/rx-power":
			assert.Equal(t, "26", (&value).ValueToString())
			assert.Equal(t, configapi.ValueType_UINT, (&value).Type)
		default:
			t.Fatalf("unexpected path %s", path)
		}
	}

}

func Test_GetPathValuesOpstate(t *testing.T) {
	sampleConfig, err := ioutil.ReadFile("../testdata/sample-testdevice2-opstate.json")
	assert.NoError(t, err)

	pathValues, err := path.GetPathValues("", sampleConfig)
	assert.NoError(t, err)
	assert.Equal(t, 12, len(pathValues))

	for _, pathValue := range pathValues {
		value := pathValue.GetValue()
		switch path := pathValue.Path; path {
		case `/t1:cont1a/cont2a/leaf2c`:
			assert.Equal(t, "Mock leaf2c value", (&value).ValueToString())
			assert.Equal(t, configapi.ValueType_STRING, (&value).Type)
		case `/t1:cont1b-state/leaf2d`:
			assert.Equal(t, "10001", (&value).ValueToString())
			assert.Equal(t, configapi.ValueType_UINT, (&value).Type)
		case `/t1:cont1b-state/cont2c/leaf3a`:
			assert.Equal(t, "true", (&value).ValueToString())
			assert.Equal(t, configapi.ValueType_BOOL, (&value).Type)
		case `/t1:cont1b-state/cont2c/leaf3b`:
			assert.Equal(t, "l3bvalue", (&value).ValueToString())
			assert.Equal(t, configapi.ValueType_STRING, (&value).Type)
		case `/t1:cont1b-state/list2b[index1=0][index2=*]/index1`:
			assert.Equal(t, "101", (&value).ValueToString())
			assert.Equal(t, configapi.ValueType_UINT, (&value).Type)
		case `/t1:cont1b-state/list2b[index1=0][index2=*]/index2`:
			assert.Equal(t, "102", (&value).ValueToString())
			assert.Equal(t, configapi.ValueType_UINT, (&value).Type)
		case `/t1:cont1b-state/list2b[index1=0][index2=*]/leaf3c`:
			assert.Equal(t, "mock Value in JSON", (&value).ValueToString())
			assert.Equal(t, configapi.ValueType_STRING, (&value).Type)
		case `/t1:cont1b-state/list2b[index1=0][index2=*]/leaf3d`:
			assert.Equal(t, "1", (&value).ValueToString())
			assert.Equal(t, configapi.ValueType_STRING, (&value).Type)
		case `/t1:cont1b-state/list2b[index1=1][index2=*]/index1`:
			assert.Equal(t, "101", (&value).ValueToString())
			assert.Equal(t, configapi.ValueType_UINT, (&value).Type)
		case `/t1:cont1b-state/list2b[index1=1][index2=*]/index2`:
			assert.Equal(t, "103", (&value).ValueToString())
			assert.Equal(t, configapi.ValueType_UINT, (&value).Type)
		case `/t1:cont1b-state/list2b[index1=1][index2=*]/leaf3c`:
			assert.Equal(t, "Second mock Value", (&value).ValueToString())
			assert.Equal(t, configapi.ValueType_STRING, (&value).Type)
		case `/t1:cont1b-state/list2b[index1=1][index2=*]/leaf3d`:
			assert.Equal(t, "2", (&value).ValueToString())
			assert.Equal(t, configapi.ValueType_STRING, (&value).Type)
		default:
			t.Fatalf("unexpected path %s", path)
		}
	}
}

var (
	// testdevice20XSchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	testdevice20XSchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0x5f, 0x6f, 0xdb, 0x38,
		0x12, 0x7f, 0xef, 0xa7, 0x18, 0xf8, 0x25, 0xdb, 0x43, 0xdd, 0xc8, 0xb2, 0x93, 0xa6, 0x01, 0xee,
		0xc1, 0x69, 0x52, 0x5c, 0xb1, 0xed, 0x6e, 0xd1, 0x06, 0x7b, 0xd8, 0xeb, 0x05, 0x07, 0x5a, 0x1a,
		0xdb, 0x44, 0x65, 0xd2, 0x47, 0x52, 0x6e, 0x7c, 0x8b, 0x7c, 0xf7, 0x03, 0x25, 0xd9, 0xf1, 0x5f,
		0x89, 0x94, 0x64, 0xc7, 0x6e, 0xb8, 0x2f, 0xdb, 0xd8, 0xa4, 0x2c, 0x0e, 0x67, 0x7e, 0xf3, 0x23,
		0x67, 0x86, 0xfc, 0xeb, 0x05, 0x00, 0x40, 0xe3, 0x37, 0x32, 0xc2, 0xc6, 0x25, 0x34, 0x42, 0x9c,
		0xd0, 0x00, 0x1b, 0xaf, 0xd2, 0x4f, 0x7f, 0xa5, 0x2c, 0x6c, 0x5c, 0x42, 0x2b, 0xfb, 0xf3, 0x1d,
		0x67, 0x7d, 0x3a, 0x68, 0x5c, 0x82, 0x97, 0x7d, 0x70, 0x4d, 0x45, 0xe3, 0x12, 0xd2, 0x47, 0x24,
		0x1f, 0x04, 0x9c, 0xa9, 0x16, 0x59, 0xfa, 0x6c, 0xe9, 0xf1, 0xd9, 0xf7, 0xaf, 0x96, 0xbf, 0xbd,
		0x46, 0x19, 0x08, 0x3a, 0x56, 0x94, 0x33, 0xdd, 0xe8, 0x76, 0x88, 0xa0, 0xf8, 0x18, 0x22, 0x9c,
		0x60, 0x04, 0xba, 0x0b, 0xa1, 0x0c, 0xc5, 0x6a, 0xaf, 0xe5, 0x97, 0x9b, 0x7f, 0xbc, 0xfa, 0x92,
		0xf3, 0x2f, 0x3e, 0x0b, 0xec, 0xd3, 0xfb, 0xb5, 0x77, 0x5b, 0x7a, 0x3f, 0xd5, 0x5a, 0xf9, 0x95,
		0xe4, 0xdb, 0xaf, 0x3c, 0x16, 0x01, 0x6e, 0xec, 0x99, 0xbe, 0x09, 0x4e, 0x7f, 0x70, 0xa1, 0x5f,
		0xa6, 0x31, 0x4e, 0x7f, 0xe4, 0xd5, 0xe6, 0x86, 0xff, 0x20, 0xb2, 0x2b, 0x06, 0xf1, 0x08, 0x99,
		0x6a, 0x5c, 0x82, 0x12, 0x31, 0x6e, 0x69, 0xb8, 0xd0, 0x4a, 0xbf, 0xd3, 0x5a, 0xa3, 0x87, 0xa5,
		0x4f, 0x1e, 0x56, 0xe5, 0xb9, 0x32, 0x2d, 0x4b, 0xd3, 0xe3, 0x93, 0xed, 0x03, 0x59, 0x9c, 0x26,
		0x9f, 0x6c, 0x1b, 0xc5, 0x86, 0xe9, 0xf2, 0x59, 0x58, 0x30, 0x5d, 0x05, 0xd3, 0x56, 0x38, 0x7d,
		0x26, 0xd3, 0x68, 0x36, 0x9d, 0xa6, 0xd3, 0x6a, 0x3d, 0xbd, 0xd6, 0xd3, 0x6c, 0x3c, 0xdd, 0x9b,
		0xa7, 0x7d, 0xcb, 0xf4, 0x17, 0xaa, 0xc1, 0xbc, 0x41, 0x84, 0xa4, 0x9f, 0xa3, 0x0e, 0x6b, 0xe2,
		0xcc, 0xda, 0x17, 0x0c, 0x66, 0x45, 0x3d, 0x7e, 0x8b, 0x47, 0x28, 0x68, 0x00, 0xba, 0x33, 0x50,
		0x26, 0x69, 0x88, 0xf0, 0x6e, 0xa6, 0x24, 0x60, 0xf2, 0xb8, 0x3e, 0x89, 0x23, 0x2d, 0x9a, 0x6f,
		0xb9, 0x0d, 0x93, 0xc6, 0x7e, 0x23, 0xb7, 0xcd, 0x5d, 0xc1, 0x6f, 0x65, 0xba, 0xe9, 0x15, 0x34,
		0x2b, 0xd2, 0x51, 0x1b, 0x5d, 0xb5, 0xd3, 0x59, 0x5b, 0xdd, 0x2d, 0xad, 0xc3, 0xa5, 0x75, 0xd9,
		0x5a, 0xa7, 0xf3, 0x75, 0xbb, 0x40, 0xc7, 0xe7, 0xbf, 0x76, 0x3b, 0x1d, 0xa3, 0x9d, 0x9c, 0x63,
		0xca, 0xd4, 0x85, 0x89, 0xa8, 0x33, 0xa5, 0x38, 0x33, 0x68, 0xfa, 0x85, 0xb0, 0x01, 0x1a, 0x69,
		0xaa, 0xfe, 0xcf, 0x6c, 0xea, 0x92, 0x07, 0x7f, 0xa2, 0xcc, 0x78, 0xae, 0xe7, 0x9d, 0xfe, 0x20,
		0x51, 0x8c, 0xdb, 0xa1, 0x76, 0x6b, 0xbf, 0xf7, 0x82, 0x04, 0xda, 0x7a, 0xaf, 0xe9, 0x80, 0x2a,
		0x59, 0xac, 0xe6, 0xeb, 0x22, 0xc6, 0x01, 0x51, 0x74, 0xa2, 0x7f, 0xbb, 0x4f, 0x22, 0x89, 0xc6,
		0xbd, 0x1f, 0x5e, 0x59, 0x88, 0x84, 0xdc, 0x97, 0x17, 0x49, 0xfb, 0x78, 0x44, 0xf2, 0xa2, 0x46,
		0xc1, 0xed, 0x4d, 0xe3, 0x9c, 0xca, 0xad, 0xcb, 0xe4, 0xa7, 0xd3, 0xb9, 0xc2, 0x56, 0x77, 0x95,
		0x20, 0x1d, 0xef, 0x95, 0x20, 0xcd, 0x98, 0x49, 0x45, 0x7a, 0x91, 0x21, 0xb8, 0x0b, 0xec, 0xa3,
		0x40, 0x16, 0xec, 0x04, 0x84, 0x67, 0x9e, 0xe3, 0xcb, 0xfb, 0x77, 0x70, 0xee, 0x75, 0xbc, 0x86,
		0x85, 0xea, 0x58, 0xfa, 0xeb, 0x4d, 0x7e, 0xfb, 0x71, 0x6c, 0x96, 0x7a, 0x50, 0xd6, 0x85, 0x6f,
		0x74, 0xe5, 0xf3, 0xc1, 0x1f, 0x9a, 0x36, 0xbd, 0x28, 0xa1, 0x67, 0x29, 0xa3, 0xed, 0x59, 0x32,
		0xe0, 0x9e, 0x25, 0x03, 0xfe, 0x83, 0x47, 0x8a, 0x0c, 0xb0, 0x34, 0x03, 0x76, 0xac, 0xf4, 0x58,
		0x59, 0xe9, 0x27, 0xc2, 0x42, 0xa2, 0xb8, 0x98, 0x16, 0xb3, 0xb0, 0x12, 0x0c, 0x36, 0xc4, 0x80,
		0x8e, 0x48, 0x74, 0xde, 0xb1, 0x60, 0xb1, 0x2d, 0xdf, 0xa0, 0xed, 0x9a, 0xe7, 0x69, 0x3f, 0x5f,
		0xee, 0xdb, 0x2e, 0xef, 0x74, 0xb5, 0x5a, 0x1e, 0x1e, 0x0f, 0xf1, 0x3d, 0xcf, 0x7b, 0x42, 0xa1,
		0x1c, 0x24, 0x13, 0x29, 0xef, 0x3b, 0x02, 0x4b, 0xdf, 0x11, 0x58, 0xfa, 0x8e, 0x2f, 0x48, 0x42,
		0xe0, 0x2c, 0x9a, 0xee, 0xcd, 0x7b, 0xf8, 0xce, 0x7b, 0x1c, 0xed, 0x9e, 0x86, 0x54, 0x82, 0xb2,
		0x81, 0x8d, 0x3b, 0xb8, 0xd8, 0x95, 0x61, 0x84, 0x96, 0x86, 0x11, 0x5a, 0x1a, 0x46, 0x97, 0x71,
		0x35, 0x44, 0x01, 0x99, 0x13, 0x74, 0xbc, 0xca, 0x59, 0x86, 0xe3, 0x4a, 0xc7, 0xcb, 0x95, 0x0e,
		0x74, 0xd3, 0xc6, 0x91, 0xa5, 0x3a, 0x7d, 0x02, 0x5a, 0xfa, 0x04, 0xb4, 0xf4, 0x09, 0x09, 0x45,
		0x8a, 0xa8, 0x54, 0xce, 0x1b, 0x38, 0x6f, 0x90, 0x27, 0x67, 0xca, 0x54, 0xeb, 0xdc, 0xc2, 0x13,
		0xf8, 0xc7, 0x8b, 0xe9, 0xd5, 0xf1, 0xcb, 0xfb, 0x09, 0x57, 0xc0, 0x6e, 0x2b, 0xde, 0xca, 0xc2,
		0x3e, 0x52, 0xa9, 0xba, 0x4a, 0x09, 0x33, 0x2b, 0xfb, 0x44, 0xd9, 0x4d, 0x84, 0xda, 0xfe, 0x0d,
		0x45, 0xa5, 0xa7, 0x73, 0xa1, 0x47, 0xeb, 0xa2, 0xd3, 0x39, 0x7f, 0xd3, 0xe9, 0x78, 0x6f, 0xda,
		0x6f, 0xbc, 0xb7, 0x67, 0x67, 0xad, 0xf3, 0x96, 0x49, 0xf0, 0xf5, 0x77, 0x11, 0xa2, 0xc0, 0xf0,
		0x6a, 0xda, 0xb8, 0x04, 0x16, 0x47, 0xd1, 0xae, 0xbc, 0x58, 0xdf, 0xd2, 0x8b, 0xf5, 0x2d, 0xbd,
		0x58, 0x8f, 0x32, 0x22, 0xa6, 0x6e, 0xb7, 0xd8, 0xf9, 0xb1, 0x42, 0x39, 0xa7, 0xaa, 0x62, 0xe1,
		0xc8, 0xde, 0x1a, 0x34, 0xfd, 0x88, 0x6c, 0xa0, 0x86, 0x07, 0xe7, 0xc9, 0x7c, 0xcf, 0xc5, 0x94,
		0x8f, 0x59, 0x26, 0x87, 0xbe, 0x38, 0x19, 0x58, 0xc2, 0xfa, 0xc0, 0x12, 0xd6, 0xaf, 0x38, 0x8f,
		0x90, 0x30, 0x87, 0xeb, 0x0e, 0xd7, 0x8b, 0x71, 0x3d, 0xd5, 0x15, 0x9b, 0xbd, 0xaa, 0x56, 0x59,
		0xbb, 0xb0, 0x4a, 0x29, 0xb5, 0xc8, 0xc9, 0x68, 0x8c, 0x62, 0x59, 0x9c, 0xb5, 0x69, 0xbd, 0xb9,
		0xfd, 0x8b, 0x6a, 0x5d, 0xa6, 0xf6, 0xf7, 0x12, 0xfe, 0x0e, 0x27, 0x7a, 0xd2, 0x4f, 0x80, 0x0b,
		0x60, 0xf1, 0xa8, 0x87, 0xe2, 0x97, 0xd7, 0xa7, 0xb3, 0xef, 0xc9, 0x4b, 0xf8, 0x77, 0xec, 0x79,
		0xed, 0x00, 0x8c, 0xf6, 0xfc, 0x6e, 0x84, 0xe0, 0xe2, 0x13, 0x4a, 0x49, 0x06, 0x16, 0xaa, 0x3b,
		0x7b, 0xb7, 0x0f, 0x7d, 0xf8, 0xa8, 0xed, 0xda, 0x27, 0x40, 0x25, 0x90, 0x1e, 0x9f, 0x20, 0x74,
		0x40, 0x0d, 0x31, 0xb5, 0x77, 0x7f, 0x00, 0x5a, 0x1a, 0xd0, 0xc3, 0x44, 0x4b, 0xa1, 0xcf, 0x85,
		0xfe, 0x12, 0x26, 0x24, 0xa2, 0x21, 0xd1, 0x08, 0x01, 0x8a, 0xc3, 0x98, 0x48, 0x69, 0xaa, 0xfa,
		0x25, 0xf2, 0x49, 0x16, 0xed, 0x0c, 0xf5, 0x68, 0x9b, 0xa3, 0x6c, 0xb8, 0x16, 0xee, 0xaa, 0x4a,
		0x2e, 0xc9, 0x92, 0xd9, 0xd5, 0x27, 0xb1, 0x9a, 0x1c, 0xcb, 0x43, 0x49, 0x03, 0xba, 0xb3, 0x32,
		0xa0, 0x2e, 0x63, 0x5c, 0x91, 0xcc, 0x27, 0xe4, 0x18, 0x8f, 0x0c, 0x86, 0x38, 0x22, 0x63, 0x92,
		0x10, 0xb1, 0xc6, 0x29, 0x67, 0xfd, 0xa6, 0x42, 0xa9, 0x5a, 0xa7, 0x69, 0x05, 0xc5, 0x69, 0x6e,
		0x86, 0x7e, 0xfa, 0x04, 0x25, 0xe2, 0x40, 0xb1, 0x4c, 0x41, 0x7f, 0x67, 0xfd, 0x5b, 0xdd, 0xff,
		0x3f, 0xda, 0xe5, 0xb4, 0xba, 0xc9, 0xff, 0xfc, 0xee, 0x66, 0xd9, 0xad, 0x8f, 0x75, 0xc3, 0x68,
		0xd2, 0x1a, 0x81, 0xd0, 0xb0, 0x96, 0x20, 0x34, 0xac, 0x25, 0x58, 0x70, 0x88, 0xe1, 0x61, 0x14,
		0x10, 0x90, 0x63, 0xac, 0x20, 0x20, 0xfb, 0x2d, 0x21, 0x08, 0xdb, 0xb6, 0x61, 0x70, 0xdd, 0xc3,
		0x8e, 0x3e, 0xa5, 0xe8, 0x9f, 0xb2, 0x27, 0xce, 0x16, 0x99, 0x53, 0x08, 0x24, 0x1e, 0xe8, 0xb1,
		0x63, 0xa8, 0x31, 0x61, 0x63, 0x89, 0xd1, 0x81, 0xb2, 0x29, 0xf2, 0x33, 0xd2, 0x29, 0xe2, 0xe2,
		0xe2, 0x5b, 0x10, 0x99, 0x91, 0xe0, 0xbb, 0xb9, 0xa1, 0xa4, 0xcd, 0xad, 0xad, 0x84, 0xd0, 0xc1,
		0x50, 0x41, 0x5f, 0xf0, 0x11, 0x7c, 0x79, 0xff, 0xae, 0x79, 0xee, 0xf9, 0x9e, 0xa1, 0x31, 0x9c,
		0x39, 0x63, 0x38, 0x3e, 0x63, 0x28, 0x42, 0xe8, 0x47, 0xa4, 0x26, 0x0a, 0x9b, 0x4c, 0x2b, 0x87,
		0x3d, 0xbd, 0x5d, 0xe8, 0x6b, 0x28, 0x85, 0x4c, 0xa5, 0x3a, 0x86, 0xcd, 0x4d, 0x55, 0xab, 0x8c,
		0x8a, 0x95, 0x54, 0xb5, 0x2a, 0x54, 0xbb, 0x92, 0xea, 0xd5, 0xc2, 0xb5, 0xcb, 0xa9, 0xa2, 0xe5,
		0x66, 0x8d, 0xe1, 0x5c, 0x99, 0xaa, 0xe8, 0x23, 0xb5, 0x1c, 0xf2, 0x80, 0x6b, 0x9d, 0xb3, 0x17,
		0xfa, 0x9c, 0x75, 0xce, 0x1f, 0x61, 0x29, 0xb3, 0x15, 0x40, 0x45, 0x16, 0x8f, 0x50, 0x10, 0xcd,
		0x2d, 0xb2, 0x8d, 0x1b, 0x08, 0x88, 0x44, 0x78, 0xb4, 0x88, 0x1a, 0xd8, 0x48, 0x49, 0x76, 0x52,
		0xd9, 0x8a, 0xaa, 0x58, 0x53, 0x45, 0xab, 0xaa, 0x6a, 0x5d, 0xb5, 0x59, 0x59, 0x6d, 0xd6, 0x56,
		0xdd, 0xea, 0xec, 0xac, 0xaf, 0xc4, 0x66, 0xb3, 0x1d, 0x7b, 0xda, 0x3a, 0xd3, 0x33, 0x9b, 0xd0,
		0x26, 0x52, 0x62, 0xc6, 0x67, 0x14, 0xab, 0x53, 0xa2, 0xef, 0x0d, 0x8b, 0x47, 0xfa, 0xe5, 0x2d,
		0x45, 0xf4, 0x44, 0xc0, 0x67, 0xb8, 0xd8, 0x2f, 0xb7, 0xf8, 0x0f, 0x4f, 0x13, 0x82, 0x78, 0xba,
		0xe0, 0x9b, 0xeb, 0xda, 0x09, 0x31, 0xe0, 0x61, 0x72, 0xcc, 0x85, 0x92, 0x4d, 0x22, 0x90, 0x11,
		0x7b, 0x3e, 0xb1, 0xd4, 0xdb, 0x31, 0x0a, 0xc7, 0x28, 0x76, 0xcd, 0x28, 0x7a, 0x88, 0xa2, 0x3c,
		0x99, 0x48, 0x7a, 0x57, 0xe3, 0x11, 0x3e, 0x0b, 0x01, 0x47, 0x63, 0x35, 0x5d, 0xa6, 0x11, 0x8b,
		0x86, 0xe0, 0x88, 0x84, 0x23, 0x12, 0xcf, 0x8c, 0x48, 0x68, 0x83, 0xa8, 0x42, 0x21, 0xda, 0xbb,
		0xa2, 0x01, 0x16, 0x60, 0x3e, 0x16, 0xa8, 0xfe, 0x87, 0x51, 0x79, 0x74, 0x99, 0x3d, 0xa0, 0xe2,
		0x42, 0xc5, 0x81, 0x8b, 0x03, 0x17, 0x07, 0x2e, 0xc7, 0x00, 0x2e, 0xc7, 0xb7, 0xc6, 0x58, 0xe2,
		0xeb, 0xfb, 0x89, 0xb7, 0x16, 0xc5, 0xbb, 0xec, 0x86, 0x6d, 0x35, 0xdc, 0xc6, 0x5e, 0x52, 0x29,
		0x6a, 0x8d, 0x04, 0x87, 0x15, 0x23, 0xc1, 0xd7, 0x55, 0x22, 0xc1, 0xda, 0xe9, 0xb4, 0x0c, 0x4e,
		0x95, 0xcb, 0xda, 0x99, 0x45, 0x82, 0x3f, 0x6e, 0x4c, 0x93, 0xda, 0xde, 0x3d, 0xdf, 0x19, 0xb9,
		0x63, 0xe5, 0xea, 0x3b, 0x56, 0xae, 0x10, 0x9a, 0xcd, 0xc3, 0x6e, 0x8f, 0xe1, 0xb6, 0x9c, 0x36,
		0x86, 0xf9, 0xa8, 0x66, 0x89, 0xe9, 0xe6, 0x7b, 0x15, 0xb3, 0x1c, 0xcb, 0x33, 0x43, 0x20, 0x2e,
		0x9b, 0x5a, 0x69, 0x9f, 0x52, 0xf9, 0x60, 0x96, 0x51, 0x6f, 0x3f, 0xd4, 0x96, 0x77, 0x78, 0x63,
		0xad, 0x37, 0x2b, 0xc7, 0x0c, 0xcf, 0xa8, 0x34, 0x3a, 0x25, 0x33, 0x6b, 0x67, 0x86, 0x67, 0x5d,
		0x90, 0x74, 0x34, 0x8e, 0x30, 0xad, 0x4f, 0xe3, 0x7d, 0xcd, 0xb9, 0xfb, 0x74, 0x10, 0xa7, 0xfb,
		0xa8, 0x40, 0x15, 0x8e, 0xa4, 0x3b, 0x32, 0xf3, 0xe0, 0x8f, 0xcc, 0xcc, 0xbc, 0xa8, 0x61, 0x08,
		0x3f, 0x69, 0x6d, 0x17, 0xc1, 0xbf, 0x1d, 0x66, 0x2a, 0x42, 0x25, 0x7c, 0xc7, 0x29, 0x86, 0xd0,
		0x9b, 0x82, 0xc9, 0x73, 0x5c, 0x7e, 0x70, 0x6d, 0x8b, 0xa5, 0x9f, 0xf1, 0x9c, 0x87, 0xe3, 0x2d,
		0xfc, 0xe8, 0xb8, 0xba, 0x8f, 0x55, 0x91, 0x5c, 0xb8, 0xb2, 0x0f, 0xd3, 0x35, 0x59, 0x8e, 0x33,
		0x13, 0xf7, 0xcd, 0x31, 0xff, 0x61, 0x10, 0x18, 0x98, 0xdb, 0xdd, 0xbc, 0x87, 0xed, 0x21, 0x3e,
		0x01, 0xd2, 0x09, 0x82, 0x51, 0x5f, 0x87, 0xe3, 0xcf, 0x07, 0xc7, 0x63, 0xdb, 0x42, 0xf4, 0xf3,
		0xa3, 0x2d, 0x44, 0x77, 0xe5, 0x7b, 0xeb, 0x32, 0x69, 0xbb, 0xf2, 0xbd, 0x3a, 0x70, 0x5c, 0x59,
		0xe3, 0xb8, 0x2a, 0x87, 0xe3, 0xb7, 0x82, 0x30, 0x39, 0xa2, 0xca, 0x01, 0xb9, 0x03, 0xf2, 0x67,
		0x0b, 0xe4, 0xee, 0x68, 0xef, 0xa3, 0xf6, 0x6d, 0x4f, 0x8d, 0xe3, 0x56, 0xdb, 0x31, 0xbf, 0xe2,
		0xb4, 0x60, 0x1b, 0xc5, 0xec, 0x68, 0x12, 0xf3, 0x23, 0x49, 0x56, 0x8e, 0x22, 0xc9, 0x59, 0x7b,
		0x9a, 0x9d, 0x37, 0x72, 0x88, 0x85, 0xb4, 0x8b, 0xa5, 0xb2, 0x33, 0x4f, 0x38, 0x2f, 0x96, 0x5d,
		0xfc, 0x72, 0xb6, 0xdc, 0x79, 0x69, 0x02, 0x6c, 0xcb, 0xbe, 0xd2, 0x32, 0x21, 0x70, 0xf6, 0x1a,
		0xf3, 0xa2, 0xcf, 0x08, 0xa5, 0x04, 0x35, 0x24, 0x0c, 0x66, 0x2f, 0x01, 0xcd, 0xa4, 0x00, 0x34,
		0x39, 0x0b, 0x75, 0xa2, 0x0d, 0x4f, 0xff, 0x39, 0x85, 0x80, 0x30, 0x90, 0x43, 0x22, 0x10, 0xa8,
		0x04, 0xdf, 0xdb, 0x53, 0xfd, 0x6c, 0xb8, 0x30, 0xd8, 0xa7, 0xa8, 0x9e, 0xad, 0x4f, 0x5e, 0x7b,
		0xcc, 0x19, 0xad, 0x56, 0x62, 0x3d, 0x1f, 0x32, 0x95, 0x30, 0x10, 0x48, 0x14, 0x8a, 0x74, 0xc0,
		0x5c, 0x00, 0xfe, 0x37, 0x26, 0x11, 0x28, 0x0e, 0x86, 0x0b, 0xf4, 0xba, 0xd4, 0xe0, 0xe9, 0xcb,
		0xa8, 0xed, 0xa4, 0xf2, 0x2c, 0x4b, 0xa5, 0x73, 0xc3, 0x34, 0x50, 0x1c, 0x20, 0xd7, 0x1e, 0xc6,
		0xa2, 0x54, 0x3a, 0xf7, 0x66, 0xb6, 0xee, 0x2c, 0xeb, 0x6a, 0x23, 0x9e, 0x17, 0xc4, 0x9b, 0x34,
		0x24, 0xe7, 0x66, 0x6a, 0xad, 0xae, 0x57, 0x6e, 0xee, 0x15, 0xb2, 0x90, 0xb2, 0x81, 0x4d, 0x04,
		0xdd, 0xd5, 0x55, 0x6f, 0x5f, 0x78, 0xec, 0xaf, 0xae, 0xba, 0xa0, 0xba, 0x7e, 0x4d, 0xa0, 0x85,
		0x59, 0x20, 0x50, 0xae, 0xda, 0xde, 0x50, 0x3b, 0xf6, 0xb5, 0x9a, 0x75, 0x35, 0xa2, 0xb5, 0xd0,
		0xed, 0x02, 0xd4, 0x5a, 0xb9, 0x26, 0xcf, 0x84, 0xac, 0x6a, 0xc9, 0xc9, 0xdc, 0x8b, 0x77, 0x0c,
		0x50, 0xe1, 0x76, 0x7e, 0xe9, 0x27, 0x95, 0x90, 0x3e, 0x50, 0xd5, 0x0f, 0x13, 0xd2, 0xe0, 0x0e,
		0x9d, 0x6a, 0x40, 0xb1, 0x71, 0x1c, 0x95, 0xe7, 0xe8, 0x2e, 0xdf, 0xb3, 0xe4, 0x7b, 0xcb, 0x22,
		0x2f, 0xb9, 0xe9, 0xda, 0xd3, 0x5c, 0xb7, 0xb8, 0x3c, 0x9e, 0xc7, 0xb7, 0x5d, 0x78, 0xaf, 0xf4,
		0xb6, 0xd7, 0x5e, 0x53, 0xaa, 0x4d, 0xa5, 0x9c, 0xcb, 0x77, 0xc2, 0xce, 0x5a, 0xe5, 0xdf, 0x0c,
		0xdb, 0x05, 0x89, 0x01, 0x67, 0xe1, 0xa6, 0xeb, 0x61, 0x13, 0xbe, 0x4b, 0x25, 0x70, 0x96, 0x9e,
		0x16, 0x93, 0x3c, 0x0f, 0x88, 0x52, 0x82, 0xf6, 0x62, 0x85, 0xf2, 0x35, 0xdc, 0x84, 0x54, 0x81,
		0x9c, 0x8e, 0x7a, 0x3c, 0x02, 0x39, 0xe4, 0x71, 0x14, 0x02, 0xe3, 0x09, 0x7b, 0x9e, 0x50, 0x49,
		0xb5, 0x66, 0x5b, 0xde, 0x30, 0xeb, 0xbb, 0x1b, 0x66, 0x37, 0xfa, 0xad, 0xc0, 0xf0, 0x54, 0x98,
		0xc0, 0xf8, 0x86, 0x59, 0x2a, 0x93, 0x53, 0x82, 0x80, 0xe1, 0x8f, 0x85, 0x19, 0x27, 0x61, 0x88,
		0x21, 0x50, 0x96, 0x2c, 0x74, 0x7c, 0xaf, 0xf5, 0x16, 0x26, 0x28, 0x24, 0xe5, 0xec, 0x35, 0xc0,
		0x3f, 0x11, 0x42, 0xce, 0x4e, 0x14, 0x0c, 0xc9, 0x04, 0x35, 0x09, 0x96, 0x64, 0x0a, 0x54, 0x9d,
		0x48, 0x38, 0x49, 0x33, 0x6f, 0xd2, 0x8d, 0x93, 0x13, 0x68, 0x02, 0x1d, 0x8d, 0x23, 0x9a, 0x26,
		0x5a, 0x8c, 0x89, 0xd8, 0x8e, 0x39, 0x2e, 0x0f, 0xa7, 0xc2, 0xce, 0xec, 0x0e, 0xce, 0x9d, 0x69,
		0x5b, 0x5e, 0x5d, 0xdb, 0x26, 0x25, 0xef, 0x98, 0xc8, 0x8e, 0x63, 0x83, 0x09, 0x11, 0x94, 0xac,
		0xe3, 0x84, 0xdb, 0xf9, 0x7f, 0xc6, 0x3b, 0xff, 0xfb, 0x3c, 0xaa, 0xaf, 0xe0, 0x08, 0xcb, 0xb6,
		0xe5, 0x45, 0x76, 0xed, 0x5e, 0x49, 0x7b, 0xc8, 0xce, 0x62, 0x72, 0xe6, 0xe0, 0xcc, 0x61, 0x55,
		0xce, 0xcf, 0x2a, 0x33, 0xed, 0xcc, 0x85, 0xc2, 0xd6, 0xa2, 0x83, 0x2e, 0x14, 0xb6, 0x9b, 0x50,
		0x58, 0x3d, 0xbb, 0xa1, 0xd9, 0x32, 0xeb, 0x34, 0x97, 0x7e, 0x17, 0x2e, 0xfe, 0xae, 0xbe, 0xea,
		0x87, 0xa4, 0x95, 0x43, 0xef, 0xaa, 0x56, 0x0e, 0x99, 0x9c, 0x21, 0x99, 0x7b, 0x43, 0xd8, 0x86,
		0x45, 0xe2, 0xf2, 0xd2, 0xaf, 0x6a, 0xc9, 0x90, 0xef, 0xe8, 0x7c, 0x45, 0xe5, 0x35, 0x2f, 0x19,
		0x2a, 0x4c, 0xa4, 0x30, 0x48, 0xa0, 0x30, 0x4c, 0x9c, 0xd8, 0x55, 0xc1, 0x50, 0xcb, 0x33, 0xbe,
		0x34, 0xea, 0x67, 0x28, 0x1a, 0xf2, 0x0f, 0x73, 0xb8, 0x4f, 0x55, 0x37, 0xd4, 0x33, 0xac, 0x1b,
		0xea, 0x95, 0xad, 0x1b, 0x4a, 0xc1, 0x2d, 0xa9, 0x17, 0x7a, 0x05, 0x3f, 0xa8, 0x1a, 0x02, 0x81,
		0x90, 0xc7, 0xbd, 0x08, 0xe1, 0x3b, 0x4e, 0xab, 0x6e, 0x5d, 0x38, 0xac, 0xdb, 0xf9, 0xd6, 0x05,
		0x65, 0x21, 0xde, 0xb7, 0xcc, 0x97, 0x6a, 0x59, 0xfb, 0xb2, 0x65, 0x44, 0xba, 0xb7, 0x5b, 0xa1,
		0xb9, 0x15, 0xda, 0xa2, 0x87, 0xbd, 0xb0, 0x58, 0xa0, 0x9d, 0x1d, 0x6d, 0xa6, 0xa2, 0xcb, 0x38,
		0x5f, 0x77, 0xd6, 0x67, 0x67, 0x6e, 0x7d, 0x56, 0xc3, 0x76, 0x5b, 0x82, 0xaa, 0xbe, 0x25, 0x86,
		0xfb, 0x0e, 0xc3, 0x1d, 0x86, 0x3b, 0x0c, 0x77, 0x18, 0xee, 0x30, 0xfc, 0x10, 0x30, 0x3c, 0x09,
		0x81, 0x58, 0x5e, 0x5c, 0x61, 0x7d, 0x6d, 0x45, 0x77, 0x16, 0x2c, 0x99, 0xef, 0x46, 0xcd, 0xe2,
		0xd5, 0x1a, 0xd9, 0xeb, 0xc6, 0x74, 0xdf, 0x61, 0xfa, 0xd1, 0x62, 0xfa, 0xb3, 0x8a, 0x9c, 0xb8,
		0x22, 0xa2, 0x0d, 0xfb, 0x68, 0x0e, 0xd5, 0xeb, 0x42, 0xf5, 0xd0, 0x12, 0xd5, 0x43, 0xeb, 0x40,
		0x38, 0xd0, 0x10, 0x99, 0xa2, 0x6a, 0x2a, 0xb0, 0xbf, 0x1f, 0x6c, 0x77, 0x7c, 0xfd, 0x78, 0xb1,
		0x7d, 0x41, 0x59, 0x6c, 0x00, 0xde, 0x84, 0xb6, 0x7f, 0xc8, 0x1e, 0x7d, 0x45, 0x64, 0x89, 0xa2,
		0x9a, 0x4f, 0x7f, 0x5e, 0x75, 0xbf, 0xde, 0x98, 0xce, 0x4f, 0x02, 0x55, 0xd2, 0xd8, 0x99, 0xd8,
		0x39, 0x94, 0xa5, 0xf7, 0xfa, 0x70, 0x7d, 0xfb, 0xe7, 0xe7, 0x9b, 0x56, 0x63, 0x17, 0x30, 0x5d,
		0xe9, 0x95, 0xfc, 0xba, 0x8f, 0x3c, 0xbf, 0xdb, 0x77, 0xee, 0x77, 0x7e, 0xa9, 0x65, 0xba, 0xd9,
		0x0c, 0xb9, 0xfb, 0x15, 0x3b, 0xae, 0xb9, 0xbc, 0xd8, 0x55, 0xcd, 0x65, 0xbd, 0x21, 0xf4, 0xdc,
		0x28, 0x0e, 0x18, 0x86, 0xd0, 0x93, 0xda, 0xa2, 0xab, 0x9a, 0x6a, 0x8b, 0x2a, 0x65, 0x80, 0x6f,
		0x4e, 0xc0, 0x36, 0x1c, 0x87, 0x49, 0x32, 0xb8, 0x76, 0xb4, 0x5d, 0x75, 0xcb, 0xc7, 0x1f, 0x71,
		0xb2, 0xe1, 0xb8, 0xec, 0x25, 0x87, 0xbc, 0xd0, 0xae, 0x28, 0x21, 0x3c, 0x39, 0xf1, 0x9a, 0xa8,
		0xc4, 0xed, 0x3e, 0x66, 0x85, 0xff, 0xc2, 0xb8, 0x02, 0x81, 0x01, 0x1f, 0x8d, 0x90, 0x85, 0x18,
		0x42, 0x2f, 0x56, 0xf3, 0x5a, 0x49, 0x19, 0x8f, 0xc7, 0x5c, 0x28, 0x0c, 0x5f, 0x6e, 0x49, 0xf8,
		0xf6, 0xb6, 0x25, 0x7c, 0x7b, 0xcf, 0x36, 0xe1, 0x7b, 0xab, 0xcf, 0x2b, 0x5e, 0xbf, 0xe4, 0xad,
		0x57, 0x1a, 0x9f, 0x89, 0x52, 0x28, 0xd8, 0x56, 0x9f, 0xd2, 0xf8, 0xd6, 0x6d, 0xfe, 0xeb, 0xee,
		0xaf, 0xf6, 0x43, 0xf3, 0x9b, 0xd7, 0x7c, 0x7b, 0xf7, 0xb7, 0x46, 0x51, 0x59, 0xc4, 0x8b, 0xe5,
		0x7f, 0x65, 0xe3, 0xd8, 0x66, 0x1c, 0x0d, 0x2a, 0xdf, 0x93, 0xef, 0xf8, 0x85, 0xf3, 0x75, 0xe9,
		0xad, 0x1a, 0x4c, 0x63, 0xf1, 0xab, 0x25, 0x93, 0xb8, 0xc6, 0x09, 0x0d, 0x32, 0x23, 0x78, 0x78,
		0xf1, 0xf0, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4f, 0xaa, 0x5d,
		0x2f, 0x53, 0xa7, 0x00, 0x00,
	}
)
