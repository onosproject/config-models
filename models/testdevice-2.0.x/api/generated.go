// Code generated by YGOT. DO NOTEDIT.
/*
Package api is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /go/pkg/mod/github.com/openconfig/ygot@v0.12.0/genutil/names.go
using the following YANG input files:
	- onf-test1-augmented@2020-02-29.yang
	- onf-test1-identities@2020-09-01.yang
	- onf-test1@2019-06-10.yang
Imported modules were sourced from:
	- /config-model/yang/...
*/
package api

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Device{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	Cont1A	*OnfTest1_Cont1A	`path:"cont1a" module:"onf-test1"`
	Cont1BState	*OnfTest1_Cont1BState	`path:"cont1b-state" module:"onf-test1"`
	LeafAtTopLevel	*string	`path:"leafAtTopLevel" module:"onf-test1"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfTest1_Cont1A represents the /onf-test1/cont1a YANG schema element.
type OnfTest1_Cont1A struct {
	Cont2A	*OnfTest1_Cont1A_Cont2A	`path:"cont2a" module:"onf-test1"`
	Cont2D	*OnfTest1_Cont1A_Cont2D	`path:"cont2d" module:"onf-test1-augmented"`
	Leaf1A	*string	`path:"leaf1a" module:"onf-test1"`
	List2A	map[string]*OnfTest1_Cont1A_List2A	`path:"list2a" module:"onf-test1"`
}

// IsYANGGoStruct ensures that OnfTest1_Cont1A implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTest1_Cont1A) IsYANGGoStruct() {}

// NewList2A creates a new entry in the List2A list of the
// OnfTest1_Cont1A struct. The keys of the list are populated from the input
// arguments.
func (t *OnfTest1_Cont1A) NewList2A(Name string) (*OnfTest1_Cont1A_List2A, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.List2A == nil {
		t.List2A = make(map[string]*OnfTest1_Cont1A_List2A)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.List2A[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list List2A", key)
	}

	t.List2A[key] = &OnfTest1_Cont1A_List2A{
		Name: &Name,
	}

	return t.List2A[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_Cont1A) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTest1_Cont1A"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTest1_Cont1A) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfTest1_Cont1A_Cont2A represents the /onf-test1/cont1a/cont2a YANG schema element.
type OnfTest1_Cont1A_Cont2A struct {
	Leaf2A	*uint8	`path:"leaf2a" module:"onf-test1"`
	Leaf2B	*float64	`path:"leaf2b" module:"onf-test1"`
	Leaf2C	*string	`path:"leaf2c" module:"onf-test1"`
	Leaf2D	*float64	`path:"leaf2d" module:"onf-test1"`
	Leaf2E	[]int16	`path:"leaf2e" module:"onf-test1"`
	Leaf2F	Binary	`path:"leaf2f" module:"onf-test1"`
	Leaf2G	*bool	`path:"leaf2g" module:"onf-test1"`
}

// IsYANGGoStruct ensures that OnfTest1_Cont1A_Cont2A implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTest1_Cont1A_Cont2A) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_Cont1A_Cont2A) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTest1_Cont1A_Cont2A"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTest1_Cont1A_Cont2A) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfTest1_Cont1A_Cont2D represents the /onf-test1/cont1a/cont2d YANG schema element.
type OnfTest1_Cont1A_Cont2D struct {
	Beer	YANGEmpty	`path:"beer" module:"onf-test1-augmented"`
	Chocolate	E_OnfTest1_Cont1A_Cont2D_Chocolate	`path:"chocolate" module:"onf-test1-augmented"`
	Leaf2D3C	*string	`path:"leaf2d3c" module:"onf-test1-augmented"`
	Pretzel	YANGEmpty	`path:"pretzel" module:"onf-test1-augmented"`
}

// IsYANGGoStruct ensures that OnfTest1_Cont1A_Cont2D implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTest1_Cont1A_Cont2D) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_Cont1A_Cont2D) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTest1_Cont1A_Cont2D"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTest1_Cont1A_Cont2D) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfTest1_Cont1A_List2A represents the /onf-test1/cont1a/list2a YANG schema element.
type OnfTest1_Cont1A_List2A struct {
	Name	*string	`path:"name" module:"onf-test1"`
	RxPower	*uint16	`path:"rx-power" module:"onf-test1"`
	TxPower	*uint16	`path:"tx-power" module:"onf-test1"`
}

// IsYANGGoStruct ensures that OnfTest1_Cont1A_List2A implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTest1_Cont1A_List2A) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfTest1_Cont1A_List2A struct, which is a YANG list entry.
func (t *OnfTest1_Cont1A_List2A) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_Cont1A_List2A) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTest1_Cont1A_List2A"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTest1_Cont1A_List2A) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfTest1_Cont1BState represents the /onf-test1/cont1b-state YANG schema element.
type OnfTest1_Cont1BState struct {
	Cont2C	*OnfTest1_Cont1BState_Cont2C	`path:"cont2c" module:"onf-test1"`
	Leaf2D	*uint16	`path:"leaf2d" module:"onf-test1"`
	List2B	map[OnfTest1_Cont1BState_List2B_Key]*OnfTest1_Cont1BState_List2B	`path:"list2b" module:"onf-test1"`
}

// IsYANGGoStruct ensures that OnfTest1_Cont1BState implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTest1_Cont1BState) IsYANGGoStruct() {}

// OnfTest1_Cont1BState_List2B_Key represents the key for list List2B of element /onf-test1/cont1b-state.
type OnfTest1_Cont1BState_List2B_Key struct {
	Index1	uint8	`path:"index1"`
	Index2	uint8	`path:"index2"`
}

// NewList2B creates a new entry in the List2B list of the
// OnfTest1_Cont1BState struct. The keys of the list are populated from the input
// arguments.
func (t *OnfTest1_Cont1BState) NewList2B(Index1 uint8, Index2 uint8) (*OnfTest1_Cont1BState_List2B, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.List2B == nil {
		t.List2B = make(map[OnfTest1_Cont1BState_List2B_Key]*OnfTest1_Cont1BState_List2B)
	}

	key := OnfTest1_Cont1BState_List2B_Key{
		Index1: Index1,
		Index2: Index2,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.List2B[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list List2B", key)
	}

	t.List2B[key] = &OnfTest1_Cont1BState_List2B{
		Index1: &Index1,
		Index2: &Index2,
	}

	return t.List2B[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_Cont1BState) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTest1_Cont1BState"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTest1_Cont1BState) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfTest1_Cont1BState_Cont2C represents the /onf-test1/cont1b-state/cont2c YANG schema element.
type OnfTest1_Cont1BState_Cont2C struct {
	Leaf3A	*bool	`path:"leaf3a" module:"onf-test1"`
	Leaf3B	*string	`path:"leaf3b" module:"onf-test1"`
}

// IsYANGGoStruct ensures that OnfTest1_Cont1BState_Cont2C implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTest1_Cont1BState_Cont2C) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_Cont1BState_Cont2C) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTest1_Cont1BState_Cont2C"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTest1_Cont1BState_Cont2C) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfTest1_Cont1BState_List2B represents the /onf-test1/cont1b-state/list2b YANG schema element.
type OnfTest1_Cont1BState_List2B struct {
	Index1	*uint8	`path:"index1" module:"onf-test1"`
	Index2	*uint8	`path:"index2" module:"onf-test1"`
	Leaf3C	*string	`path:"leaf3c" module:"onf-test1"`
	Leaf3D	E_OnfTest1Identities_MYBASE	`path:"leaf3d" module:"onf-test1"`
}

// IsYANGGoStruct ensures that OnfTest1_Cont1BState_List2B implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTest1_Cont1BState_List2B) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfTest1_Cont1BState_List2B struct, which is a YANG list entry.
func (t *OnfTest1_Cont1BState_List2B) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index1 == nil {
		return nil, fmt.Errorf("nil value for key Index1")
	}

	if t.Index2 == nil {
		return nil, fmt.Errorf("nil value for key Index2")
	}

	return map[string]interface{}{
		"index1": *t.Index1,
		"index2": *t.Index2,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_Cont1BState_List2B) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTest1_Cont1BState_List2B"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTest1_Cont1BState_List2B) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// E_OnfTest1Identities_MYBASE is a derived int64 type which is used to represent
// the enumerated node OnfTest1Identities_MYBASE. An additional value named
// OnfTest1Identities_MYBASE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OnfTest1Identities_MYBASE int64

// IsYANGGoEnum ensures that OnfTest1Identities_MYBASE implements the yang.GoEnum
// interface. This ensures that OnfTest1Identities_MYBASE can be identified as a
// mapped type for a YANG enumeration.
func (E_OnfTest1Identities_MYBASE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OnfTest1Identities_MYBASE.
func (E_OnfTest1Identities_MYBASE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OnfTest1Identities_MYBASE.
func (e E_OnfTest1Identities_MYBASE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OnfTest1Identities_MYBASE")
}

const (
	// OnfTest1Identities_MYBASE_UNSET corresponds to the value UNSET of OnfTest1Identities_MYBASE
	OnfTest1Identities_MYBASE_UNSET E_OnfTest1Identities_MYBASE = 0
	// OnfTest1Identities_MYBASE_IDTYPE1 corresponds to the value IDTYPE1 of OnfTest1Identities_MYBASE
	OnfTest1Identities_MYBASE_IDTYPE1 E_OnfTest1Identities_MYBASE = 1
	// OnfTest1Identities_MYBASE_IDTYPE2 corresponds to the value IDTYPE2 of OnfTest1Identities_MYBASE
	OnfTest1Identities_MYBASE_IDTYPE2 E_OnfTest1Identities_MYBASE = 2
)


// E_OnfTest1_Cont1A_Cont2D_Chocolate is a derived int64 type which is used to represent
// the enumerated node OnfTest1_Cont1A_Cont2D_Chocolate. An additional value named
// OnfTest1_Cont1A_Cont2D_Chocolate_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OnfTest1_Cont1A_Cont2D_Chocolate int64

// IsYANGGoEnum ensures that OnfTest1_Cont1A_Cont2D_Chocolate implements the yang.GoEnum
// interface. This ensures that OnfTest1_Cont1A_Cont2D_Chocolate can be identified as a
// mapped type for a YANG enumeration.
func (E_OnfTest1_Cont1A_Cont2D_Chocolate) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OnfTest1_Cont1A_Cont2D_Chocolate.
func (E_OnfTest1_Cont1A_Cont2D_Chocolate) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OnfTest1_Cont1A_Cont2D_Chocolate.
func (e E_OnfTest1_Cont1A_Cont2D_Chocolate) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OnfTest1_Cont1A_Cont2D_Chocolate")
}

const (
	// OnfTest1_Cont1A_Cont2D_Chocolate_UNSET corresponds to the value UNSET of OnfTest1_Cont1A_Cont2D_Chocolate
	OnfTest1_Cont1A_Cont2D_Chocolate_UNSET E_OnfTest1_Cont1A_Cont2D_Chocolate = 0
	// OnfTest1_Cont1A_Cont2D_Chocolate_dark corresponds to the value dark of OnfTest1_Cont1A_Cont2D_Chocolate
	OnfTest1_Cont1A_Cont2D_Chocolate_dark E_OnfTest1_Cont1A_Cont2D_Chocolate = 1
	// OnfTest1_Cont1A_Cont2D_Chocolate_milk corresponds to the value milk of OnfTest1_Cont1A_Cont2D_Chocolate
	OnfTest1_Cont1A_Cont2D_Chocolate_milk E_OnfTest1_Cont1A_Cont2D_Chocolate = 2
	// OnfTest1_Cont1A_Cont2D_Chocolate_first_available corresponds to the value first_available of OnfTest1_Cont1A_Cont2D_Chocolate
	OnfTest1_Cont1A_Cont2D_Chocolate_first_available E_OnfTest1_Cont1A_Cont2D_Chocolate = 3
)


// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_OnfTest1Identities_MYBASE": {
		1: {Name: "IDTYPE1", DefiningModule: "onf-test1-identities"},
		2: {Name: "IDTYPE2", DefiningModule: "onf-test1-identities"},
	},
	"E_OnfTest1_Cont1A_Cont2D_Chocolate": {
		1: {Name: "dark"},
		2: {Name: "milk"},
		3: {Name: "first-available"},
	},
}


var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0xdd, 0x6f, 0xdb, 0x38,
		0x12, 0x7f, 0xcf, 0x5f, 0x31, 0xd0, 0x4b, 0xef, 0x0e, 0xf1, 0xc6, 0x92, 0x93, 0x34, 0xcd, 0x9b,
		0xd3, 0xa4, 0xb8, 0xc5, 0xb6, 0xbb, 0x45, 0x1b, 0xec, 0x61, 0xaf, 0x08, 0x0e, 0xb4, 0x38, 0xb6,
		0x89, 0xca, 0xa4, 0x41, 0x52, 0x69, 0x7c, 0x45, 0xfe, 0xf7, 0x85, 0x3e, 0xfc, 0x6d, 0x4b, 0xa4,
		0x64, 0x3b, 0x76, 0xcc, 0xa7, 0xa2, 0x32, 0xa9, 0x88, 0xf3, 0xf1, 0x9b, 0xe1, 0xcc, 0x70, 0xf8,
		0xf3, 0x04, 0x00, 0xc0, 0xfb, 0x9d, 0x0c, 0xd0, 0xbb, 0x06, 0x8f, 0xe2, 0x23, 0x0b, 0xd1, 0x3b,
		0xcd, 0x9e, 0xfe, 0xc6, 0x38, 0xf5, 0xae, 0xc1, 0xcf, 0xff, 0xfb, 0x5e, 0xf0, 0x2e, 0xeb, 0x79,
		0xd7, 0xd0, 0xcc, 0x1f, 0xdc, 0x32, 0xe9, 0x5d, 0x43, 0xf6, 0x8a, 0xf4, 0x41, 0x28, 0xb8, 0xf6,
		0xc9, 0xdc, 0xb3, 0xb9, 0xd7, 0xe7, 0xbf, 0x9f, 0xce, 0xff, 0x7a, 0x8b, 0x2a, 0x94, 0x6c, 0xa8,
		0x99, 0xe0, 0xc9, 0xa0, 0xfb, 0x3e, 0x82, 0x16, 0x43, 0x88, 0xf0, 0x11, 0x23, 0x48, 0xa6, 0x10,
		0xc6, 0x51, 0x2e, 0xce, 0x9a, 0xff, 0xb8, 0xc9, 0xe3, 0xc5, 0x8f, 0x9c, 0xfc, 0xf0, 0x59, 0x62,
		0x97, 0x3d, 0x2d, 0x7d, 0xdb, 0xdc, 0xf7, 0x69, 0x7f, 0xe1, 0xaf, 0xa4, 0xbf, 0x7e, 0x15, 0xb1,
		0x0c, 0x71, 0xe5, 0xcc, 0xec, 0x4b, 0x70, 0xf4, 0x43, 0xc8, 0xe4, 0x63, 0xbc, 0x61, 0xf6, 0x47,
		0x4e, 0x57, 0x0f, 0xfc, 0x37, 0x51, 0x6d, 0xd9, 0x8b, 0x07, 0xc8, 0xb5, 0x77, 0x0d, 0x5a, 0xc6,
		0xb8, 0x66, 0xe0, 0xcc, 0xa8, 0xe4, 0x9b, 0x96, 0x06, 0x3d, 0xcf, 0x3d, 0x79, 0x5e, 0xa4, 0xe7,
		0x02, 0x5b, 0xe6, 0xd8, 0x13, 0x90, 0xf5, 0x0b, 0x99, 0x65, 0x53, 0x40, 0xd6, 0xad, 0x62, 0x05,
		0xbb, 0x02, 0x4e, 0x4b, 0xd8, 0x55, 0xc2, 0xb6, 0x52, 0xf6, 0x99, 0xb0, 0xd1, 0x8c, 0x9d, 0xa6,
		0x6c, 0xb5, 0x66, 0xaf, 0x35, 0x9b, 0x8d, 0xd9, 0xbd, 0x9a, 0xed, 0x6b, 0xd8, 0x5f, 0x2a, 0x06,
		0x93, 0x01, 0x11, 0x92, 0x6e, 0x81, 0x38, 0x2c, 0x91, 0x33, 0x1f, 0x5f, 0xb2, 0x98, 0x05, 0xf1,
		0xf8, 0x3d, 0x1e, 0xa0, 0x64, 0x21, 0x24, 0x93, 0x81, 0x71, 0xc5, 0x28, 0xc2, 0xfb, 0xb1, 0x90,
		0x80, 0xc9, 0xeb, 0xba, 0x24, 0x8e, 0x52, 0xd2, 0x04, 0x65, 0x63, 0x73, 0xd9, 0x6a, 0x96, 0x0c,
		0x2b, 0x93, 0x31, 0x1b, 0x59, 0xb3, 0x93, 0x39, 0x5b, 0xd9, 0xab, 0x2c, 0x83, 0x95, 0x65, 0xd1,
		0x5a, 0x26, 0x8b, 0x65, 0xb3, 0x44, 0x46, 0x27, 0x7f, 0xed, 0x7e, 0x34, 0x44, 0x3b, 0x3a, 0xc7,
		0x8c, 0xeb, 0x2b, 0x13, 0x52, 0xe7, 0x42, 0x71, 0x61, 0x30, 0xf4, 0x0b, 0xe1, 0xbd, 0xe4, 0xe5,
		0xdf, 0x8c, 0x48, 0x64, 0xc6, 0xba, 0xf4, 0xc5, 0x9f, 0x18, 0x37, 0xe6, 0xb5, 0xa5, 0x34, 0x2f,
		0x4d, 0xfb, 0x93, 0x44, 0x31, 0xae, 0x47, 0xd8, 0xb5, 0xf3, 0x3e, 0x48, 0x12, 0x26, 0x4a, 0x7b,
		0xcb, 0x7a, 0x4c, 0xab, 0xe4, 0x0f, 0x1b, 0xcf, 0x7f, 0x3e, 0xb5, 0x20, 0x05, 0x79, 0xda, 0x39,
		0x29, 0x5a, 0x3b, 0x24, 0xc5, 0xc9, 0x06, 0x09, 0xb6, 0xef, 0x12, 0xe6, 0x44, 0x6c, 0x4a, 0x8b,
		0xfd, 0x93, 0xb1, 0xd2, 0x51, 0x0f, 0x27, 0xd5, 0xe6, 0x17, 0xf0, 0x22, 0xf3, 0x11, 0x3a, 0x96,
		0x3e, 0x45, 0xc7, 0xd2, 0xa7, 0xf8, 0x53, 0x44, 0x9a, 0xf4, 0xb0, 0xb2, 0x4f, 0xe1, 0xfc, 0x84,
		0x43, 0xf5, 0x13, 0x3e, 0x11, 0x4e, 0x89, 0x16, 0x72, 0x54, 0x6e, 0xe0, 0x2a, 0xf8, 0x14, 0x14,
		0x43, 0x36, 0x20, 0xd1, 0xe5, 0xb9, 0x85, 0x5f, 0xe1, 0x07, 0x06, 0x63, 0x97, 0x94, 0xbd, 0x75,
		0xa8, 0xde, 0x88, 0xff, 0x52, 0xde, 0x48, 0xeb, 0xd5, 0x98, 0x8a, 0xa0, 0xd9, 0x6c, 0xee, 0x90,
		0x1a, 0xfb, 0x6e, 0x2c, 0x42, 0x4b, 0x63, 0x11, 0x5a, 0x1a, 0x8b, 0x2f, 0x48, 0x28, 0x08, 0x1e,
		0x8d, 0x76, 0x66, 0x2e, 0x02, 0x67, 0x2e, 0x0e, 0x76, 0x5b, 0xa9, 0xb4, 0x64, 0xbc, 0x67, 0x83,
		0xff, 0x57, 0xdb, 0x52, 0x0c, 0x6a, 0xa9, 0x18, 0xd4, 0x52, 0x31, 0xda, 0x5c, 0xe8, 0x3e, 0x4a,
		0xc8, 0xad, 0x9e, 0x73, 0xa4, 0x9c, 0x66, 0x38, 0xe7, 0xe8, 0x30, 0x43, 0x35, 0xce, 0x39, 0x7a,
		0xa5, 0xce, 0x11, 0x5a, 0xda, 0x00, 0xb4, 0xb4, 0x01, 0xa9, 0x4b, 0x14, 0x31, 0xa5, 0x1d, 0xfa,
		0x3b, 0xf4, 0x2f, 0xa2, 0x33, 0xe3, 0xda, 0xbf, 0xb4, 0x40, 0xfe, 0xe0, 0xe8, 0x36, 0xb8, 0xf5,
		0x71, 0xab, 0xf9, 0x9a, 0x50, 0xfc, 0xd5, 0x85, 0x43, 0x4b, 0x54, 0xea, 0x23, 0x53, 0xba, 0xad,
		0xb5, 0x34, 0x53, 0xab, 0x4f, 0x8c, 0xdf, 0x45, 0x98, 0x28, 0xbc, 0x32, 0x23, 0x73, 0xc2, 0xc6,
		0x99, 0x19, 0xfe, 0xd5, 0xf9, 0xf9, 0xe5, 0xdb, 0xf3, 0xf3, 0xe6, 0xdb, 0xd6, 0xdb, 0xe6, 0xbb,
		0x8b, 0x0b, 0xff, 0xd2, 0x37, 0x49, 0x70, 0xfd, 0x21, 0x29, 0x4a, 0xa4, 0x37, 0x23, 0xef, 0x1a,
		0x78, 0x1c, 0x45, 0xdb, 0x32, 0x5b, 0x5d, 0x4b, 0xb3, 0xd5, 0xb5, 0x34, 0x5b, 0x1d, 0xc6, 0x89,
		0x1c, 0xb9, 0xf8, 0xaf, 0x33, 0x5c, 0xa5, 0x74, 0xce, 0x44, 0xc5, 0xc2, 0x72, 0xbd, 0x33, 0x18,
		0xfa, 0x11, 0x79, 0x4f, 0xf7, 0x5f, 0xcb, 0xf6, 0x23, 0x70, 0x96, 0xeb, 0x65, 0x68, 0xb1, 0xef,
		0xbb, 0x8f, 0x9e, 0x25, 0x8c, 0xf7, 0x2c, 0x61, 0xfc, 0x46, 0x88, 0x08, 0x09, 0x77, 0x38, 0xee,
		0x70, 0xbc, 0x1c, 0xc7, 0x33, 0x59, 0xb1, 0x09, 0x3e, 0xf9, 0x55, 0xf5, 0xc2, 0xaa, 0xcc, 0xae,
		0xcd, 0xb9, 0xd0, 0x24, 0x17, 0xe9, 0x82, 0x6a, 0x3b, 0x15, 0xf6, 0x71, 0x40, 0x86, 0x24, 0xb5,
		0x1b, 0xde, 0x99, 0xe0, 0xdd, 0x86, 0x46, 0xa5, 0xfd, 0xb3, 0xac, 0x28, 0xf6, 0xac, 0xb0, 0xe8,
		0x32, 0x7b, 0x83, 0x96, 0x71, 0xa8, 0x79, 0x4e, 0x90, 0x3f, 0x78, 0xf7, 0x3e, 0x99, 0xff, 0xbf,
		0x44, 0x63, 0xfc, 0x76, 0xfa, 0x4f, 0xd0, 0x5e, 0xcd, 0xb8, 0xe5, 0x15, 0xad, 0x58, 0x4d, 0x56,
		0xf6, 0x49, 0x0d, 0xcb, 0x43, 0xa9, 0x61, 0x79, 0xe8, 0x8c, 0x3e, 0xd3, 0xfd, 0xa8, 0x09, 0x25,
		0x87, 0x58, 0x14, 0x4a, 0x76, 0x5b, 0x15, 0x4a, 0x5b, 0xb6, 0x69, 0xb9, 0x64, 0x86, 0x1d, 0xfa,
		0x67, 0xa9, 0x96, 0x0c, 0xfc, 0x05, 0x9f, 0x05, 0x7e, 0x0a, 0x24, 0xee, 0x25, 0x6b, 0x47, 0x0a,
		0x5a, 0xc0, 0xca, 0xaa, 0xf1, 0x3d, 0x35, 0x06, 0xe4, 0x35, 0x5a, 0x03, 0xe2, 0xf2, 0x74, 0x6b,
		0x10, 0x99, 0x93, 0xf0, 0xbb, 0xb9, 0xa2, 0x64, 0xc3, 0xad, 0xb5, 0x84, 0xb0, 0x5e, 0x5f, 0x43,
		0x57, 0x8a, 0x01, 0x7c, 0xf9, 0xf0, 0xbe, 0x71, 0xd9, 0x0c, 0x9a, 0x86, 0xca, 0x70, 0xe1, 0x94,
		0xe1, 0xf0, 0x94, 0xa1, 0x0c, 0xa1, 0xa7, 0x48, 0x4d, 0x34, 0x36, 0x78, 0x22, 0x1c, 0xe6, 0xd4,
		0x9b, 0x60, 0xf6, 0x74, 0xae, 0x21, 0x15, 0x72, 0x91, 0x3a, 0x37, 0x1c, 0x6e, 0x2a, 0x5a, 0x55,
		0x44, 0xac, 0xa2, 0xa8, 0x55, 0x15, 0xb9, 0xda, 0xa2, 0x57, 0x5b, 0x04, 0xab, 0x8b, 0xa2, 0xe5,
		0x5e, 0xd3, 0x90, 0x57, 0xa6, 0x22, 0x3a, 0x75, 0x2d, 0xfb, 0x22, 0x14, 0x89, 0xcc, 0xd9, 0x13,
		0x7d, 0xe2, 0x75, 0x4e, 0x5e, 0x61, 0x49, 0xb3, 0x05, 0x40, 0x45, 0x1e, 0x0f, 0x50, 0x92, 0xc4,
		0xb7, 0xc8, 0xf7, 0x9d, 0x10, 0x12, 0x85, 0x30, 0xd5, 0x88, 0x0d, 0x78, 0x23, 0x9b, 0x0a, 0x4b,
		0xd8, 0x6a, 0x51, 0x1d, 0x6d, 0xaa, 0xa9, 0x55, 0x75, 0xb5, 0x6b, 0x63, 0x5a, 0xb6, 0x31, 0x6d,
		0xab, 0xaf, 0x75, 0x76, 0xda, 0x57, 0x21, 0x46, 0x66, 0xe7, 0x3d, 0xad, 0xe5, 0xf4, 0x58, 0x27,
		0x12, 0x15, 0xa9, 0xc0, 0xf1, 0xb1, 0x8b, 0x75, 0x5e, 0x61, 0xee, 0x1d, 0x8f, 0x07, 0xc9, 0xc7,
		0x5b, 0x92, 0xe8, 0x85, 0x80, 0xcf, 0x70, 0xb3, 0x5f, 0x6d, 0xf3, 0x4f, 0xcf, 0x52, 0x07, 0xf1,
		0x6c, 0xc6, 0x36, 0x6f, 0x28, 0x42, 0x68, 0xb0, 0x3c, 0x4f, 0x0d, 0x85, 0xd4, 0xaa, 0x41, 0x24,
		0x72, 0x62, 0xef, 0x4f, 0xcc, 0xcd, 0x76, 0x1e, 0x85, 0xf3, 0x28, 0xb6, 0xed, 0x51, 0x74, 0x10,
		0x65, 0x75, 0x67, 0x22, 0x9d, 0x5d, 0xcf, 0x8f, 0x08, 0x38, 0x05, 0x1c, 0x0c, 0xf5, 0x68, 0xde,
		0x8d, 0x98, 0x55, 0x04, 0xe7, 0x48, 0x38, 0x47, 0xe2, 0xc8, 0x1c, 0x89, 0x44, 0x21, 0xea, 0xb8,
		0x10, 0xad, 0x6d, 0xb9, 0x01, 0x16, 0x60, 0x3e, 0x94, 0xa8, 0xff, 0x8f, 0x51, 0x75, 0x74, 0x19,
		0xbf, 0xa0, 0xe6, 0x46, 0xc5, 0x81, 0x8b, 0x03, 0x17, 0x07, 0x2e, 0x87, 0x00, 0x2e, 0x87, 0xb7,
		0xc7, 0x98, 0xf3, 0xd7, 0x37, 0xb5, 0xcb, 0xa8, 0x15, 0xf6, 0xb4, 0x5c, 0xb6, 0xd5, 0x72, 0xbd,
		0xc3, 0xcb, 0x04, 0xd3, 0x9a, 0x99, 0xe0, 0xdb, 0x3a, 0x99, 0xe0, 0xc4, 0xe8, 0xf8, 0x06, 0x8d,
		0x82, 0xf2, 0x71, 0x66, 0x99, 0xe0, 0x8f, 0x2b, 0xab, 0x3c, 0xd6, 0x4f, 0x2f, 0x36, 0x46, 0xae,
		0x53, 0xd0, 0xe6, 0x3a, 0x05, 0x95, 0x42, 0xb3, 0x79, 0xda, 0x6d, 0x9a, 0x6e, 0x2b, 0x18, 0x63,
		0x58, 0x3e, 0x67, 0x56, 0x47, 0x6b, 0x91, 0x39, 0xb2, 0xf2, 0x6e, 0x26, 0x25, 0x61, 0x17, 0x86,
		0xe3, 0x2b, 0x54, 0x82, 0x3d, 0x9b, 0x15, 0xfe, 0x6e, 0x7d, 0x89, 0x7e, 0x73, 0x8b, 0x6b, 0xac,
		0x88, 0xbd, 0x0f, 0x75, 0xf0, 0x8b, 0x29, 0xa3, 0x46, 0x67, 0xf9, 0x38, 0x33, 0xfc, 0x6a, 0x83,
		0x62, 0x83, 0x61, 0x84, 0xd9, 0x79, 0x19, 0xd1, 0x4d, 0x7c, 0xec, 0x2e, 0xeb, 0xc5, 0x59, 0xdc,
		0x14, 0x98, 0xc6, 0x81, 0x72, 0x5d, 0xcf, 0xf6, 0xbe, 0xeb, 0x59, 0x6e, 0x35, 0x0d, 0x53, 0xf6,
		0xe9, 0x68, 0xbb, 0x8c, 0xfd, 0x7d, 0x3f, 0x17, 0x11, 0xa6, 0xe0, 0x3b, 0x8e, 0x90, 0x42, 0x67,
		0x04, 0x26, 0xef, 0x71, 0xe5, 0x8c, 0x1b, 0xdb, 0x1c, 0xbd, 0xc6, 0x73, 0xe6, 0x47, 0x57, 0x97,
		0x7e, 0xee, 0xca, 0xd2, 0xc7, 0xa4, 0xb8, 0x72, 0x55, 0xe9, 0xc9, 0xb2, 0xe4, 0x53, 0x63, 0x28,
		0x7e, 0x18, 0x04, 0xfe, 0x27, 0x7a, 0x36, 0x99, 0x61, 0xdb, 0x34, 0x24, 0x44, 0xf6, 0x88, 0x60,
		0x34, 0xd7, 0xe1, 0xf6, 0xf1, 0xe0, 0x76, 0x6c, 0x7b, 0x10, 0xf6, 0xf2, 0xd8, 0x9a, 0x19, 0xb8,
		0xd3, 0x44, 0x33, 0x8d, 0x27, 0xdd, 0x69, 0xa2, 0x74, 0x59, 0xda, 0x1a, 0xb7, 0x75, 0x35, 0xdc,
		0xbe, 0x97, 0x84, 0xab, 0x01, 0xd3, 0x0e, 0xb8, 0x1d, 0x70, 0x3b, 0xe0, 0xb6, 0x03, 0x2b, 0xd7,
		0xcd, 0xf5, 0x38, 0x4f, 0x81, 0x5a, 0x85, 0x57, 0x7e, 0xc3, 0x51, 0x49, 0x58, 0xc4, 0xac, 0x13,
		0x82, 0x79, 0x07, 0x84, 0x85, 0xce, 0x07, 0x05, 0x9b, 0x42, 0xb3, 0xf6, 0x06, 0xdb, 0xce, 0xde,
		0x14, 0xc6, 0x14, 0xa1, 0x3c, 0x7b, 0x93, 0x90, 0xcf, 0xe2, 0x1c, 0x5f, 0xe1, 0x4d, 0x10, 0xed,
		0x71, 0x49, 0xc0, 0x4a, 0x8c, 0x2a, 0x09, 0x8e, 0x9e, 0x69, 0xff, 0xba, 0xb0, 0x8c, 0x60, 0xd1,
		0xf8, 0xde, 0x3d, 0x69, 0xe4, 0x94, 0xf1, 0x9e, 0x4d, 0x7a, 0xc7, 0x1d, 0xfa, 0x5b, 0x6f, 0x45,
		0x77, 0x77, 0xe8, 0xaf, 0xe4, 0xe8, 0xe7, 0x12, 0x41, 0x4b, 0x53, 0x94, 0x50, 0xed, 0x28, 0xa8,
		0xa1, 0x74, 0xec, 0xca, 0x35, 0x73, 0x07, 0x98, 0x36, 0x62, 0x4b, 0x4a, 0x50, 0xeb, 0x61, 0x11,
		0xb5, 0x8a, 0x91, 0xb8, 0x0c, 0x81, 0x57, 0x5d, 0xe1, 0x53, 0x08, 0xb9, 0xf3, 0xf4, 0x98, 0x7e,
		0xdb, 0x8c, 0x36, 0x65, 0x37, 0x17, 0x75, 0x1a, 0x4a, 0xaf, 0x3a, 0xc3, 0x32, 0x7f, 0xbf, 0xd1,
		0x78, 0x54, 0xf1, 0x2d, 0x47, 0x6d, 0x50, 0x18, 0x0a, 0x4e, 0x57, 0x5d, 0x75, 0x04, 0x0d, 0xd0,
		0x7d, 0xa6, 0x40, 0x70, 0x84, 0xae, 0x90, 0x90, 0xbe, 0x0f, 0x88, 0xd6, 0x92, 0x75, 0x62, 0x8d,
		0xea, 0x17, 0xb8, 0xa3, 0x4c, 0x83, 0x1a, 0x0d, 0x3a, 0x22, 0x02, 0xd5, 0x17, 0x71, 0x44, 0x81,
		0x0b, 0x0d, 0x1d, 0x84, 0x47, 0xa6, 0x58, 0x27, 0x42, 0xdb, 0xdb, 0x92, 0x02, 0x77, 0x5b, 0xd2,
		0x4a, 0x4c, 0x0c, 0x0d, 0x8f, 0xc3, 0x87, 0xc6, 0xb7, 0x25, 0x31, 0x05, 0x4c, 0x01, 0x01, 0x8e,
		0x3f, 0x66, 0x38, 0x4e, 0x28, 0x45, 0x0a, 0x8c, 0x83, 0xee, 0x23, 0x04, 0x4d, 0xff, 0x1d, 0x3c,
		0xa2, 0x54, 0x4c, 0xf0, 0x5f, 0x00, 0xfe, 0x83, 0x40, 0x05, 0x7f, 0xa3, 0xa1, 0x4f, 0x1e, 0x11,
		0xb4, 0x00, 0x45, 0x46, 0xc0, 0xf4, 0x1b, 0x05, 0x6f, 0xb2, 0x14, 0x24, 0x74, 0x49, 0xa4, 0xf0,
		0x0d, 0x34, 0x80, 0x0d, 0x86, 0x11, 0xcb, 0x32, 0x4e, 0x43, 0x22, 0x13, 0x9a, 0xb8, 0x84, 0xe4,
		0x21, 0x5c, 0xc3, 0xd4, 0xb2, 0xbc, 0x86, 0xa9, 0x45, 0x2a, 0x36, 0xfb, 0xcd, 0xdb, 0x68, 0xc0,
		0x23, 0x91, 0x8c, 0x2c, 0xe3, 0x84, 0x0b, 0x91, 0x1c, 0x71, 0x88, 0x64, 0x97, 0x2d, 0x56, 0x4a,
		0x5a, 0x0f, 0xb5, 0x2c, 0xaf, 0x10, 0x69, 0x75, 0x2a, 0xea, 0x43, 0xde, 0x84, 0xc2, 0xa9, 0x83,
		0x53, 0x87, 0x45, 0x3a, 0xbb, 0x14, 0x7d, 0x79, 0xa0, 0xec, 0xc2, 0xc5, 0x0c, 0x6d, 0x6b, 0xe8,
		0x8e, 0x2f, 0x66, 0xb8, 0x99, 0xc8, 0x5a, 0xbe, 0xad, 0x3a, 0x2b, 0x74, 0xb7, 0x4b, 0x37, 0x7b,
		0x37, 0x5f, 0x93, 0x97, 0x64, 0x25, 0xd2, 0xef, 0xeb, 0x96, 0x48, 0x9b, 0x34, 0xcb, 0x2a, 0xbc,
		0x9a, 0x61, 0xc5, 0xa6, 0x70, 0x7e, 0xab, 0x57, 0xb7, 0x36, 0x3a, 0x70, 0xee, 0x7b, 0x4d, 0xe1,
		0x35, 0xaf, 0x8d, 0x2e, 0xcd, 0x30, 0x19, 0x64, 0x96, 0x0c, 0x33, 0x4a, 0x7b, 0x52, 0x19, 0xed,
		0x37, 0x8d, 0xbb, 0xf5, 0x1f, 0x72, 0x75, 0x74, 0xb0, 0xe5, 0x65, 0xbe, 0x54, 0x81, 0x74, 0xc7,
		0xb0, 0x40, 0xba, 0x53, 0xb5, 0x40, 0x3a, 0x03, 0xb3, 0xb4, 0x30, 0xfa, 0x14, 0x7e, 0x30, 0xdd,
		0x07, 0x02, 0x54, 0xc4, 0x9d, 0x08, 0xe1, 0x3b, 0x8e, 0xea, 0x86, 0x26, 0x1c, 0xb6, 0x6d, 0x3d,
		0x34, 0xc1, 0x38, 0xc5, 0x27, 0xdf, 0x7c, 0x2b, 0x96, 0x8f, 0xaf, 0x5a, 0x2f, 0x9d, 0xcc, 0x76,
		0x3b, 0x30, 0xb7, 0x03, 0x73, 0x77, 0x3c, 0x1b, 0x5a, 0x26, 0x57, 0x6a, 0x37, 0x35, 0xd2, 0x17,
		0x17, 0xae, 0xd6, 0x6e, 0x82, 0xd9, 0x81, 0x25, 0x66, 0x07, 0x0e, 0xb3, 0x1d, 0x66, 0x3b, 0xcc,
		0x76, 0x98, 0xed, 0x30, 0xfb, 0x25, 0x30, 0x3b, 0x4d, 0x61, 0x58, 0x76, 0xdc, 0xb6, 0xee, 0xb7,
		0xdd, 0x1e, 0x27, 0x3b, 0x26, 0xd1, 0xa5, 0x71, 0xbe, 0x39, 0x41, 0x72, 0x77, 0x09, 0xae, 0xc3,
		0x70, 0x97, 0xf9, 0xb0, 0x88, 0x7d, 0x39, 0x18, 0x77, 0x77, 0xe6, 0xac, 0x40, 0x71, 0xcb, 0x5b,
		0x9b, 0x5b, 0xf6, 0xb7, 0x36, 0x03, 0xa3, 0xc8, 0x35, 0xd3, 0x23, 0x89, 0xdd, 0xdd, 0x60, 0xb9,
		0xf3, 0xc7, 0x0f, 0x17, 0xcb, 0x67, 0x84, 0xc5, 0x06, 0xd0, 0x4d, 0xdc, 0xf2, 0x5f, 0xf3, 0x57,
		0xdf, 0x10, 0x85, 0xf6, 0x1d, 0x63, 0x3f, 0xfd, 0x75, 0xd3, 0xfe, 0x7a, 0xe7, 0xd9, 0xc4, 0xe2,
		0x95, 0xb1, 0xf1, 0xb0, 0x33, 0x20, 0x73, 0xdf, 0xf5, 0xeb, 0xed, 0xfd, 0x5f, 0x9f, 0xef, 0x7c,
		0x6f, 0x1b, 0xf0, 0x5c, 0xeb, 0x93, 0x82, 0x4d, 0xf7, 0x66, 0x7d, 0xd8, 0x75, 0x1d, 0x70, 0xf1,
		0x99, 0x92, 0x2c, 0x78, 0x0c, 0x85, 0xf1, 0x88, 0x2d, 0x1f, 0x2e, 0xb9, 0xda, 0xef, 0xc3, 0x25,
		0xe3, 0x14, 0x78, 0x61, 0x56, 0x06, 0x0c, 0x53, 0xe0, 0xe9, 0x39, 0x93, 0x9b, 0x0d, 0x9d, 0x33,
		0xa9, 0x55, 0xb1, 0xbd, 0xba, 0x60, 0xda, 0x70, 0x1d, 0x26, 0xc5, 0xdb, 0x89, 0xa1, 0x6d, 0xeb,
		0x7b, 0x31, 0xfc, 0x88, 0x8f, 0x2b, 0xfa, 0x7a, 0xce, 0x19, 0xe4, 0x99, 0x71, 0x65, 0x05, 0xdc,
		0x69, 0x6b, 0x4e, 0xa2, 0x53, 0xb3, 0x3b, 0xad, 0xe2, 0xfe, 0x07, 0x17, 0x1a, 0x24, 0x86, 0x62,
		0x30, 0x40, 0x4e, 0x91, 0x42, 0x27, 0xd6, 0x30, 0x88, 0x55, 0x5a, 0x9d, 0xad, 0xe2, 0xe1, 0x50,
		0x48, 0x8d, 0xf4, 0x9f, 0x6b, 0x0a, 0xb4, 0x9b, 0xeb, 0x0a, 0xb4, 0x9b, 0x47, 0x5b, 0xa0, 0xbd,
		0xd6, 0xe6, 0x95, 0xef, 0x57, 0x8a, 0xf6, 0x27, 0xde, 0x67, 0xa2, 0x35, 0x4a, 0xbe, 0xd6, 0xa6,
		0x78, 0xdf, 0xda, 0x8d, 0xff, 0x3e, 0xfc, 0x6c, 0x3d, 0x37, 0xbe, 0x35, 0x1b, 0xef, 0x1e, 0xfe,
		0xb5, 0xfc, 0xdd, 0x0f, 0xeb, 0x64, 0xef, 0x64, 0x66, 0x1d, 0xeb, 0x94, 0xc3, 0x63, 0xea, 0x03,
		0xf9, 0x8e, 0x5f, 0x84, 0x58, 0xa6, 0xde, 0xa2, 0xc2, 0x78, 0xb3, 0x3f, 0xcd, 0xa9, 0xc4, 0x2d,
		0x3e, 0xb2, 0x30, 0x57, 0x82, 0xe7, 0x93, 0xe7, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00,
		0x00, 0xff, 0xff, 0x46, 0xd1, 0xc2, 0xc4, 0xcf, 0x99, 0x00, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
	"/cont1a/cont2d/chocolate": []reflect.Type{
		reflect.TypeOf((E_OnfTest1_Cont1A_Cont2D_Chocolate)(0)),
	},
	"/cont1b-state/list2b/leaf3d": []reflect.Type{
		reflect.TypeOf((E_OnfTest1Identities_MYBASE)(0)),
	},
}

