// Code generated by YGOT. DO NOTEDIT.
/*
Package api is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /go/pkg/mod/github.com/openconfig/ygot@v0.26.2/genutil/names.go
using the following YANG input files:
	- /config-model/yang/onf-test1@2018-02-20.yang
	- /config-model/yang/onf-test1-extra@2021-04-01.yang
	- /config-model/yang/switch/onf-switch-model@2023-03-07.yang
	- /config-model/yang/switch/onf-switch@2023-03-07.yang
	- /config-model/yang/onf-test1-choice@2023-03-07.yang
Imported modules were sourced from:
	- /var/model-compiler/yang-base/...
	- /config-model/yang/...
	- /config-model/yang/switch/...
*/
package api

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
	ΛEnumTypes map[string][]reflect.Type
)

func init() {
	var err error
	initΛEnumTypes()
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Device{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	Cont1A	*OnfTest1_Cont1A	`path:"cont1a" module:"onf-test1"`
	Cont1BState	*OnfTest1_Cont1BState	`path:"cont1b-state" module:"onf-test1"`
	LeafAtTopLevel	*string	`path:"leaf-at-top-level" module:"onf-test1"`
	List1A	map[string]*OnfTest1_List1A	`path:"list1a" module:"onf-test1"`
	Switch	map[string]*OnfSwitch_Switch	`path:"switch" module:"onf-switch"`
	SwitchModel	map[string]*OnfSwitchModel_SwitchModel	`path:"switch-model" module:"onf-switch-model"`
	Vehicle	map[string]*OnfTest1Choice_Vehicle	`path:"vehicle" module:"onf-test1-choice"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// NewList1A creates a new entry in the List1A list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewList1A(ListId string) (*OnfTest1_List1A, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.List1A == nil {
		t.List1A = make(map[string]*OnfTest1_List1A)
	}

	key := ListId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.List1A[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list List1A", key)
	}

	t.List1A[key] = &OnfTest1_List1A{
		ListId: &ListId,
	}

	return t.List1A[key], nil
}

// NewSwitch creates a new entry in the Switch list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewSwitch(SwitchId string) (*OnfSwitch_Switch, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Switch == nil {
		t.Switch = make(map[string]*OnfSwitch_Switch)
	}

	key := SwitchId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Switch[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Switch", key)
	}

	t.Switch[key] = &OnfSwitch_Switch{
		SwitchId: &SwitchId,
	}

	return t.Switch[key], nil
}

// NewSwitchModel creates a new entry in the SwitchModel list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewSwitchModel(SwitchModelId string) (*OnfSwitchModel_SwitchModel, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SwitchModel == nil {
		t.SwitchModel = make(map[string]*OnfSwitchModel_SwitchModel)
	}

	key := SwitchModelId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SwitchModel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SwitchModel", key)
	}

	t.SwitchModel[key] = &OnfSwitchModel_SwitchModel{
		SwitchModelId: &SwitchModelId,
	}

	return t.SwitchModel[key], nil
}

// NewVehicle creates a new entry in the Vehicle list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewVehicle(Id string) (*OnfTest1Choice_Vehicle, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vehicle == nil {
		t.Vehicle = make(map[string]*OnfTest1Choice_Vehicle)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vehicle[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vehicle", key)
	}

	t.Vehicle[key] = &OnfTest1Choice_Vehicle{
		Id: &Id,
	}

	return t.Vehicle[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Device.
func (*Device) ΛBelongingModule() string {
	return ""
}


// OnfSwitchModel_SwitchModel represents the /onf-switch-model/switch-model YANG schema element.
type OnfSwitchModel_SwitchModel struct {
	Attribute	map[string]*OnfSwitchModel_SwitchModel_Attribute	`path:"attribute" module:"onf-switch-model"`
	Description	*string	`path:"description" module:"onf-switch-model"`
	DisplayName	*string	`path:"display-name" module:"onf-switch-model"`
	Port	map[uint8]*OnfSwitchModel_SwitchModel_Port	`path:"port" module:"onf-switch-model"`
	SwitchModelId	*string	`path:"switch-model-id" module:"onf-switch-model"`
}

// IsYANGGoStruct ensures that OnfSwitchModel_SwitchModel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfSwitchModel_SwitchModel) IsYANGGoStruct() {}

// NewAttribute creates a new entry in the Attribute list of the
// OnfSwitchModel_SwitchModel struct. The keys of the list are populated from the input
// arguments.
func (t *OnfSwitchModel_SwitchModel) NewAttribute(AttributeKey string) (*OnfSwitchModel_SwitchModel_Attribute, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Attribute == nil {
		t.Attribute = make(map[string]*OnfSwitchModel_SwitchModel_Attribute)
	}

	key := AttributeKey

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Attribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Attribute", key)
	}

	t.Attribute[key] = &OnfSwitchModel_SwitchModel_Attribute{
		AttributeKey: &AttributeKey,
	}

	return t.Attribute[key], nil
}

// NewPort creates a new entry in the Port list of the
// OnfSwitchModel_SwitchModel struct. The keys of the list are populated from the input
// arguments.
func (t *OnfSwitchModel_SwitchModel) NewPort(CageNumber uint8) (*OnfSwitchModel_SwitchModel_Port, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[uint8]*OnfSwitchModel_SwitchModel_Port)
	}

	key := CageNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Port[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Port", key)
	}

	t.Port[key] = &OnfSwitchModel_SwitchModel_Port{
		CageNumber: &CageNumber,
	}

	return t.Port[key], nil
}

// ΛListKeyMap returns the keys of the OnfSwitchModel_SwitchModel struct, which is a YANG list entry.
func (t *OnfSwitchModel_SwitchModel) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SwitchModelId == nil {
		return nil, fmt.Errorf("nil value for key SwitchModelId")
	}

	return map[string]interface{}{
		"switch-model-id": *t.SwitchModelId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitchModel_SwitchModel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfSwitchModel_SwitchModel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitchModel_SwitchModel) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfSwitchModel_SwitchModel) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfSwitchModel_SwitchModel.
func (*OnfSwitchModel_SwitchModel) ΛBelongingModule() string {
	return "onf-switch-model"
}


// OnfSwitchModel_SwitchModel_Attribute represents the /onf-switch-model/switch-model/attribute YANG schema element.
type OnfSwitchModel_SwitchModel_Attribute struct {
	AttributeKey	*string	`path:"attribute-key" module:"onf-switch-model"`
	Value	*string	`path:"value" module:"onf-switch-model"`
}

// IsYANGGoStruct ensures that OnfSwitchModel_SwitchModel_Attribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfSwitchModel_SwitchModel_Attribute) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfSwitchModel_SwitchModel_Attribute struct, which is a YANG list entry.
func (t *OnfSwitchModel_SwitchModel_Attribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttributeKey == nil {
		return nil, fmt.Errorf("nil value for key AttributeKey")
	}

	return map[string]interface{}{
		"attribute-key": *t.AttributeKey,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitchModel_SwitchModel_Attribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfSwitchModel_SwitchModel_Attribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitchModel_SwitchModel_Attribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfSwitchModel_SwitchModel_Attribute) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfSwitchModel_SwitchModel_Attribute.
func (*OnfSwitchModel_SwitchModel_Attribute) ΛBelongingModule() string {
	return "onf-switch-model"
}


// OnfSwitchModel_SwitchModel_Port represents the /onf-switch-model/switch-model/port YANG schema element.
type OnfSwitchModel_SwitchModel_Port struct {
	CageNumber	*uint8	`path:"cage-number" module:"onf-switch-model"`
	Description	*string	`path:"description" module:"onf-switch-model"`
	DisplayName	*string	`path:"display-name" module:"onf-switch-model"`
	MaxChannel	*uint8	`path:"max-channel" module:"onf-switch-model"`
	Speeds	[]E_OnfSwitchTypes_Speed	`path:"speeds" module:"onf-switch-model"`
}

// IsYANGGoStruct ensures that OnfSwitchModel_SwitchModel_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfSwitchModel_SwitchModel_Port) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfSwitchModel_SwitchModel_Port struct, which is a YANG list entry.
func (t *OnfSwitchModel_SwitchModel_Port) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CageNumber == nil {
		return nil, fmt.Errorf("nil value for key CageNumber")
	}

	return map[string]interface{}{
		"cage-number": *t.CageNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitchModel_SwitchModel_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfSwitchModel_SwitchModel_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitchModel_SwitchModel_Port) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfSwitchModel_SwitchModel_Port) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfSwitchModel_SwitchModel_Port.
func (*OnfSwitchModel_SwitchModel_Port) ΛBelongingModule() string {
	return "onf-switch-model"
}


// OnfSwitch_Switch represents the /onf-switch/switch YANG schema element.
type OnfSwitch_Switch struct {
	Attribute	map[string]*OnfSwitch_Switch_Attribute	`path:"attribute" module:"onf-switch"`
	Description	*string	`path:"description" module:"onf-switch"`
	DisplayName	*string	`path:"display-name" module:"onf-switch"`
	HostLocalAgent	*string	`path:"host-local-agent" module:"onf-switch"`
	ModelId	*string	`path:"model-id" module:"onf-switch"`
	Port	map[OnfSwitch_Switch_Port_Key]*OnfSwitch_Switch_Port	`path:"port" module:"onf-switch"`
	State	*OnfSwitch_Switch_State	`path:"state" module:"onf-switch"`
	SwitchId	*string	`path:"switch-id" module:"onf-switch"`
}

// IsYANGGoStruct ensures that OnfSwitch_Switch implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfSwitch_Switch) IsYANGGoStruct() {}

// OnfSwitch_Switch_Port_Key represents the key for list Port of element /onf-switch/switch.
type OnfSwitch_Switch_Port_Key struct {
	CageNumber	uint8	`path:"cage-number"`
	ChannelNumber	uint8	`path:"channel-number"`
}

// IsYANGGoKeyStruct ensures that OnfSwitch_Switch_Port_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (OnfSwitch_Switch_Port_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the OnfSwitch_Switch_Port_Key key struct.
func (t OnfSwitch_Switch_Port_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"cage-number": t.CageNumber,
		"channel-number": t.ChannelNumber,
	}, nil
}

// NewAttribute creates a new entry in the Attribute list of the
// OnfSwitch_Switch struct. The keys of the list are populated from the input
// arguments.
func (t *OnfSwitch_Switch) NewAttribute(AttributeKey string) (*OnfSwitch_Switch_Attribute, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Attribute == nil {
		t.Attribute = make(map[string]*OnfSwitch_Switch_Attribute)
	}

	key := AttributeKey

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Attribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Attribute", key)
	}

	t.Attribute[key] = &OnfSwitch_Switch_Attribute{
		AttributeKey: &AttributeKey,
	}

	return t.Attribute[key], nil
}

// NewPort creates a new entry in the Port list of the
// OnfSwitch_Switch struct. The keys of the list are populated from the input
// arguments.
func (t *OnfSwitch_Switch) NewPort(CageNumber uint8, ChannelNumber uint8) (*OnfSwitch_Switch_Port, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[OnfSwitch_Switch_Port_Key]*OnfSwitch_Switch_Port)
	}

	key := OnfSwitch_Switch_Port_Key{
		CageNumber: CageNumber,
		ChannelNumber: ChannelNumber,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Port[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Port", key)
	}

	t.Port[key] = &OnfSwitch_Switch_Port{
		CageNumber: &CageNumber,
		ChannelNumber: &ChannelNumber,
	}

	return t.Port[key], nil
}

// ΛListKeyMap returns the keys of the OnfSwitch_Switch struct, which is a YANG list entry.
func (t *OnfSwitch_Switch) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SwitchId == nil {
		return nil, fmt.Errorf("nil value for key SwitchId")
	}

	return map[string]interface{}{
		"switch-id": *t.SwitchId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitch_Switch) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfSwitch_Switch"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitch_Switch) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfSwitch_Switch) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfSwitch_Switch.
func (*OnfSwitch_Switch) ΛBelongingModule() string {
	return "onf-switch"
}


// OnfSwitch_Switch_Attribute represents the /onf-switch/switch/attribute YANG schema element.
type OnfSwitch_Switch_Attribute struct {
	AttributeKey	*string	`path:"attribute-key" module:"onf-switch"`
	Value	*string	`path:"value" module:"onf-switch"`
}

// IsYANGGoStruct ensures that OnfSwitch_Switch_Attribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfSwitch_Switch_Attribute) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfSwitch_Switch_Attribute struct, which is a YANG list entry.
func (t *OnfSwitch_Switch_Attribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttributeKey == nil {
		return nil, fmt.Errorf("nil value for key AttributeKey")
	}

	return map[string]interface{}{
		"attribute-key": *t.AttributeKey,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitch_Switch_Attribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfSwitch_Switch_Attribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitch_Switch_Attribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfSwitch_Switch_Attribute) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfSwitch_Switch_Attribute.
func (*OnfSwitch_Switch_Attribute) ΛBelongingModule() string {
	return "onf-switch"
}


// OnfSwitch_Switch_Port represents the /onf-switch/switch/port YANG schema element.
type OnfSwitch_Switch_Port struct {
	CageNumber	*uint8	`path:"cage-number" module:"onf-switch"`
	ChannelNumber	*uint8	`path:"channel-number" module:"onf-switch"`
	Description	*string	`path:"description" module:"onf-switch"`
	DisplayName	*string	`path:"display-name" module:"onf-switch"`
	Speed	E_OnfSwitchTypes_Speed	`path:"speed" module:"onf-switch"`
}

// IsYANGGoStruct ensures that OnfSwitch_Switch_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfSwitch_Switch_Port) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfSwitch_Switch_Port struct, which is a YANG list entry.
func (t *OnfSwitch_Switch_Port) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CageNumber == nil {
		return nil, fmt.Errorf("nil value for key CageNumber")
	}

	if t.ChannelNumber == nil {
		return nil, fmt.Errorf("nil value for key ChannelNumber")
	}

	return map[string]interface{}{
		"cage-number": *t.CageNumber,
		"channel-number": *t.ChannelNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitch_Switch_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfSwitch_Switch_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitch_Switch_Port) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfSwitch_Switch_Port) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfSwitch_Switch_Port.
func (*OnfSwitch_Switch_Port) ΛBelongingModule() string {
	return "onf-switch"
}


// OnfSwitch_Switch_State represents the /onf-switch/switch/state YANG schema element.
type OnfSwitch_Switch_State struct {
	Connected	*string	`path:"connected" module:"onf-switch"`
	LastConnected	*string	`path:"last-connected" module:"onf-switch"`
}

// IsYANGGoStruct ensures that OnfSwitch_Switch_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfSwitch_Switch_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitch_Switch_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfSwitch_Switch_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitch_Switch_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfSwitch_Switch_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfSwitch_Switch_State.
func (*OnfSwitch_Switch_State) ΛBelongingModule() string {
	return "onf-switch"
}


// OnfTest1Choice_Vehicle represents the /onf-test1-choice/vehicle YANG schema element.
type OnfTest1Choice_Vehicle struct {
	Battery	*OnfTest1Choice_Vehicle_Battery	`path:"battery" module:"onf-test1-choice"`
	CubicCapacity	*uint16	`path:"cubic-capacity" module:"onf-test1-choice"`
	ElectricMotor	map[string]*OnfTest1Choice_Vehicle_ElectricMotor	`path:"electric-motor" module:"onf-test1-choice"`
	EnginePosition	E_OnfTest1Choice_Vehicle_EnginePosition	`path:"engine-position" module:"onf-test1-choice"`
	Id	*string	`path:"id" module:"onf-test1-choice"`
	MaxBioDieselPercent	*uint8	`path:"max-bio-diesel-percent" module:"onf-test1-choice"`
	MaxPercentEthanol	*uint8	`path:"max-percent-ethanol" module:"onf-test1-choice"`
	OctaneMin	*uint8	`path:"octane-min" module:"onf-test1-choice"`
	OtherFuelName	*string	`path:"other-fuel-name" module:"onf-test1-choice"`
	UnderCarriage	*OnfTest1Choice_Vehicle_UnderCarriage	`path:"under-carriage" module:"onf-test1-choice"`
}

// IsYANGGoStruct ensures that OnfTest1Choice_Vehicle implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTest1Choice_Vehicle) IsYANGGoStruct() {}

// NewElectricMotor creates a new entry in the ElectricMotor list of the
// OnfTest1Choice_Vehicle struct. The keys of the list are populated from the input
// arguments.
func (t *OnfTest1Choice_Vehicle) NewElectricMotor(MotorName string) (*OnfTest1Choice_Vehicle_ElectricMotor, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ElectricMotor == nil {
		t.ElectricMotor = make(map[string]*OnfTest1Choice_Vehicle_ElectricMotor)
	}

	key := MotorName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ElectricMotor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ElectricMotor", key)
	}

	t.ElectricMotor[key] = &OnfTest1Choice_Vehicle_ElectricMotor{
		MotorName: &MotorName,
	}

	return t.ElectricMotor[key], nil
}

// ΛListKeyMap returns the keys of the OnfTest1Choice_Vehicle struct, which is a YANG list entry.
func (t *OnfTest1Choice_Vehicle) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1Choice_Vehicle) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTest1Choice_Vehicle"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1Choice_Vehicle) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTest1Choice_Vehicle) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfTest1Choice_Vehicle.
func (*OnfTest1Choice_Vehicle) ΛBelongingModule() string {
	return "onf-test1-choice"
}


// OnfTest1Choice_Vehicle_Battery represents the /onf-test1-choice/vehicle/battery YANG schema element.
type OnfTest1Choice_Vehicle_Battery struct {
	Capacity	*uint16	`path:"capacity" module:"onf-test1-choice"`
	Material	E_OnfTest1Choice_Vehicle_Battery_Material	`path:"material" module:"onf-test1-choice"`
}

// IsYANGGoStruct ensures that OnfTest1Choice_Vehicle_Battery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTest1Choice_Vehicle_Battery) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1Choice_Vehicle_Battery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTest1Choice_Vehicle_Battery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1Choice_Vehicle_Battery) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTest1Choice_Vehicle_Battery) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfTest1Choice_Vehicle_Battery.
func (*OnfTest1Choice_Vehicle_Battery) ΛBelongingModule() string {
	return "onf-test1-choice"
}


// OnfTest1Choice_Vehicle_ElectricMotor represents the /onf-test1-choice/vehicle/electric-motor YANG schema element.
type OnfTest1Choice_Vehicle_ElectricMotor struct {
	MotorName	*string	`path:"motor-name" module:"onf-test1-choice"`
	MotorPower	*uint16	`path:"motor-power" module:"onf-test1-choice"`
}

// IsYANGGoStruct ensures that OnfTest1Choice_Vehicle_ElectricMotor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTest1Choice_Vehicle_ElectricMotor) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfTest1Choice_Vehicle_ElectricMotor struct, which is a YANG list entry.
func (t *OnfTest1Choice_Vehicle_ElectricMotor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MotorName == nil {
		return nil, fmt.Errorf("nil value for key MotorName")
	}

	return map[string]interface{}{
		"motor-name": *t.MotorName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1Choice_Vehicle_ElectricMotor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTest1Choice_Vehicle_ElectricMotor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1Choice_Vehicle_ElectricMotor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTest1Choice_Vehicle_ElectricMotor) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfTest1Choice_Vehicle_ElectricMotor.
func (*OnfTest1Choice_Vehicle_ElectricMotor) ΛBelongingModule() string {
	return "onf-test1-choice"
}


// OnfTest1Choice_Vehicle_UnderCarriage represents the /onf-test1-choice/vehicle/under-carriage YANG schema element.
type OnfTest1Choice_Vehicle_UnderCarriage struct {
	Articulated	*bool	`path:"articulated" module:"onf-test1-choice"`
	NumberTracks	*uint8	`path:"number-tracks" module:"onf-test1-choice"`
	NumberWheels	*uint8	`path:"number-wheels" module:"onf-test1-choice"`
	TrackType	E_OnfTest1Choice_Vehicle_UnderCarriage_TrackType	`path:"track-type" module:"onf-test1-choice"`
	WheelsDriven	*uint8	`path:"wheels-driven" module:"onf-test1-choice"`
}

// IsYANGGoStruct ensures that OnfTest1Choice_Vehicle_UnderCarriage implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTest1Choice_Vehicle_UnderCarriage) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1Choice_Vehicle_UnderCarriage) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTest1Choice_Vehicle_UnderCarriage"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1Choice_Vehicle_UnderCarriage) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTest1Choice_Vehicle_UnderCarriage) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfTest1Choice_Vehicle_UnderCarriage.
func (*OnfTest1Choice_Vehicle_UnderCarriage) ΛBelongingModule() string {
	return "onf-test1-choice"
}


// OnfTest1_Cont1A represents the /onf-test1/cont1a YANG schema element.
type OnfTest1_Cont1A struct {
	Cont2A	*OnfTest1_Cont1A_Cont2A	`path:"cont2a" module:"onf-test1"`
	Leaf1A	*string	`path:"leaf1a" module:"onf-test1"`
	List2A	map[string]*OnfTest1_Cont1A_List2A	`path:"list2a" module:"onf-test1"`
	List4	map[string]*OnfTest1_Cont1A_List4	`path:"list4" module:"onf-test1-extra"`
	List5	map[OnfTest1_Cont1A_List5_Key]*OnfTest1_Cont1A_List5	`path:"list5" module:"onf-test1-extra"`
}

// IsYANGGoStruct ensures that OnfTest1_Cont1A implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTest1_Cont1A) IsYANGGoStruct() {}

// OnfTest1_Cont1A_List5_Key represents the key for list List5 of element /onf-test1/cont1a.
type OnfTest1_Cont1A_List5_Key struct {
	Key1	string	`path:"key1"`
	Key2	uint8	`path:"key2"`
}

// IsYANGGoKeyStruct ensures that OnfTest1_Cont1A_List5_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (OnfTest1_Cont1A_List5_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the OnfTest1_Cont1A_List5_Key key struct.
func (t OnfTest1_Cont1A_List5_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"key1": t.Key1,
		"key2": t.Key2,
	}, nil
}

// NewList2A creates a new entry in the List2A list of the
// OnfTest1_Cont1A struct. The keys of the list are populated from the input
// arguments.
func (t *OnfTest1_Cont1A) NewList2A(Name string) (*OnfTest1_Cont1A_List2A, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.List2A == nil {
		t.List2A = make(map[string]*OnfTest1_Cont1A_List2A)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.List2A[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list List2A", key)
	}

	t.List2A[key] = &OnfTest1_Cont1A_List2A{
		Name: &Name,
	}

	return t.List2A[key], nil
}

// NewList4 creates a new entry in the List4 list of the
// OnfTest1_Cont1A struct. The keys of the list are populated from the input
// arguments.
func (t *OnfTest1_Cont1A) NewList4(Id string) (*OnfTest1_Cont1A_List4, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.List4 == nil {
		t.List4 = make(map[string]*OnfTest1_Cont1A_List4)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.List4[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list List4", key)
	}

	t.List4[key] = &OnfTest1_Cont1A_List4{
		Id: &Id,
	}

	return t.List4[key], nil
}

// NewList5 creates a new entry in the List5 list of the
// OnfTest1_Cont1A struct. The keys of the list are populated from the input
// arguments.
func (t *OnfTest1_Cont1A) NewList5(Key1 string, Key2 uint8) (*OnfTest1_Cont1A_List5, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.List5 == nil {
		t.List5 = make(map[OnfTest1_Cont1A_List5_Key]*OnfTest1_Cont1A_List5)
	}

	key := OnfTest1_Cont1A_List5_Key{
		Key1: Key1,
		Key2: Key2,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.List5[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list List5", key)
	}

	t.List5[key] = &OnfTest1_Cont1A_List5{
		Key1: &Key1,
		Key2: &Key2,
	}

	return t.List5[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_Cont1A) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTest1_Cont1A"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_Cont1A) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTest1_Cont1A) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfTest1_Cont1A.
func (*OnfTest1_Cont1A) ΛBelongingModule() string {
	return "onf-test1"
}


// OnfTest1_Cont1A_Cont2A represents the /onf-test1/cont1a/cont2a YANG schema element.
type OnfTest1_Cont1A_Cont2A struct {
	Leaf2A	*uint8	`path:"leaf2a" module:"onf-test1"`
	Leaf2B	*uint8	`path:"leaf2b" module:"onf-test1"`
	Leaf2C	*string	`path:"leaf2c" module:"onf-test1"`
	Leaf2D	*uint8	`path:"leaf2d" module:"onf-test1"`
	Leaf2E	[]int16	`path:"leaf2e" module:"onf-test1"`
	Leaf2F	Binary	`path:"leaf2f" module:"onf-test1"`
	Leaf2G	*bool	`path:"leaf2g" module:"onf-test1"`
	Leaf2H	*string	`path:"leaf2h" module:"onf-test1"`
	Leaf2I	*string	`path:"leaf2i" module:"onf-test1"`
	Leaf2J	*string	`path:"leaf2j" module:"onf-test1"`
}

// IsYANGGoStruct ensures that OnfTest1_Cont1A_Cont2A implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTest1_Cont1A_Cont2A) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_Cont1A_Cont2A) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTest1_Cont1A_Cont2A"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_Cont1A_Cont2A) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTest1_Cont1A_Cont2A) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfTest1_Cont1A_Cont2A.
func (*OnfTest1_Cont1A_Cont2A) ΛBelongingModule() string {
	return "onf-test1"
}


// OnfTest1_Cont1A_List2A represents the /onf-test1/cont1a/list2a YANG schema element.
type OnfTest1_Cont1A_List2A struct {
	Name	*string	`path:"name" module:"onf-test1"`
	RangeMax	*uint8	`path:"range-max" module:"onf-test1"`
	RangeMin	*uint8	`path:"range-min" module:"onf-test1"`
	Ref2D	*uint8	`path:"ref2d" module:"onf-test1"`
	TxPower	*uint16	`path:"tx-power" module:"onf-test1"`
}

// IsYANGGoStruct ensures that OnfTest1_Cont1A_List2A implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTest1_Cont1A_List2A) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfTest1_Cont1A_List2A struct, which is a YANG list entry.
func (t *OnfTest1_Cont1A_List2A) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_Cont1A_List2A) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTest1_Cont1A_List2A"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_Cont1A_List2A) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTest1_Cont1A_List2A) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfTest1_Cont1A_List2A.
func (*OnfTest1_Cont1A_List2A) ΛBelongingModule() string {
	return "onf-test1"
}


// OnfTest1_Cont1A_List4 represents the /onf-test1/cont1a/list4 YANG schema element.
type OnfTest1_Cont1A_List4 struct {
	Id	*string	`path:"id" module:"onf-test1-extra"`
	Leaf4B	*string	`path:"leaf4b" module:"onf-test1-extra"`
	List4A	map[OnfTest1_Cont1A_List4_List4A_Key]*OnfTest1_Cont1A_List4_List4A	`path:"list4a" module:"onf-test1-extra"`
}

// IsYANGGoStruct ensures that OnfTest1_Cont1A_List4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTest1_Cont1A_List4) IsYANGGoStruct() {}

// OnfTest1_Cont1A_List4_List4A_Key represents the key for list List4A of element /onf-test1/cont1a/list4.
type OnfTest1_Cont1A_List4_List4A_Key struct {
	Fkey1	string	`path:"fkey1"`
	Fkey2	uint8	`path:"fkey2"`
}

// IsYANGGoKeyStruct ensures that OnfTest1_Cont1A_List4_List4A_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (OnfTest1_Cont1A_List4_List4A_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the OnfTest1_Cont1A_List4_List4A_Key key struct.
func (t OnfTest1_Cont1A_List4_List4A_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"fkey1": t.Fkey1,
		"fkey2": t.Fkey2,
	}, nil
}

// NewList4A creates a new entry in the List4A list of the
// OnfTest1_Cont1A_List4 struct. The keys of the list are populated from the input
// arguments.
func (t *OnfTest1_Cont1A_List4) NewList4A(Fkey1 string, Fkey2 uint8) (*OnfTest1_Cont1A_List4_List4A, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.List4A == nil {
		t.List4A = make(map[OnfTest1_Cont1A_List4_List4A_Key]*OnfTest1_Cont1A_List4_List4A)
	}

	key := OnfTest1_Cont1A_List4_List4A_Key{
		Fkey1: Fkey1,
		Fkey2: Fkey2,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.List4A[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list List4A", key)
	}

	t.List4A[key] = &OnfTest1_Cont1A_List4_List4A{
		Fkey1: &Fkey1,
		Fkey2: &Fkey2,
	}

	return t.List4A[key], nil
}

// ΛListKeyMap returns the keys of the OnfTest1_Cont1A_List4 struct, which is a YANG list entry.
func (t *OnfTest1_Cont1A_List4) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_Cont1A_List4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTest1_Cont1A_List4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_Cont1A_List4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTest1_Cont1A_List4) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfTest1_Cont1A_List4.
func (*OnfTest1_Cont1A_List4) ΛBelongingModule() string {
	return "onf-test1-extra"
}


// OnfTest1_Cont1A_List4_List4A represents the /onf-test1/cont1a/list4/list4a YANG schema element.
type OnfTest1_Cont1A_List4_List4A struct {
	Displayname	*string	`path:"displayname" module:"onf-test1-extra"`
	Fkey1	*string	`path:"fkey1" module:"onf-test1-extra"`
	Fkey2	*uint8	`path:"fkey2" module:"onf-test1-extra"`
}

// IsYANGGoStruct ensures that OnfTest1_Cont1A_List4_List4A implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTest1_Cont1A_List4_List4A) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfTest1_Cont1A_List4_List4A struct, which is a YANG list entry.
func (t *OnfTest1_Cont1A_List4_List4A) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Fkey1 == nil {
		return nil, fmt.Errorf("nil value for key Fkey1")
	}

	if t.Fkey2 == nil {
		return nil, fmt.Errorf("nil value for key Fkey2")
	}

	return map[string]interface{}{
		"fkey1": *t.Fkey1,
		"fkey2": *t.Fkey2,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_Cont1A_List4_List4A) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTest1_Cont1A_List4_List4A"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_Cont1A_List4_List4A) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTest1_Cont1A_List4_List4A) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfTest1_Cont1A_List4_List4A.
func (*OnfTest1_Cont1A_List4_List4A) ΛBelongingModule() string {
	return "onf-test1-extra"
}


// OnfTest1_Cont1A_List5 represents the /onf-test1/cont1a/list5 YANG schema element.
type OnfTest1_Cont1A_List5 struct {
	Key1	*string	`path:"key1" module:"onf-test1-extra"`
	Key2	*uint8	`path:"key2" module:"onf-test1-extra"`
	Leaf5A	*string	`path:"leaf5a" module:"onf-test1-extra"`
}

// IsYANGGoStruct ensures that OnfTest1_Cont1A_List5 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTest1_Cont1A_List5) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfTest1_Cont1A_List5 struct, which is a YANG list entry.
func (t *OnfTest1_Cont1A_List5) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Key1 == nil {
		return nil, fmt.Errorf("nil value for key Key1")
	}

	if t.Key2 == nil {
		return nil, fmt.Errorf("nil value for key Key2")
	}

	return map[string]interface{}{
		"key1": *t.Key1,
		"key2": *t.Key2,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_Cont1A_List5) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTest1_Cont1A_List5"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_Cont1A_List5) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTest1_Cont1A_List5) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfTest1_Cont1A_List5.
func (*OnfTest1_Cont1A_List5) ΛBelongingModule() string {
	return "onf-test1-extra"
}


// OnfTest1_Cont1BState represents the /onf-test1/cont1b-state YANG schema element.
type OnfTest1_Cont1BState struct {
	Leaf2D	*uint16	`path:"leaf2d" module:"onf-test1"`
	List2B	map[uint8]*OnfTest1_Cont1BState_List2B	`path:"list2b" module:"onf-test1"`
}

// IsYANGGoStruct ensures that OnfTest1_Cont1BState implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTest1_Cont1BState) IsYANGGoStruct() {}

// NewList2B creates a new entry in the List2B list of the
// OnfTest1_Cont1BState struct. The keys of the list are populated from the input
// arguments.
func (t *OnfTest1_Cont1BState) NewList2B(Index uint8) (*OnfTest1_Cont1BState_List2B, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.List2B == nil {
		t.List2B = make(map[uint8]*OnfTest1_Cont1BState_List2B)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.List2B[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list List2B", key)
	}

	t.List2B[key] = &OnfTest1_Cont1BState_List2B{
		Index: &Index,
	}

	return t.List2B[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_Cont1BState) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTest1_Cont1BState"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_Cont1BState) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTest1_Cont1BState) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfTest1_Cont1BState.
func (*OnfTest1_Cont1BState) ΛBelongingModule() string {
	return "onf-test1"
}


// OnfTest1_Cont1BState_List2B represents the /onf-test1/cont1b-state/list2b YANG schema element.
type OnfTest1_Cont1BState_List2B struct {
	Index	*uint8	`path:"index" module:"onf-test1"`
	Leaf3C	*string	`path:"leaf3c" module:"onf-test1"`
}

// IsYANGGoStruct ensures that OnfTest1_Cont1BState_List2B implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTest1_Cont1BState_List2B) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfTest1_Cont1BState_List2B struct, which is a YANG list entry.
func (t *OnfTest1_Cont1BState_List2B) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_Cont1BState_List2B) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTest1_Cont1BState_List2B"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_Cont1BState_List2B) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTest1_Cont1BState_List2B) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfTest1_Cont1BState_List2B.
func (*OnfTest1_Cont1BState_List2B) ΛBelongingModule() string {
	return "onf-test1"
}


// OnfTest1_List1A represents the /onf-test1/list1a YANG schema element.
type OnfTest1_List1A struct {
	ListId	*string	`path:"list-id" module:"onf-test1"`
	Name	*string	`path:"name" module:"onf-test1"`
}

// IsYANGGoStruct ensures that OnfTest1_List1A implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTest1_List1A) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfTest1_List1A struct, which is a YANG list entry.
func (t *OnfTest1_List1A) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ListId == nil {
		return nil, fmt.Errorf("nil value for key ListId")
	}

	return map[string]interface{}{
		"list-id": *t.ListId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_List1A) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTest1_List1A"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_List1A) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTest1_List1A) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfTest1_List1A.
func (*OnfTest1_List1A) ΛBelongingModule() string {
	return "onf-test1"
}


// E_OnfSwitchTypes_Speed is a derived int64 type which is used to represent
// the enumerated node OnfSwitchTypes_Speed. An additional value named
// OnfSwitchTypes_Speed_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OnfSwitchTypes_Speed int64

// IsYANGGoEnum ensures that OnfSwitchTypes_Speed implements the yang.GoEnum
// interface. This ensures that OnfSwitchTypes_Speed can be identified as a
// mapped type for a YANG enumeration.
func (E_OnfSwitchTypes_Speed) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OnfSwitchTypes_Speed.
func (E_OnfSwitchTypes_Speed) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OnfSwitchTypes_Speed.
func (e E_OnfSwitchTypes_Speed) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OnfSwitchTypes_Speed")
}

const (
	// OnfSwitchTypes_Speed_UNSET corresponds to the value UNSET of OnfSwitchTypes_Speed
	OnfSwitchTypes_Speed_UNSET E_OnfSwitchTypes_Speed = 0
	// OnfSwitchTypes_Speed_speed_100g corresponds to the value speed_100g of OnfSwitchTypes_Speed
	OnfSwitchTypes_Speed_speed_100g E_OnfSwitchTypes_Speed = 1
	// OnfSwitchTypes_Speed_speed_10g corresponds to the value speed_10g of OnfSwitchTypes_Speed
	OnfSwitchTypes_Speed_speed_10g E_OnfSwitchTypes_Speed = 2
	// OnfSwitchTypes_Speed_speed_1g corresponds to the value speed_1g of OnfSwitchTypes_Speed
	OnfSwitchTypes_Speed_speed_1g E_OnfSwitchTypes_Speed = 3
	// OnfSwitchTypes_Speed_speed_2_5g corresponds to the value speed_2_5g of OnfSwitchTypes_Speed
	OnfSwitchTypes_Speed_speed_2_5g E_OnfSwitchTypes_Speed = 4
	// OnfSwitchTypes_Speed_speed_25g corresponds to the value speed_25g of OnfSwitchTypes_Speed
	OnfSwitchTypes_Speed_speed_25g E_OnfSwitchTypes_Speed = 5
	// OnfSwitchTypes_Speed_speed_400g corresponds to the value speed_400g of OnfSwitchTypes_Speed
	OnfSwitchTypes_Speed_speed_400g E_OnfSwitchTypes_Speed = 6
	// OnfSwitchTypes_Speed_speed_40g corresponds to the value speed_40g of OnfSwitchTypes_Speed
	OnfSwitchTypes_Speed_speed_40g E_OnfSwitchTypes_Speed = 7
	// OnfSwitchTypes_Speed_speed_5g corresponds to the value speed_5g of OnfSwitchTypes_Speed
	OnfSwitchTypes_Speed_speed_5g E_OnfSwitchTypes_Speed = 8
	// OnfSwitchTypes_Speed_speed_autoneg corresponds to the value speed_autoneg of OnfSwitchTypes_Speed
	OnfSwitchTypes_Speed_speed_autoneg E_OnfSwitchTypes_Speed = 9
)


// E_OnfTest1Choice_Vehicle_Battery_Material is a derived int64 type which is used to represent
// the enumerated node OnfTest1Choice_Vehicle_Battery_Material. An additional value named
// OnfTest1Choice_Vehicle_Battery_Material_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OnfTest1Choice_Vehicle_Battery_Material int64

// IsYANGGoEnum ensures that OnfTest1Choice_Vehicle_Battery_Material implements the yang.GoEnum
// interface. This ensures that OnfTest1Choice_Vehicle_Battery_Material can be identified as a
// mapped type for a YANG enumeration.
func (E_OnfTest1Choice_Vehicle_Battery_Material) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OnfTest1Choice_Vehicle_Battery_Material.
func (E_OnfTest1Choice_Vehicle_Battery_Material) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OnfTest1Choice_Vehicle_Battery_Material.
func (e E_OnfTest1Choice_Vehicle_Battery_Material) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OnfTest1Choice_Vehicle_Battery_Material")
}

const (
	// OnfTest1Choice_Vehicle_Battery_Material_UNSET corresponds to the value UNSET of OnfTest1Choice_Vehicle_Battery_Material
	OnfTest1Choice_Vehicle_Battery_Material_UNSET E_OnfTest1Choice_Vehicle_Battery_Material = 0
	// OnfTest1Choice_Vehicle_Battery_Material_other corresponds to the value other of OnfTest1Choice_Vehicle_Battery_Material
	OnfTest1Choice_Vehicle_Battery_Material_other E_OnfTest1Choice_Vehicle_Battery_Material = 1
	// OnfTest1Choice_Vehicle_Battery_Material_lithium_ion corresponds to the value lithium_ion of OnfTest1Choice_Vehicle_Battery_Material
	OnfTest1Choice_Vehicle_Battery_Material_lithium_ion E_OnfTest1Choice_Vehicle_Battery_Material = 2
	// OnfTest1Choice_Vehicle_Battery_Material_lithium_polymer corresponds to the value lithium_polymer of OnfTest1Choice_Vehicle_Battery_Material
	OnfTest1Choice_Vehicle_Battery_Material_lithium_polymer E_OnfTest1Choice_Vehicle_Battery_Material = 3
)


// E_OnfTest1Choice_Vehicle_EnginePosition is a derived int64 type which is used to represent
// the enumerated node OnfTest1Choice_Vehicle_EnginePosition. An additional value named
// OnfTest1Choice_Vehicle_EnginePosition_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OnfTest1Choice_Vehicle_EnginePosition int64

// IsYANGGoEnum ensures that OnfTest1Choice_Vehicle_EnginePosition implements the yang.GoEnum
// interface. This ensures that OnfTest1Choice_Vehicle_EnginePosition can be identified as a
// mapped type for a YANG enumeration.
func (E_OnfTest1Choice_Vehicle_EnginePosition) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OnfTest1Choice_Vehicle_EnginePosition.
func (E_OnfTest1Choice_Vehicle_EnginePosition) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OnfTest1Choice_Vehicle_EnginePosition.
func (e E_OnfTest1Choice_Vehicle_EnginePosition) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OnfTest1Choice_Vehicle_EnginePosition")
}

const (
	// OnfTest1Choice_Vehicle_EnginePosition_UNSET corresponds to the value UNSET of OnfTest1Choice_Vehicle_EnginePosition
	OnfTest1Choice_Vehicle_EnginePosition_UNSET E_OnfTest1Choice_Vehicle_EnginePosition = 0
	// OnfTest1Choice_Vehicle_EnginePosition_front corresponds to the value front of OnfTest1Choice_Vehicle_EnginePosition
	OnfTest1Choice_Vehicle_EnginePosition_front E_OnfTest1Choice_Vehicle_EnginePosition = 1
	// OnfTest1Choice_Vehicle_EnginePosition_mid corresponds to the value mid of OnfTest1Choice_Vehicle_EnginePosition
	OnfTest1Choice_Vehicle_EnginePosition_mid E_OnfTest1Choice_Vehicle_EnginePosition = 2
	// OnfTest1Choice_Vehicle_EnginePosition_rear corresponds to the value rear of OnfTest1Choice_Vehicle_EnginePosition
	OnfTest1Choice_Vehicle_EnginePosition_rear E_OnfTest1Choice_Vehicle_EnginePosition = 3
)


// E_OnfTest1Choice_Vehicle_UnderCarriage_TrackType is a derived int64 type which is used to represent
// the enumerated node OnfTest1Choice_Vehicle_UnderCarriage_TrackType. An additional value named
// OnfTest1Choice_Vehicle_UnderCarriage_TrackType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OnfTest1Choice_Vehicle_UnderCarriage_TrackType int64

// IsYANGGoEnum ensures that OnfTest1Choice_Vehicle_UnderCarriage_TrackType implements the yang.GoEnum
// interface. This ensures that OnfTest1Choice_Vehicle_UnderCarriage_TrackType can be identified as a
// mapped type for a YANG enumeration.
func (E_OnfTest1Choice_Vehicle_UnderCarriage_TrackType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OnfTest1Choice_Vehicle_UnderCarriage_TrackType.
func (E_OnfTest1Choice_Vehicle_UnderCarriage_TrackType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OnfTest1Choice_Vehicle_UnderCarriage_TrackType.
func (e E_OnfTest1Choice_Vehicle_UnderCarriage_TrackType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OnfTest1Choice_Vehicle_UnderCarriage_TrackType")
}

const (
	// OnfTest1Choice_Vehicle_UnderCarriage_TrackType_UNSET corresponds to the value UNSET of OnfTest1Choice_Vehicle_UnderCarriage_TrackType
	OnfTest1Choice_Vehicle_UnderCarriage_TrackType_UNSET E_OnfTest1Choice_Vehicle_UnderCarriage_TrackType = 0
	// OnfTest1Choice_Vehicle_UnderCarriage_TrackType_steel corresponds to the value steel of OnfTest1Choice_Vehicle_UnderCarriage_TrackType
	OnfTest1Choice_Vehicle_UnderCarriage_TrackType_steel E_OnfTest1Choice_Vehicle_UnderCarriage_TrackType = 1
	// OnfTest1Choice_Vehicle_UnderCarriage_TrackType_rubber corresponds to the value rubber of OnfTest1Choice_Vehicle_UnderCarriage_TrackType
	OnfTest1Choice_Vehicle_UnderCarriage_TrackType_rubber E_OnfTest1Choice_Vehicle_UnderCarriage_TrackType = 2
)


// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_OnfSwitchTypes_Speed": {
		1: {Name: "speed-100g", DefiningModule: "onf-switch-types"},
		2: {Name: "speed-10g", DefiningModule: "onf-switch-types"},
		3: {Name: "speed-1g", DefiningModule: "onf-switch-types"},
		4: {Name: "speed-2-5g", DefiningModule: "onf-switch-types"},
		5: {Name: "speed-25g", DefiningModule: "onf-switch-types"},
		6: {Name: "speed-400g", DefiningModule: "onf-switch-types"},
		7: {Name: "speed-40g", DefiningModule: "onf-switch-types"},
		8: {Name: "speed-5g", DefiningModule: "onf-switch-types"},
		9: {Name: "speed-autoneg", DefiningModule: "onf-switch-types"},
	},
	"E_OnfTest1Choice_Vehicle_Battery_Material": {
		1: {Name: "other"},
		2: {Name: "lithium-ion"},
		3: {Name: "lithium-polymer"},
	},
	"E_OnfTest1Choice_Vehicle_EnginePosition": {
		1: {Name: "front"},
		2: {Name: "mid"},
		3: {Name: "rear"},
	},
	"E_OnfTest1Choice_Vehicle_UnderCarriage_TrackType": {
		1: {Name: "steel"},
		2: {Name: "rubber"},
	},
}


var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7d, 0xff, 0x73, 0xdb, 0x36,
		0xb6, 0xef, 0xef, 0xf9, 0x2b, 0xce, 0x68, 0xde, 0x9b, 0xd8, 0x59, 0x53, 0x96, 0x54, 0x3b, 0x9b,
		0x7a, 0xa6, 0xd3, 0xba, 0x4d, 0xda, 0xcd, 0x6c, 0xb3, 0xed, 0xa4, 0xc9, 0xbe, 0x7b, 0x1b, 0xb9,
		0xb9, 0x10, 0x09, 0x49, 0xb8, 0xa1, 0x00, 0x95, 0x00, 0x6d, 0x6b, 0x9b, 0xfc, 0xef, 0x6f, 0x00,
		0x90, 0x14, 0xa9, 0x6f, 0x04, 0x48, 0x4a, 0xa6, 0x6d, 0xec, 0xec, 0x54, 0x8e, 0x44, 0x80, 0x24,
		0x70, 0x70, 0xbe, 0x7e, 0xce, 0x39, 0x7f, 0x3d, 0x01, 0x00, 0xe8, 0xfc, 0x0b, 0xcd, 0x70, 0xe7,
		0x02, 0x3a, 0x01, 0xbe, 0x26, 0x3e, 0xee, 0x9c, 0xe8, 0x6f, 0xff, 0x49, 0x68, 0xd0, 0xb9, 0x80,
		0x7e, 0xf2, 0xcf, 0x1f, 0x18, 0x1d, 0x93, 0x49, 0xe7, 0x02, 0x7a, 0xc9, 0x17, 0x2f, 0x49, 0xd4,
		0xb9, 0x00, 0x3d, 0x85, 0xfa, 0xc2, 0x67, 0x54, 0xf4, 0x51, 0xe1, 0xbb, 0xc2, 0xf4, 0xc9, 0xef,
		0x27, 0xc5, 0x5f, 0x5f, 0x62, 0xee, 0x47, 0x64, 0x2e, 0x08, 0xa3, 0xf2, 0xa2, 0x77, 0x53, 0x0c,
		0x82, 0xcd, 0x21, 0xc4, 0xd7, 0x38, 0x04, 0x39, 0x04, 0x11, 0x8a, 0xa3, 0xd5, 0x51, 0xc5, 0x87,
		0xcb, 0xbe, 0x5e, 0x7d, 0xc8, 0xec, 0x87, 0x5f, 0x23, 0x3c, 0x26, 0xb7, 0x6b, 0xcf, 0x56, 0x78,
		0x3e, 0xd1, 0x5f, 0xb9, 0x8b, 0xfa, 0xf5, 0x37, 0x16, 0x47, 0x3e, 0xde, 0x38, 0x52, 0x3f, 0x09,
		0x5e, 0xdc, 0xb0, 0x48, 0x3e, 0x4c, 0x67, 0xae, 0x6f, 0x72, 0xb2, 0xf9, 0xc2, 0x7f, 0x20, 0x7e,
		0x19, 0x4d, 0xe2, 0x19, 0xa6, 0xa2, 0x73, 0x01, 0x22, 0x8a, 0xf1, 0x96, 0x0b, 0x73, 0x57, 0xc9,
		0x67, 0x5a, 0xbb, 0xe8, 0x4b, 0xe1, 0x9b, 0x2f, 0xab, 0xeb, 0xb9, 0xb2, 0x2d, 0x85, 0xed, 0x19,
		0xa0, 0xed, 0x2f, 0x92, 0xdf, 0xa6, 0x01, 0xda, 0xf6, 0x16, 0x1b, 0xb6, 0x6b, 0x40, 0x83, 0x92,
		0xed, 0x2a, 0xd9, 0xb6, 0xd2, 0xed, 0x33, 0xd9, 0x46, 0xb3, 0xed, 0x34, 0xdd, 0x56, 0xeb, 0xed,
		0xb5, 0xde, 0x66, 0xe3, 0xed, 0xde, 0xbc, 0xed, 0x5b, 0xb6, 0xbf, 0x94, 0x0c, 0xb2, 0x0b, 0x42,
		0x8c, 0xc6, 0x3b, 0xc8, 0x61, 0x6d, 0x39, 0x93, 0xeb, 0x4b, 0x5e, 0x66, 0x85, 0x3c, 0xfe, 0x15,
		0xcf, 0x70, 0x44, 0x7c, 0x90, 0x83, 0x81, 0x50, 0x4e, 0x02, 0x0c, 0x3f, 0xa4, 0x44, 0x02, 0x26,
		0xd3, 0x8d, 0x51, 0x1c, 0xca, 0xa5, 0xf9, 0xb0, 0xf3, 0x42, 0x75, 0xf1, 0xa0, 0xb3, 0xf3, 0x9a,
		0xab, 0x92, 0x7b, 0x25, 0xb4, 0xd9, 0x2b, 0xb9, 0xac, 0x8c, 0x46, 0x6d, 0x68, 0xd5, 0x8e, 0x66,
		0x6d, 0x69, 0xb7, 0x32, 0x0d, 0x57, 0xa6, 0x65, 0x6b, 0x9a, 0xde, 0x4d, 0xdb, 0x25, 0x34, 0x9e,
		0xdd, 0xed, 0xdd, 0x62, 0x8e, 0xed, 0xd6, 0x39, 0x26, 0x54, 0xbc, 0x30, 0x59, 0xea, 0x84, 0x28,
		0xce, 0x0d, 0x2e, 0x7d, 0x8b, 0xe8, 0x04, 0x1b, 0x51, 0xaa, 0xfc, 0x9f, 0xd9, 0xd6, 0xa9, 0x89,
		0xdf, 0x10, 0x6a, 0xbc, 0xd7, 0xd9, 0xa0, 0x7f, 0xa3, 0x30, 0xc6, 0xdb, 0x59, 0xed, 0xd6, 0x71,
		0x3f, 0x46, 0xc8, 0x97, 0xa7, 0xf7, 0x25, 0x99, 0x10, 0xc1, 0xcb, 0xc9, 0x7c, 0x7d, 0x89, 0xf1,
		0x04, 0x09, 0x72, 0x2d, 0xef, 0x3d, 0x46, 0x21, 0xc7, 0xc6, 0xa3, 0xbf, 0x9c, 0x58, 0x2c, 0x09,
		0xba, 0xad, 0xbe, 0x24, 0x5f, 0xdd, 0x9f, 0x25, 0x79, 0xd2, 0xe0, 0xc2, 0x1d, 0x8c, 0xe2, 0x1c,
		0xc9, 0xad, 0xaf, 0xc9, 0x83, 0xa3, 0xb9, 0xd2, 0xab, 0xae, 0x6a, 0xb1, 0x74, 0x7c, 0x2b, 0x22,
		0xe4, 0xc5, 0x94, 0x0b, 0x34, 0x0a, 0x0d, 0x99, 0x7b, 0x84, 0xc7, 0x38, 0xc2, 0xd4, 0xdf, 0x0b,
		0x13, 0x4e, 0x25, 0xc7, 0xdb, 0x1f, 0x7f, 0x80, 0xe7, 0xbd, 0xb3, 0x5e, 0xc7, 0x82, 0x74, 0x2c,
		0xe5, 0xf5, 0x26, 0xb9, 0xbd, 0x7c, 0x37, 0x4b, 0x3a, 0xa8, 0x2a, 0xc2, 0x37, 0x8a, 0xf2, 0xec,
		0xe5, 0xdb, 0x46, 0x4d, 0x4f, 0x2a, 0xd0, 0x99, 0xd6, 0x68, 0x47, 0x96, 0x1a, 0xf0, 0xc8, 0x52,
		0x03, 0xfe, 0x37, 0x0b, 0x05, 0x9a, 0xe0, 0xca, 0x1a, 0xb0, 0xd3, 0x4a, 0xef, 0xab, 0x56, 0xfa,
		0x06, 0xd1, 0x00, 0x09, 0x16, 0x2d, 0xca, 0xb5, 0x30, 0xa7, 0xc1, 0xee, 0x90, 0x9d, 0x3d, 0xa7,
		0x4e, 0xac, 0x2e, 0xc9, 0xc0, 0x69, 0x13, 0x4d, 0xf1, 0x7f, 0xdf, 0x92, 0xff, 0xfb, 0x96, 0xfc,
		0xff, 0x2d, 0x46, 0x01, 0x30, 0x1a, 0x2e, 0x0e, 0x26, 0x01, 0x06, 0x4e, 0x02, 0xdc, 0x5b, 0xbf,
		0x04, 0x17, 0x11, 0xa1, 0x13, 0x0b, 0xb6, 0xde, 0x7f, 0xb1, 0xaf, 0x83, 0x11, 0x58, 0x1e, 0x8c,
		0xc0, 0xf2, 0x60, 0x5c, 0x52, 0x26, 0xa6, 0x38, 0x02, 0x42, 0x05, 0x9e, 0xa8, 0x4f, 0xa7, 0x1b,
		0xb9, 0x93, 0xe1, 0xf4, 0x1d, 0xa7, 0xef, 0x38, 0x7d, 0x67, 0x8f, 0xfa, 0x0e, 0xb6, 0x64, 0xeb,
		0xd8, 0x92, 0xad, 0x2b, 0x2d, 0x27, 0x24, 0x5c, 0x38, 0x86, 0xee, 0x18, 0xfa, 0xae, 0x75, 0x26,
		0x54, 0xf4, 0x9f, 0x5b, 0x30, 0xf4, 0xc1, 0xfd, 0x0d, 0xc1, 0xf4, 0xee, 0x92, 0xa5, 0x4b, 0x92,
		0x69, 0x21, 0x47, 0xef, 0xf5, 0x1c, 0x4f, 0xb7, 0x3a, 0x61, 0x3f, 0x13, 0x2e, 0x2e, 0x85, 0x88,
		0xcc, 0x4e, 0xd9, 0x1b, 0x42, 0x5f, 0x85, 0x58, 0x9e, 0x7f, 0xc3, 0xa5, 0x92, 0xdb, 0x99, 0x1b,
		0xd1, 0x7f, 0x71, 0x76, 0xf6, 0xfc, 0xef, 0x67, 0x67, 0xbd, 0xbf, 0x7f, 0xf5, 0xf7, 0xde, 0xd7,
		0xe7, 0xe7, 0xfd, 0xe7, 0x7d, 0x13, 0x8d, 0xea, 0x97, 0x28, 0xc0, 0x11, 0x0e, 0xbe, 0x5f, 0x74,
		0x2e, 0x80, 0xc6, 0x61, 0xb8, 0x2f, 0x29, 0x36, 0xb6, 0x94, 0x62, 0x63, 0x4b, 0x29, 0x36, 0x22,
		0x14, 0x45, 0x45, 0x93, 0xdd, 0x77, 0x72, 0xcc, 0xc9, 0xb1, 0x0d, 0xeb, 0xac, 0x49, 0xc5, 0x42,
		0x90, 0x7d, 0x6d, 0x70, 0xe9, 0xcf, 0x98, 0x4e, 0xc4, 0xb4, 0x75, 0x92, 0x6c, 0xe0, 0x6c, 0x93,
		0x7b, 0xbd, 0x26, 0x6d, 0x37, 0x4e, 0x26, 0x96, 0x6c, 0x7d, 0x62, 0xc9, 0xd6, 0xbf, 0x67, 0x2c,
		0xc4, 0x88, 0xba, 0x60, 0x9c, 0xe3, 0xeb, 0xe5, 0x7c, 0x5d, 0xd3, 0x8a, 0x8d, 0x2f, 0xb6, 0xbf,
		0xaf, 0x73, 0x31, 0xb5, 0x3c, 0x17, 0x53, 0xcb, 0x73, 0xf1, 0xfe, 0xfd, 0xeb, 0x97, 0xee, 0x50,
		0xb8, 0x43, 0x51, 0xee, 0x85, 0x8d, 0x49, 0x60, 0x15, 0x9d, 0x30, 0xb8, 0xf6, 0x57, 0x24, 0x04,
		0x8e, 0xa8, 0xb1, 0xb2, 0xd3, 0xf9, 0xd0, 0xf3, 0xbe, 0x46, 0xde, 0xf8, 0xd2, 0xfb, 0xf1, 0xea,
		0xaf, 0x17, 0x5f, 0xbc, 0xfc, 0x3f, 0xcf, 0x6c, 0xfe, 0xd9, 0x1f, 0x7c, 0xe9, 0xdc, 0x9d, 0xac,
		0x23, 0x96, 0x67, 0x9a, 0x58, 0x9e, 0xe9, 0x97, 0x48, 0x60, 0x40, 0x34, 0x80, 0x77, 0x64, 0xe6,
		0xe0, 0x27, 0xee, 0x70, 0x97, 0xaf, 0x73, 0x80, 0x04, 0xf6, 0x10, 0x0d, 0x3c, 0x41, 0x66, 0xf8,
		0xce, 0x4f, 0xf9, 0x70, 0x18, 0xc8, 0x03, 0x2b, 0x3f, 0x06, 0xe9, 0xc7, 0x3b, 0xfd, 0x71, 0x51,
		0xf8, 0x38, 0x1a, 0x0e, 0xbb, 0xc3, 0x61, 0xf0, 0xb7, 0xe3, 0x6f, 0x8f, 0x7e, 0xff, 0xfc, 0x61,
		0x38, 0xfc, 0xdb, 0x70, 0xe8, 0x5d, 0x15, 0xae, 0x38, 0xbe, 0xc3, 0x63, 0xfe, 0xbf, 0x96, 0xc7,
		0xfc, 0x7f, 0x2d, 0x8f, 0xf9, 0x02, 0xd1, 0x89, 0x47, 0x02, 0x4c, 0x05, 0x19, 0x13, 0x1c, 0xb9,
		0x83, 0xee, 0x0e, 0x7a, 0xe9, 0x3a, 0xaf, 0xd0, 0x4c, 0xd3, 0x47, 0xbd, 0xa5, 0xce, 0x0b, 0x07,
		0x4b, 0x5f, 0x5f, 0x92, 0x4a, 0x5e, 0xde, 0x87, 0xe6, 0xcd, 0xd8, 0x8b, 0x8e, 0x8a, 0xbc, 0xff,
		0x5c, 0x7a, 0xbf, 0x7f, 0xbc, 0x4a, 0xfe, 0xe8, 0x79, 0x5f, 0x0f, 0x87, 0xde, 0xc7, 0xee, 0xd5,
		0x33, 0x53, 0xee, 0xd3, 0xfd, 0xdc, 0xed, 0x7e, 0xfe, 0xf0, 0xc7, 0xed, 0x7f, 0x5d, 0x75, 0x9f,
		0x7d, 0xee, 0x7e, 0xf8, 0x63, 0xf6, 0x46, 0xfd, 0xd1, 0xfd, 0xf0, 0x47, 0xf8, 0xf3, 0x55, 0xf7,
		0xd9, 0x1e, 0x45, 0x9a, 0x55, 0x9e, 0xe1, 0x25, 0xa5, 0x4c, 0xa0, 0x44, 0x1a, 0xed, 0x48, 0x37,
		0xe4, 0xfe, 0x14, 0xcf, 0xd0, 0x1c, 0x29, 0xc6, 0xd0, 0x39, 0x65, 0x74, 0xec, 0x09, 0xcc, 0x45,
		0xff, 0x54, 0x67, 0x05, 0x9f, 0xee, 0xcc, 0x3a, 0xd5, 0x33, 0x88, 0x28, 0xf6, 0x05, 0x4d, 0x78,
		0xd8, 0x2f, 0x74, 0xfc, 0x4e, 0x8e, 0xff, 0x28, 0x85, 0x5c, 0xff, 0x52, 0x7d, 0x0c, 0x2e, 0x37,
		0xaf, 0xca, 0xfa, 0x1b, 0x6d, 0x78, 0x1b, 0x25, 0x7e, 0xfb, 0x06, 0xf9, 0xb1, 0xc9, 0x75, 0x66,
		0xf9, 0xb1, 0x3f, 0x6f, 0x14, 0xc7, 0xdb, 0x87, 0xef, 0x16, 0xc3, 0x2e, 0x41, 0xb6, 0xb9, 0x04,
		0xd9, 0x52, 0xb1, 0x69, 0x0e, 0xca, 0x33, 0x91, 0x8e, 0xa6, 0x52, 0xd1, 0x2c, 0xb6, 0x67, 0xae,
		0xfd, 0xa4, 0xac, 0xde, 0x90, 0xaf, 0x57, 0xe6, 0xe7, 0xf6, 0x7c, 0xfc, 0x8b, 0x59, 0x50, 0xd2,
		0xfe, 0x55, 0xfb, 0xbd, 0xf6, 0xbd, 0x6b, 0x45, 0x5e, 0x7c, 0x55, 0x87, 0x9f, 0x11, 0x6e, 0x94,
		0xef, 0x9f, 0x5c, 0x67, 0xc6, 0xcf, 0x2e, 0x81, 0x93, 0xd9, 0x3c, 0xc4, 0x1a, 0xe2, 0xc3, 0xc6,
		0xe0, 0x2b, 0x8e, 0x14, 0x47, 0x4a, 0x04, 0x00, 0x11, 0x78, 0xc6, 0x5d, 0xf2, 0x7f, 0xeb, 0x93,
		0xff, 0x13, 0x29, 0x6a, 0x68, 0x98, 0xaa, 0xab, 0xed, 0xcc, 0xd2, 0x77, 0xd3, 0x84, 0x44, 0x08,
		0x87, 0x4f, 0x78, 0x81, 0x03, 0x18, 0x2d, 0xc0, 0x64, 0x1e, 0x67, 0x87, 0x3e, 0x1e, 0x3b, 0xb4,
		0x02, 0xda, 0xfd, 0xfe, 0x9a, 0x9f, 0x67, 0xce, 0xfc, 0x5c, 0x5d, 0x92, 0x17, 0x2e, 0x72, 0xde,
		0x80, 0x9b, 0x31, 0x42, 0x74, 0x82, 0xbd, 0x99, 0xc1, 0x46, 0x64, 0x07, 0x6f, 0x39, 0xc4, 0x32,
		0x67, 0x03, 0x66, 0xe8, 0x16, 0xae, 0xe5, 0xf6, 0xc1, 0x98, 0x45, 0x20, 0xa6, 0x18, 0xd4, 0x5c,
		0x8e, 0xab, 0x3b, 0xae, 0xee, 0x32, 0x35, 0x1c, 0x4b, 0x87, 0xc1, 0xf9, 0xb9, 0x63, 0xea, 0xcd,
		0x31, 0x75, 0x03, 0xea, 0x5c, 0x65, 0xea, 0x84, 0x5a, 0x33, 0xf5, 0xc4, 0xa4, 0x53, 0x13, 0x80,
		0x60, 0x20, 0x30, 0x17, 0x10, 0xc5, 0x21, 0xe6, 0x40, 0x28, 0xfc, 0xf7, 0xe5, 0xbf, 0x7e, 0xea,
		0xc2, 0x1b, 0x42, 0x61, 0x16, 0x73, 0x01, 0x23, 0x0c, 0xc3, 0xb8, 0xd7, 0xfb, 0xca, 0xff, 0x06,
		0x0c, 0x04, 0x88, 0x63, 0xfc, 0xf7, 0x95, 0xf1, 0xbb, 0xf2, 0x05, 0x4e, 0x48, 0x38, 0x21, 0xd1,
		0x6e, 0x21, 0x81, 0xad, 0xd2, 0xb4, 0xf5, 0xe5, 0xb6, 0xc2, 0x21, 0xab, 0x3c, 0x24, 0x25, 0x83,
		0xce, 0xf4, 0x96, 0x52, 0x41, 0xaa, 0xfe, 0x03, 0x54, 0x5a, 0xf1, 0xd3, 0x09, 0x82, 0x47, 0x68,
		0x01, 0x48, 0x2a, 0x89, 0xf0, 0xd8, 0xc6, 0xb1, 0xf3, 0x77, 0xb3, 0x20, 0xac, 0x0e, 0x1e, 0x16,
		0x42, 0x86, 0xa7, 0x49, 0xf5, 0x81, 0x3d, 0x9c, 0x2f, 0x71, 0xeb, 0xcd, 0xd9, 0x0d, 0x8e, 0xcc,
		0x8f, 0x58, 0x36, 0xc2, 0xd2, 0x5b, 0x1a, 0x21, 0xca, 0x67, 0x44, 0x80, 0xd1, 0x60, 0x77, 0x94,
		0x1e, 0x97, 0x31, 0x6d, 0x95, 0x26, 0xfb, 0xdc, 0x55, 0x2a, 0x7d, 0x40, 0x8a, 0x92, 0xcb, 0x2d,
		0x32, 0xe6, 0xe3, 0x56, 0x01, 0xb2, 0x7f, 0xe2, 0x45, 0x49, 0x60, 0xcb, 0x2c, 0xdf, 0xd6, 0x3c,
		0xcf, 0x76, 0x25, 0xbf, 0x76, 0x47, 0x34, 0xc0, 0x2c, 0x89, 0x76, 0xdb, 0x9b, 0x59, 0x14, 0xce,
		0xec, 0x48, 0x7b, 0xbe, 0x09, 0x40, 0x42, 0x16, 0x27, 0x8c, 0x67, 0x23, 0x1c, 0x1d, 0x75, 0x4f,
		0x33, 0x57, 0xc4, 0x71, 0xe6, 0x2b, 0x58, 0xfd, 0x0d, 0xdd, 0x1e, 0x9b, 0x70, 0xb5, 0xa2, 0xa0,
		0x34, 0x14, 0x23, 0x99, 0x90, 0x9a, 0x12, 0x0e, 0x84, 0x03, 0xd2, 0x9e, 0x0b, 0x2e, 0x90, 0x50,
		0x1b, 0x60, 0x2a, 0x55, 0x2a, 0xd4, 0xed, 0xcc, 0x8b, 0xb0, 0x20, 0xf7, 0xec, 0x16, 0x1c, 0xa3,
		0x4e, 0xc5, 0xce, 0xa2, 0x3c, 0xdb, 0xf6, 0xfa, 0x0d, 0x1d, 0x55, 0x13, 0x00, 0xc7, 0xab, 0x28,
		0x62, 0xd1, 0xe5, 0x7c, 0xfe, 0x0e, 0x4d, 0xec, 0xf7, 0x4f, 0x3b, 0xa4, 0x14, 0x95, 0x1e, 0x66,
		0xc7, 0xb0, 0x7c, 0x5a, 0x0f, 0xcd, 0xe7, 0x9e, 0x40, 0x93, 0x3b, 0xd9, 0xb3, 0xdc, 0x2b, 0x1f,
		0x7a, 0x97, 0xde, 0x60, 0xce, 0xd1, 0x04, 0x57, 0xdc, 0x26, 0x79, 0xda, 0x33, 0x07, 0x61, 0x88,
		0x39, 0x07, 0x31, 0x45, 0x14, 0x58, 0x04, 0xf8, 0xcf, 0x18, 0x85, 0xd2, 0x78, 0x34, 0x8d, 0x3a,
		0x35, 0xbb, 0x9b, 0xb3, 0xe4, 0xb5, 0xee, 0x6c, 0x37, 0xad, 0x56, 0xa6, 0xa9, 0x4d, 0x6f, 0x16,
		0x6f, 0xb4, 0x67, 0xec, 0xe7, 0x4e, 0x04, 0x12, 0x94, 0x63, 0x3f, 0xa5, 0xa8, 0xae, 0x89, 0xfd,
		0x24, 0x5c, 0x9c, 0x99, 0x41, 0xa5, 0xce, 0x8c, 0x91, 0x52, 0x0a, 0xff, 0x72, 0x43, 0xc4, 0x14,
		0x10, 0x24, 0x26, 0x31, 0x10, 0x1a, 0xe0, 0xdb, 0x76, 0x00, 0xa4, 0xf0, 0x7d, 0x44, 0x48, 0xe1,
		0x83, 0x41, 0xa4, 0x88, 0x85, 0x67, 0x8d, 0xd8, 0xba, 0xd5, 0x7e, 0x26, 0xf4, 0x93, 0xf2, 0xa7,
		0x29, 0xca, 0x57, 0xc0, 0x28, 0x7e, 0x3f, 0xcc, 0x7e, 0xfc, 0x10, 0xed, 0x7e, 0xfc, 0xf8, 0x7c,
		0x68, 0xa2, 0x7f, 0x91, 0x70, 0x5f, 0xd1, 0xbf, 0xd0, 0x64, 0x28, 0xff, 0x52, 0x2c, 0x76, 0x4f,
		0xb9, 0x70, 0x67, 0x96, 0xb5, 0xd6, 0xcf, 0x46, 0x55, 0x6a, 0xcf, 0x9d, 0x21, 0x60, 0x54, 0x1d,
		0xac, 0x33, 0x04, 0x38, 0xb5, 0xb8, 0xdc, 0xd9, 0x72, 0x67, 0xeb, 0x71, 0xe2, 0x0e, 0x9d, 0x5b,
		0xcd, 0xb9, 0xd5, 0xf6, 0x94, 0xdf, 0xac, 0x78, 0xac, 0x05, 0x4f, 0xd7, 0xd7, 0xdb, 0x06, 0x20,
		0x33, 0x35, 0x9a, 0x50, 0xa9, 0x48, 0x67, 0x4a, 0xf5, 0x00, 0x3e, 0xe1, 0x05, 0x07, 0xc4, 0x75,
		0xce, 0x73, 0x84, 0xc7, 0xa6, 0x6c, 0xbe, 0xef, 0xd8, 0xfc, 0xfd, 0x63, 0xf3, 0x65, 0x0a, 0x7b,
		0x76, 0x61, 0x40, 0xf8, 0x3c, 0x44, 0x0b, 0xa3, 0x14, 0x87, 0xb5, 0xdd, 0xc9, 0x0f, 0x36, 0x5c,
		0x87, 0x15, 0x82, 0x95, 0xa6, 0xbd, 0xfa, 0x07, 0x0a, 0x21, 0x99, 0x4d, 0xe9, 0xf7, 0x80, 0x84,
		0x88, 0xc8, 0x28, 0x16, 0x38, 0x25, 0xdf, 0x80, 0x8c, 0x55, 0x68, 0x5d, 0x40, 0xa8, 0x44, 0x87,
		0x76, 0x03, 0x70, 0xd3, 0xfb, 0x9a, 0xe9, 0x2c, 0xd6, 0x44, 0x5d, 0x85, 0xb8, 0x2b, 0x12, 0x79,
		0x1d, 0x47, 0x4f, 0x2d, 0xa2, 0x6f, 0xc4, 0xd3, 0x53, 0xed, 0x10, 0x58, 0x32, 0x76, 0xc3, 0xbd,
		0x32, 0xd6, 0x81, 0xaa, 0xeb, 0x42, 0x55, 0x74, 0xa2, 0xaa, 0xba, 0x91, 0xbd, 0x8e, 0x54, 0x4b,
		0x57, 0xaa, 0xab, 0x33, 0x35, 0xa6, 0x27, 0xd4, 0xd7, 0x17, 0x2a, 0xe8, 0x52, 0xb5, 0x74, 0xaa,
		0xb5, 0xa5, 0x3b, 0xbf, 0xff, 0x4b, 0xf7, 0x64, 0x8f, 0x0b, 0x7d, 0x67, 0x14, 0xdd, 0x73, 0x24,
		0x5d, 0x75, 0xed, 0x06, 0xbd, 0xc7, 0x46, 0xd3, 0xc6, 0x57, 0x5f, 0x1d, 0x30, 0x48, 0x35, 0xfe,
		0x84, 0x17, 0x7d, 0x7b, 0x8d, 0x4e, 0x0f, 0xab, 0xa6, 0xcb, 0x8d, 0x59, 0x84, 0xc9, 0x84, 0x4a,
		0x43, 0x03, 0xfa, 0xe0, 0x49, 0x1b, 0x23, 0xf5, 0xda, 0x9e, 0xa3, 0x53, 0x9b, 0x89, 0x9d, 0xb2,
		0xe6, 0x94, 0xb5, 0xfa, 0xca, 0x9a, 0xb9, 0x53, 0xb8, 0x8a, 0x73, 0x78, 0xb7, 0x93, 0x18, 0x2b,
		0x2f, 0xf1, 0xb9, 0xfa, 0x4b, 0x51, 0xfe, 0x81, 0x8f, 0xfe, 0xa0, 0xda, 0xd1, 0x1f, 0x34, 0x70,
		0xf4, 0x07, 0x9b, 0x8e, 0xfe, 0xc0, 0x1d, 0x7d, 0x77, 0xf4, 0x1f, 0xe5, 0xd1, 0x1f, 0x1c, 0x08,
		0xa5, 0x70, 0x52, 0x1a, 0x7a, 0xce, 0xe4, 0x3b, 0x98, 0x1c, 0xf5, 0x87, 0xd8, 0x42, 0x63, 0x0f,
		0x6d, 0xb4, 0x8d, 0x50, 0x81, 0xf6, 0xf6, 0x4c, 0x46, 0xc9, 0x3e, 0xa3, 0x3e, 0x12, 0x47, 0x4f,
		0x95, 0x7a, 0x0d, 0x4f, 0x4f, 0x40, 0xbb, 0x20, 0x8e, 0xba, 0xdd, 0xd3, 0xef, 0x48, 0x70, 0x7c,
		0x02, 0x4f, 0xbd, 0xdc, 0x97, 0xa7, 0xdf, 0xa9, 0x0d, 0xde, 0xfc, 0xf5, 0xe0, 0xf8, 0x18, 0xbe,
		0x59, 0x7e, 0x97, 0x73, 0xde, 0x1d, 0xdb, 0x1c, 0x94, 0x2a, 0x20, 0xc3, 0x75, 0x56, 0x9a, 0xa1,
		0xed, 0x38, 0x52, 0xe9, 0x94, 0x95, 0x30, 0x87, 0x75, 0x59, 0x2d, 0x34, 0x82, 0x41, 0x6c, 0x8c,
		0xef, 0xc2, 0x76, 0x4c, 0xe2, 0xe6, 0x55, 0xda, 0x93, 0x9d, 0x62, 0x13, 0x5a, 0xaa, 0x02, 0x59,
		0xdc, 0xe5, 0x47, 0x86, 0x31, 0x8b, 0x66, 0xe8, 0xae, 0x08, 0xa0, 0x2a, 0xa4, 0x71, 0x7f, 0x24,
		0xb0, 0x61, 0x69, 0xda, 0xb2, 0xeb, 0xb6, 0x10, 0xc8, 0x9d, 0xdb, 0x9e, 0x42, 0xfe, 0xf4, 0x3b,
		0x0a, 0x1c, 0x24, 0x8c, 0x0a, 0x42, 0xf2, 0x09, 0x43, 0xc2, 0xfe, 0x34, 0x3c, 0xba, 0xdb, 0x3d,
		0x25, 0x81, 0xfa, 0x13, 0x7b, 0xfa, 0x1b, 0xc5, 0xf4, 0xd6, 0xbe, 0x19, 0xe8, 0x6f, 0x9e, 0xde,
		0x29, 0x2d, 0xd9, 0x03, 0x2a, 0x0f, 0x43, 0x4b, 0xfb, 0x5c, 0xef, 0x7d, 0x11, 0x68, 0x2b, 0x3a,
		0x8b, 0x19, 0xc2, 0x38, 0xb3, 0xeb, 0x4d, 0xe0, 0x9c, 0x67, 0xa7, 0x46, 0xd1, 0x5e, 0x30, 0x03,
		0x77, 0x9e, 0xe9, 0xff, 0x5e, 0x76, 0x0e, 0x99, 0x1c, 0xb2, 0x15, 0xd4, 0xb7, 0xe7, 0xd4, 0x10,
		0x3b, 0xbd, 0xb1, 0x5e, 0xb6, 0x48, 0x93, 0x08, 0xde, 0xb3, 0x7a, 0x00, 0xde, 0xb3, 0xba, 0xf8,
		0xdd, 0x73, 0x33, 0xfc, 0xee, 0x79, 0x05, 0xfc, 0xae, 0x86, 0x1a, 0x38, 0xd8, 0xee, 0x3d, 0x80,
		0xed, 0x1a, 0x39, 0x89, 0xb3, 0xe5, 0x34, 0x70, 0xe1, 0xae, 0xd2, 0x85, 0x32, 0x37, 0x59, 0xd2,
		0xe3, 0xf6, 0x1c, 0x3c, 0x30, 0x8a, 0xa0, 0x3a, 0x84, 0x61, 0x83, 0xea, 0x80, 0x43, 0x18, 0x3a,
		0x84, 0xa1, 0x43, 0x18, 0x36, 0xb5, 0x26, 0x2d, 0x46, 0x18, 0x1a, 0xb9, 0xfd, 0xf3, 0xcc, 0x7c,
		0x60, 0xcf, 0xcc, 0x07, 0x05, 0x66, 0xae, 0xd3, 0x54, 0x1d, 0x33, 0x77, 0xcc, 0xfc, 0x31, 0xd6,
		0xaa, 0x1a, 0x38, 0x4e, 0xbe, 0x26, 0xdc, 0x1c, 0x27, 0x6f, 0x82, 0x93, 0x87, 0x18, 0x8d, 0xcf,
		0x91, 0x5d, 0xfe, 0xcf, 0xb9, 0x2d, 0x56, 0x9c, 0x32, 0x1d, 0xaf, 0x5d, 0x22, 0x6d, 0x9d, 0x9e,
		0xee, 0x58, 0xbb, 0xd3, 0xd3, 0x9d, 0x9e, 0xee, 0xf4, 0xf4, 0xfa, 0xdc, 0xbd, 0x8a, 0x0f, 0x55,
		0x39, 0x4b, 0x76, 0xe8, 0xe5, 0x9d, 0x57, 0xb7, 0x6a, 0x15, 0xb7, 0x1f, 0x14, 0x73, 0x47, 0xd6,
		0xad, 0xb8, 0x98, 0x44, 0x2c, 0x36, 0x09, 0x74, 0xd5, 0x73, 0x67, 0x05, 0x78, 0xc6, 0x28, 0x17,
		0x11, 0x12, 0x98, 0xc3, 0xf2, 0x96, 0x96, 0x2b, 0x77, 0xf5, 0xe0, 0x9d, 0xcb, 0x77, 0x59, 0x8a,
		0x28, 0x05, 0x19, 0x9c, 0x23, 0x28, 0xa0, 0x06, 0x36, 0x63, 0x09, 0xd6, 0xa1, 0x04, 0x5a, 0xff,
		0x38, 0x64, 0x89, 0xa2, 0x3a, 0xa8, 0x81, 0x87, 0x53, 0xa9, 0xa8, 0x06, 0x2a, 0xa0, 0x05, 0x05,
		0x8b, 0x34, 0xd5, 0xd8, 0x05, 0xfc, 0xef, 0x7f, 0xcd, 0xa2, 0xe2, 0x5b, 0xdf, 0x9b, 0xb2, 0x45,
		0xc9, 0x63, 0x97, 0x84, 0x8d, 0xcf, 0x51, 0x12, 0x33, 0x5e, 0x0b, 0x10, 0xdb, 0xc7, 0xe3, 0xef,
		0x7f, 0x41, 0xa3, 0x26, 0xd7, 0xec, 0xd1, 0x96, 0x3a, 0x3a, 0xaf, 0x17, 0x28, 0x3d, 0x37, 0x0e,
		0x94, 0x3e, 0xd9, 0xf1, 0x66, 0xdb, 0x35, 0xaf, 0xbf, 0x9e, 0x34, 0xa0, 0x69, 0x19, 0x93, 0x5c,
		0x25, 0xcd, 0xaa, 0xf8, 0x66, 0x2b, 0x9a, 0x54, 0xe7, 0x32, 0x9e, 0xc8, 0x09, 0x71, 0x60, 0xf3,
		0x7a, 0x29, 0x57, 0x58, 0x02, 0x5f, 0x4d, 0xe3, 0xc4, 0x41, 0x00, 0x08, 0x7c, 0x16, 0x4b, 0xb9,
		0xc5, 0xc6, 0x40, 0xf1, 0x8d, 0xf2, 0x39, 0x70, 0x10, 0x0c, 0x76, 0xcf, 0xe4, 0x02, 0xc7, 0x75,
		0x7c, 0x06, 0x0d, 0x07, 0x8e, 0x77, 0x97, 0x00, 0x5b, 0x97, 0x1e, 0x25, 0x88, 0x07, 0x68, 0xa4,
		0x24, 0x98, 0x21, 0xa9, 0x38, 0xb7, 0x54, 0x9b, 0xdd, 0x52, 0x65, 0x78, 0x22, 0x3b, 0xd3, 0xcf,
		0xde, 0x04, 0x6c, 0xc4, 0x14, 0xb4, 0x33, 0x09, 0x6b, 0x3a, 0x8b, 0x77, 0xa2, 0x79, 0x36, 0x1e,
		0xc5, 0xf3, 0x1a, 0x47, 0x71, 0x27, 0xba, 0xc7, 0x9d, 0xc0, 0x87, 0x73, 0x02, 0xcb, 0xbc, 0x51,
		0xe6, 0x5e, 0x29, 0x3b, 0xd7, 0x6d, 0x45, 0x2f, 0x55, 0xb3, 0xcb, 0x6c, 0xeb, 0xb5, 0x32, 0x5b,
		0xf9, 0x2b, 0x97, 0x72, 0x53, 0xdd, 0xeb, 0x65, 0xe7, 0xfd, 0xaa, 0x10, 0x2e, 0x38, 0xbc, 0x37,
		0xac, 0x96, 0x57, 0x6c, 0x4f, 0xde, 0xb1, 0x3a, 0xe6, 0x77, 0x73, 0xde, 0xb2, 0x46, 0x8c, 0xf1,
		0xfd, 0x79, 0xcf, 0xec, 0xc2, 0x0c, 0x70, 0x17, 0x39, 0x35, 0x55, 0xbc, 0x6b, 0x4d, 0xef, 0x7d,
		0xfb, 0xd2, 0x69, 0x2a, 0x78, 0xdf, 0x0e, 0xb0, 0xd7, 0xb5, 0x33, 0x69, 0x0e, 0xef, 0x9d, 0xdb,
		0x0f, 0xa9, 0xb4, 0x29, 0x5b, 0xe6, 0xe0, 0xde, 0xbb, 0x0a, 0x84, 0xd6, 0xce, 0x28, 0xa7, 0xa5,
		0x07, 0xca, 0x40, 0x07, 0xd8, 0x2d, 0xf3, 0x0d, 0x1c, 0x3a, 0x94, 0x89, 0x23, 0x5d, 0xb7, 0xf7,
		0x03, 0xc7, 0xc2, 0x4b, 0x1a, 0xb1, 0xf1, 0xa3, 0x31, 0x0b, 0x43, 0x76, 0x43, 0xe8, 0xc4, 0xe3,
		0x64, 0x14, 0x12, 0x3a, 0xb9, 0xc8, 0xca, 0xfb, 0x26, 0xcd, 0xa9, 0x4e, 0x20, 0xfd, 0xeb, 0xf8,
		0x6a, 0x97, 0x4c, 0xb7, 0x92, 0xe1, 0xd9, 0x73, 0x5d, 0xa3, 0x90, 0x04, 0xca, 0x53, 0x0a, 0x63,
		0x44, 0x42, 0x0e, 0x64, 0x9c, 0xdd, 0x4f, 0x4a, 0x29, 0xca, 0x04, 0xc4, 0x94, 0xfc, 0x19, 0xe3,
		0xb4, 0xa8, 0x63, 0x69, 0xf9, 0x77, 0xdb, 0x53, 0x59, 0x5d, 0x58, 0x57, 0x3a, 0x73, 0x85, 0x33,
		0x56, 0xf9, 0xf5, 0xf7, 0x60, 0x47, 0xdb, 0x48, 0xdd, 0x82, 0x35, 0x3d, 0x40, 0x26, 0x5d, 0x37,
		0xaa, 0x6e, 0x89, 0xad, 0x0c, 0xad, 0xbf, 0x29, 0xf9, 0x77, 0xda, 0xd7, 0x3a, 0x9b, 0x4a, 0xbc,
		0xb5, 0x5e, 0x71, 0x9a, 0x1f, 0x4b, 0xba, 0x18, 0x61, 0x88, 0xf0, 0x1c, 0x23, 0xc9, 0x92, 0xf7,
		0x7d, 0x2e, 0x6c, 0xa5, 0x53, 0xfd, 0x4d, 0x30, 0x7d, 0xdf, 0x3d, 0x73, 0xee, 0x0d, 0x16, 0x6b,
		0x67, 0x1e, 0x61, 0x8e, 0xa9, 0x8f, 0xeb, 0xf0, 0xe3, 0x77, 0x6c, 0x0e, 0x21, 0xbe, 0xc6, 0xa1,
		0x3c, 0xe5, 0x7a, 0x42, 0xd1, 0xbc, 0xc7, 0x5d, 0x3f, 0xe6, 0x3e, 0x7d, 0xee, 0x1b, 0xdf, 0xa3,
		0xfe, 0xaa, 0xef, 0x8c, 0x45, 0x95, 0x44, 0xd7, 0xca, 0xa2, 0x6a, 0x1b, 0xd6, 0x63, 0x77, 0x1c,
		0xad, 0xf8, 0x3e, 0xcb, 0xa7, 0xcd, 0x3d, 0x57, 0x47, 0x4d, 0x3d, 0xf2, 0x94, 0x19, 0xb5, 0xf6,
		0x54, 0x79, 0xcb, 0x7a, 0x79, 0xd5, 0xca, 0x5b, 0xad, 0xf7, 0xd9, 0xc6, 0x3e, 0xa3, 0x01, 0x88,
		0x6c, 0x85, 0xb3, 0xee, 0xa9, 0xe0, 0x81, 0xb2, 0xe2, 0x18, 0x55, 0x6a, 0x99, 0x36, 0xde, 0x96,
		0x38, 0x56, 0xde, 0x85, 0x57, 0x01, 0x11, 0xc0, 0x17, 0xb3, 0x11, 0x0b, 0x81, 0x4f, 0x59, 0x1c,
		0x06, 0xe9, 0x11, 0xba, 0x26, 0x52, 0xd0, 0xaf, 0xdd, 0x7d, 0xb3, 0xbf, 0x72, 0xe9, 0x9f, 0x5c,
		0xc1, 0x7a, 0xef, 0xf2, 0x47, 0xee, 0xee, 0xfa, 0x58, 0x46, 0xc9, 0xc6, 0xee, 0xc5, 0x6a, 0x31,
		0xc3, 0x4d, 0x5d, 0x1b, 0x77, 0x47, 0x3e, 0xb7, 0x85, 0x82, 0x3a, 0x49, 0x27, 0xd1, 0xf2, 0x34,
		0x52, 0x7d, 0x9d, 0x69, 0x1e, 0xe9, 0xca, 0x66, 0x96, 0x44, 0x03, 0x7b, 0x65, 0xd1, 0xc0, 0x41,
		0x23, 0xd1, 0xc0, 0xfb, 0x18, 0x0c, 0x6c, 0x2a, 0x16, 0x58, 0x8a, 0x13, 0x36, 0x6f, 0xbf, 0x69,
		0xd0, 0x76, 0xd3, 0x30, 0xd7, 0xc3, 0xcc, 0x3d, 0x6a, 0xee, 0xd4, 0x5f, 0x26, 0x30, 0xf4, 0x7a,
		0xa6, 0xa5, 0xc4, 0xaa, 0xa2, 0x5b, 0xed, 0x51, 0xad, 0x5f, 0xcc, 0x7c, 0xbb, 0xf6, 0xaf, 0x3b,
		0x68, 0xe7, 0xeb, 0x36, 0x0b, 0x52, 0x31, 0xce, 0x89, 0x1f, 0x8c, 0xcc, 0x92, 0xe2, 0x07, 0x23,
		0x73, 0x6e, 0x46, 0x94, 0x8f, 0x51, 0x85, 0xcf, 0xd8, 0x38, 0x61, 0x6e, 0x44, 0xe0, 0x59, 0xed,
		0xfc, 0x78, 0xc7, 0xd8, 0xea, 0x32, 0xb6, 0xf2, 0xa6, 0x56, 0x0a, 0x6b, 0x60, 0xde, 0xd7, 0xca,
		0x04, 0x9a, 0xb0, 0xda, 0xcb, 0x7a, 0x9a, 0x10, 0x87, 0x0d, 0xae, 0xc1, 0xf5, 0xb2, 0x6e, 0x38,
		0xda, 0xd7, 0xd6, 0x5e, 0xd6, 0x8f, 0x23, 0x8f, 0xb2, 0xe7, 0x32, 0x6d, 0xd6, 0xe4, 0xf2, 0xf9,
		0xb9, 0x4b, 0xb5, 0x69, 0xc0, 0xd7, 0x24, 0x6d, 0x8f, 0xaf, 0x7c, 0xbb, 0x44, 0xca, 0xaf, 0x7c,
		0x6b, 0x74, 0x4c, 0x12, 0x11, 0x58, 0x66, 0x52, 0x12, 0x0a, 0x22, 0xe1, 0xec, 0x4d, 0xf3, 0xf4,
		0x81, 0xe3, 0xe9, 0xf7, 0x96, 0xa7, 0xbb, 0x04, 0xca, 0x47, 0xce, 0xd6, 0x5d, 0x02, 0x65, 0x4d,
		0x07, 0x75, 0x49, 0x11, 0xba, 0x5d, 0xfd, 0x82, 0x5d, 0x1d, 0xba, 0xa2, 0x23, 0x38, 0xf1, 0xc3,
		0x9e, 0xee, 0xb4, 0x68, 0x4b, 0xbd, 0xc3, 0xdf, 0xff, 0x26, 0x27, 0xd1, 0x4d, 0xa5, 0xbf, 0x7f,
		0xb8, 0xb9, 0x16, 0x2f, 0x97, 0x78, 0x40, 0x6d, 0xc4, 0x5b, 0xa7, 0x59, 0xd4, 0x72, 0xda, 0x6f,
		0xf6, 0x99, 0x1b, 0x6e, 0x8e, 0x89, 0xff, 0x5e, 0x2a, 0x3e, 0x1e, 0x12, 0x9e, 0x60, 0x73, 0x4f,
		0x79, 0xdb, 0xb7, 0x3b, 0xf1, 0xd7, 0x2f, 0x2d, 0xf3, 0xe4, 0xab, 0x8e, 0x83, 0x48, 0x28, 0x95,
		0x68, 0xe9, 0xce, 0x3f, 0xa2, 0x4c, 0x40, 0x84, 0x7d, 0x36, 0x9b, 0x61, 0x1a, 0xe0, 0x00, 0x46,
		0xb1, 0xc8, 0xd0, 0x16, 0x3c, 0x9e, 0xcf, 0x59, 0x24, 0x70, 0x70, 0xbc, 0xc5, 0x53, 0xdf, 0xdb,
		0xe6, 0xa9, 0xef, 0x3d, 0x5a, 0x4f, 0xfd, 0x56, 0x7d, 0xa4, 0x5c, 0xff, 0xd8, 0xa5, 0x6f, 0x74,
		0x7e, 0x45, 0x42, 0xe0, 0x88, 0x6e, 0x55, 0x30, 0x3a, 0x1f, 0x2e, 0xbd, 0xdf, 0xaf, 0xfe, 0xfa,
		0xea, 0x8b, 0xf7, 0xa1, 0xe7, 0x7d, 0x7d, 0xf5, 0xac, 0x63, 0x19, 0xcf, 0x7a, 0x40, 0xb9, 0x55,
		0x9b, 0xcf, 0x16, 0xe1, 0xa2, 0x8f, 0x76, 0x1c, 0x28, 0xfd, 0x7b, 0xe9, 0x29, 0x22, 0x5c, 0xac,
		0x9d, 0x22, 0xdb, 0x38, 0x56, 0xcf, 0xc5, 0xb1, 0x36, 0x79, 0x7e, 0x3d, 0x12, 0x98, 0xb9, 0x7e,
		0x3d, 0x62, 0x1a, 0xc9, 0x4a, 0x60, 0x2b, 0x24, 0xc0, 0x54, 0x90, 0x31, 0xc1, 0x91, 0x0a, 0x55,
		0xa6, 0x56, 0x61, 0x69, 0x9a, 0x5b, 0xef, 0x30, 0x69, 0x6e, 0x2e, 0xb0, 0x65, 0xb2, 0x4e, 0xa5,
		0x76, 0xdb, 0x92, 0x7f, 0xd6, 0x08, 0x41, 0xec, 0xec, 0xc1, 0xba, 0x44, 0xb2, 0x6d, 0x6f, 0xb6,
		0xba, 0x4a, 0x82, 0x11, 0x56, 0x1d, 0x53, 0x7d, 0xc9, 0x2f, 0x14, 0xe5, 0xa9, 0xca, 0xdf, 0x98,
		0x8a, 0x68, 0x51, 0x8a, 0x98, 0x71, 0x74, 0xd8, 0x42, 0x3a, 0x2c, 0x6f, 0x6b, 0x63, 0xd2, 0xc6,
		0x66, 0xd9, 0xb6, 0x26, 0x97, 0x66, 0x3d, 0x40, 0xa7, 0x8a, 0xb2, 0x1a, 0xd1, 0xe0, 0x13, 0x73,
		0x6c, 0x33, 0xc3, 0x6c, 0xbd, 0x7e, 0x2f, 0x6d, 0x19, 0x6e, 0xab, 0xdf, 0xef, 0xb4, 0x2e, 0xcb,
		0xad, 0xca, 0x4a, 0xd6, 0xe4, 0x6e, 0x2b, 0xb2, 0x31, 0xd8, 0xd0, 0x56, 0x79, 0xb5, 0xcd, 0xf6,
		0x90, 0x6b, 0x61, 0x06, 0x1b, 0xe2, 0x37, 0x44, 0xf8, 0xd3, 0xed, 0xaa, 0x51, 0xf2, 0x7b, 0x99,
		0x6a, 0x34, 0x43, 0x14, 0x4d, 0x70, 0x00, 0x01, 0xbe, 0x26, 0x7e, 0xe6, 0x7d, 0x1d, 0xa3, 0x51,
		0x44, 0xfc, 0x14, 0x2c, 0x44, 0x38, 0x20, 0x0a, 0xf8, 0x56, 0x27, 0x7d, 0xb0, 0x31, 0xa0, 0x9c,
		0x2d, 0x92, 0xcf, 0x34, 0x0e, 0x58, 0x3c, 0x0a, 0x31, 0x7c, 0xc2, 0x0b, 0x1c, 0x00, 0x8f, 0x47,
		0xea, 0xb7, 0x23, 0x69, 0x8d, 0x1c, 0x77, 0x87, 0xf4, 0x47, 0x16, 0x01, 0x67, 0x92, 0x8d, 0xde,
		0x8a, 0x08, 0x81, 0xcf, 0xe4, 0x74, 0xb7, 0x44, 0x2c, 0xd4, 0x2d, 0xf5, 0xf3, 0xca, 0x7b, 0x29,
		0x2b, 0x29, 0xc2, 0xe3, 0x31, 0x0e, 0x24, 0xf7, 0xd5, 0x3f, 0x78, 0x33, 0x16, 0xe0, 0x10, 0x6e,
		0xa6, 0xc4, 0x9f, 0x42, 0x84, 0xa5, 0x58, 0xf1, 0x05, 0x57, 0x23, 0xfd, 0x29, 0x93, 0x8f, 0xce,
		0xc6, 0x20, 0xef, 0xd4, 0x1d, 0xd2, 0xcb, 0x20, 0x20, 0xba, 0x31, 0x76, 0xb8, 0x58, 0xb9, 0xa2,
		0x30, 0x19, 0xa2, 0x81, 0x1a, 0x92, 0xcd, 0xa7, 0x2e, 0x96, 0xdf, 0x78, 0x7c, 0x8e, 0xe5, 0xdd,
		0xa7, 0x48, 0x80, 0x8f, 0xa8, 0x34, 0xab, 0xfc, 0x29, 0xe3, 0x98, 0x76, 0x87, 0x54, 0xc5, 0x1d,
		0xd3, 0x46, 0xf0, 0x80, 0x42, 0x46, 0x31, 0x04, 0x4c, 0x81, 0xa4, 0x26, 0xe4, 0x5a, 0x0a, 0x09,
		0x16, 0x4f, 0x96, 0xcf, 0x48, 0x18, 0x05, 0x46, 0xb3, 0x99, 0x81, 0xe3, 0x10, 0xeb, 0x6f, 0x8f,
		0x90, 0x7a, 0xfe, 0x85, 0xbc, 0xc3, 0x53, 0x91, 0x62, 0xb4, 0x86, 0x74, 0x1e, 0xe1, 0x80, 0xf8,
		0x52, 0x7d, 0x3e, 0x56, 0x8f, 0xc8, 0x99, 0x5c, 0x7e, 0x24, 0x5f, 0x4a, 0x35, 0xfb, 0x56, 0x86,
		0x5e, 0x14, 0x87, 0x58, 0x2e, 0x96, 0xbc, 0x25, 0xd5, 0x0f, 0x8a, 0xe9, 0x98, 0x45, 0x3e, 0xd6,
		0x8b, 0x92, 0x4d, 0x22, 0xd7, 0x83, 0x03, 0x82, 0x29, 0x0e, 0xe7, 0x38, 0x4a, 0xc5, 0xd9, 0xdb,
		0x5f, 0x7e, 0xf0, 0x7e, 0x7a, 0xff, 0x5a, 0xfd, 0xfd, 0x3f, 0x6a, 0xc1, 0xb3, 0xe7, 0xfa, 0x1f,
		0xb9, 0x3f, 0x98, 0x72, 0xf9, 0x88, 0xd9, 0x0d, 0x14, 0x5d, 0x10, 0x0e, 0x3e, 0xe2, 0x4a, 0x24,
		0xea, 0xab, 0x87, 0x54, 0xa1, 0x90, 0x93, 0x3e, 0xe4, 0x5c, 0xa9, 0x69, 0x98, 0xc6, 0x33, 0x1c,
		0x29, 0xa8, 0xe5, 0x35, 0x0a, 0x63, 0xcc, 0x53, 0x9a, 0x92, 0xef, 0x87, 0x6f, 0x85, 0xa6, 0x9f,
		0xec, 0xf1, 0x0e, 0xa1, 0x85, 0xf3, 0x9b, 0xf6, 0x69, 0xe1, 0xfc, 0xa6, 0x31, 0x2d, 0x7c, 0x09,
		0xf8, 0x2a, 0xd5, 0x80, 0x4a, 0xb1, 0x61, 0xab, 0x3d, 0xe6, 0x61, 0x86, 0xe6, 0x72, 0xc7, 0xf4,
		0x91, 0x5d, 0xe2, 0x04, 0x2f, 0x92, 0xc0, 0x8d, 0xb7, 0x53, 0xbf, 0x3b, 0x68, 0xe1, 0x89, 0xb1,
		0xb8, 0x7f, 0x9a, 0xd0, 0x58, 0x1c, 0x0c, 0x91, 0x91, 0xed, 0x9d, 0xf7, 0x49, 0xa9, 0x18, 0x86,
		0x61, 0xbd, 0xe2, 0x30, 0xbb, 0xe8, 0x9e, 0x3c, 0xf5, 0x9f, 0xb0, 0x52, 0x98, 0x33, 0x42, 0x5a,
		0x92, 0xd0, 0x7d, 0x40, 0x6c, 0x8c, 0xc5, 0xc3, 0x8b, 0xee, 0x8d, 0x45, 0xfb, 0xa2, 0x7b, 0x0b,
		0x44, 0x27, 0xde, 0xd2, 0xde, 0x77, 0x61, 0xbe, 0xc7, 0x1a, 0xe6, 0x3b, 0x7b, 0x84, 0x61, 0x3e,
		0x03, 0x02, 0x2e, 0xf3, 0x23, 0xaf, 0xfb, 0x95, 0x91, 0xf7, 0x9f, 0x4b, 0xef, 0xf7, 0x8f, 0x57,
		0xc9, 0x1f, 0x3d, 0xef, 0xeb, 0xe1, 0xd0, 0xfb, 0xd8, 0xbd, 0x7a, 0x66, 0xca, 0x6b, 0xba, 0x9f,
		0xbb, 0xdd, 0xcf, 0x1f, 0xfe, 0xb8, 0xfd, 0xaf, 0xab, 0xee, 0xb3, 0xcf, 0xdd, 0x0f, 0x7f, 0xcc,
		0xde, 0xa8, 0x3f, 0xba, 0x1f, 0xfe, 0x08, 0x7f, 0xbe, 0xea, 0x3e, 0xeb, 0xdc, 0x09, 0x28, 0xe5,
		0x3a, 0x21, 0x13, 0xf3, 0x14, 0xc1, 0x18, 0x57, 0x10, 0x5a, 0x6a, 0x5c, 0x41, 0x5a, 0x99, 0x48,
		0x3f, 0x27, 0xb0, 0xee, 0xab, 0xc0, 0x7a, 0x83, 0x68, 0x80, 0x04, 0x8b, 0x16, 0x06, 0x75, 0x77,
		0x1c, 0x74, 0xc5, 0xc9, 0x34, 0xbb, 0x25, 0x19, 0xf4, 0x1c, 0x76, 0xc5, 0x98, 0xf9, 0x57, 0xc1,
		0xae, 0x98, 0x70, 0x69, 0x87, 0x61, 0x61, 0x74, 0xec, 0x69, 0xf7, 0xd7, 0x69, 0xf2, 0x51, 0xe6,
		0x0d, 0xd8, 0xec, 0xa8, 0xfc, 0x4d, 0x0d, 0xfe, 0x98, 0x7c, 0x5c, 0x66, 0x73, 0xd4, 0x08, 0xdf,
		0x04, 0x06, 0xf9, 0xff, 0xcb, 0xd6, 0xb7, 0xa5, 0x89, 0xf6, 0xab, 0x22, 0x3d, 0x64, 0x74, 0x02,
		0xb9, 0x61, 0x30, 0x26, 0x38, 0x0c, 0xda, 0x10, 0xbd, 0x79, 0xdc, 0x3e, 0x8b, 0xbd, 0x44, 0x11,
		0x77, 0x5c, 0x63, 0x28, 0x32, 0xf7, 0x96, 0x20, 0xf7, 0x78, 0x92, 0xe3, 0xfa, 0xbd, 0xc1, 0x99,
		0xcb, 0x8d, 0x83, 0xac, 0x6f, 0xb4, 0x67, 0x16, 0xa0, 0x2e, 0x5c, 0x6d, 0xc6, 0xdb, 0x92, 0x21,
		0x3a, 0x3e, 0x2d, 0x18, 0xc4, 0x5c, 0x05, 0x71, 0x7e, 0x7a, 0xff, 0x1a, 0x58, 0x04, 0x3f, 0xfc,
		0xfc, 0xda, 0xb1, 0x39, 0xc7, 0xe6, 0x1c, 0x9b, 0xdb, 0x0f, 0x9b, 0x7b, 0xe1, 0x12, 0x80, 0xe5,
		0x43, 0x4e, 0x19, 0x17, 0x5e, 0xc8, 0x7c, 0x14, 0x7a, 0x68, 0xa2, 0x8f, 0x4f, 0x09, 0xa3, 0x5b,
		0x1b, 0x61, 0xaa, 0xc8, 0xf9, 0x28, 0x04, 0x35, 0x02, 0xde, 0xbf, 0x6d, 0x05, 0x6b, 0xdb, 0x18,
		0x5b, 0x6c, 0x39, 0x6b, 0xdb, 0x14, 0x7b, 0xdc, 0x37, 0x6b, 0x8b, 0x23, 0xb2, 0x6f, 0x10, 0x98,
		0x0a, 0xea, 0x1b, 0xc1, 0x11, 0xb3, 0x2b, 0x0d, 0xc9, 0x8e, 0xd0, 0x4f, 0x4b, 0x24, 0x02, 0xa8,
		0xd1, 0x8e, 0xf6, 0xee, 0x9a, 0xf6, 0x0c, 0x9c, 0x76, 0x77, 0x88, 0x0f, 0xe3, 0xb3, 0x8b, 0x3c,
		0xd6, 0x64, 0xf5, 0xdf, 0x92, 0xf8, 0x6a, 0x90, 0xfa, 0x9c, 0x45, 0x06, 0x5c, 0x56, 0x5d, 0x65,
		0x5a, 0x6e, 0x41, 0x81, 0x53, 0x54, 0xa4, 0x56, 0x3f, 0x67, 0x17, 0xde, 0x4d, 0x09, 0x87, 0x02,
		0x9a, 0x1b, 0x41, 0xc8, 0x04, 0xa0, 0xe0, 0x1a, 0x51, 0x1f, 0x07, 0x30, 0x8e, 0xa9, 0xaf, 0x71,
		0x36, 0x44, 0x2c, 0x52, 0x98, 0x47, 0x82, 0x2c, 0xe9, 0x0e, 0xe9, 0x8f, 0x24, 0xe2, 0x02, 0x88,
		0xd0, 0x25, 0x63, 0x0b, 0xd8, 0xa0, 0x90, 0x70, 0x71, 0xa2, 0x51, 0x43, 0x3e, 0x9a, 0x60, 0x4f,
		0x77, 0x43, 0x86, 0x11, 0x56, 0xb9, 0xa0, 0x50, 0x40, 0x5f, 0x16, 0x96, 0x4d, 0x3e, 0xe5, 0x90,
		0x1e, 0x8d, 0x16, 0x69, 0x57, 0x83, 0x63, 0x95, 0xfb, 0xf0, 0x67, 0x8c, 0x42, 0x32, 0x26, 0xea,
		0x99, 0x22, 0x31, 0x95, 0x53, 0x65, 0xc8, 0x1f, 0x8e, 0x69, 0x7a, 0x72, 0xd5, 0x3b, 0x1e, 0xc5,
		0x5c, 0xde, 0x65, 0x89, 0xa2, 0xd1, 0xe0, 0xa5, 0x1c, 0xee, 0xe6, 0x58, 0x83, 0x7c, 0x92, 0x2a,
		0x4a, 0x2a, 0x82, 0x2d, 0xdf, 0x40, 0x3f, 0xe4, 0x89, 0xba, 0x21, 0xe1, 0x19, 0xc0, 0x07, 0x07,
		0xd9, 0xcd, 0x72, 0xaf, 0x92, 0xdc, 0x18, 0xd1, 0x20, 0x8f, 0x6e, 0x52, 0x2f, 0x31, 0xa4, 0x62,
		0x1a, 0x29, 0x8c, 0x10, 0x5a, 0x3e, 0x85, 0x5c, 0x6e, 0x0c, 0xe9, 0x60, 0x44, 0x29, 0x13, 0x80,
		0x6f, 0x7d, 0x8d, 0x42, 0xc2, 0x30, 0x43, 0xb7, 0x9e, 0x3f, 0x45, 0x94, 0xe2, 0x90, 0x03, 0x1b,
		0x27, 0x80, 0x9a, 0x28, 0xc2, 0x7c, 0xce, 0x68, 0x40, 0xe8, 0x64, 0x48, 0xd7, 0xd6, 0x29, 0xc1,
		0x2a, 0x69, 0x28, 0x53, 0xf1, 0x81, 0x97, 0x0f, 0x90, 0x2c, 0xa3, 0x7e, 0x2b, 0x31, 0xc5, 0x14,
		0x66, 0x2c, 0x52, 0x83, 0x7c, 0x32, 0x26, 0xbe, 0x82, 0x50, 0xe5, 0x06, 0xea, 0xb5, 0xd3, 0xcf,
		0x3d, 0xa4, 0x6a, 0xf9, 0x3c, 0xb9, 0xc5, 0x69, 0xf2, 0x09, 0xa3, 0x38, 0x7d, 0x3c, 0x85, 0x2a,
		0x52, 0x08, 0xb0, 0x55, 0x1c, 0x50, 0xee, 0xb1, 0x61, 0xd3, 0x53, 0x7f, 0x8f, 0x7d, 0xa4, 0xec,
		0x98, 0x84, 0x74, 0x66, 0xf2, 0xa4, 0x07, 0x2c, 0x5a, 0x68, 0xc7, 0xcd, 0x49, 0xfe, 0x86, 0xc9,
		0x83, 0xe2, 0x20, 0xc5, 0xf7, 0x73, 0x65, 0x08, 0x91, 0x19, 0x06, 0xc4, 0x97, 0xa8, 0x2b, 0xc2,
		0x35, 0x71, 0x0d, 0xa9, 0x1f, 0xa9, 0x3a, 0x70, 0x7a, 0xbd, 0xa5, 0x99, 0x44, 0x31, 0x0e, 0x54,
		0x0f, 0x95, 0x08, 0x8b, 0x88, 0xe0, 0x6b, 0x0c, 0x49, 0x08, 0x88, 0x04, 0xc0, 0xb1, 0xae, 0x3d,
		0xa2, 0x96, 0x30, 0x45, 0x39, 0x8d, 0xf0, 0x58, 0x2e, 0x51, 0x36, 0x37, 0xbe, 0x25, 0x5c, 0x70,
		0xb5, 0xda, 0x1a, 0x2c, 0x17, 0xc8, 0x55, 0x48, 0x97, 0x58, 0x5e, 0x76, 0xf9, 0xeb, 0xeb, 0x04,
		0xb9, 0x26, 0x7f, 0x8d, 0x14, 0xa2, 0x2a, 0xa1, 0x99, 0x22, 0xf6, 0x6a, 0x09, 0xbd, 0x3a, 0x49,
		0x49, 0x67, 0x48, 0x8b, 0x97, 0x78, 0x01, 0x1e, 0xa3, 0x38, 0x4c, 0x56, 0x55, 0x52, 0xb3, 0xdc,
		0x4f, 0x3c, 0x9b, 0xb3, 0x08, 0x45, 0x24, 0x5c, 0x40, 0x10, 0xab, 0x8c, 0x6a, 0x39, 0x39, 0xa1,
		0x44, 0x10, 0x14, 0xc2, 0x3c, 0x62, 0x23, 0xb5, 0x2f, 0x37, 0xd3, 0x64, 0x95, 0xd4, 0xeb, 0x0d,
		0x69, 0xfa, 0x4a, 0x49, 0xa1, 0xaf, 0x11, 0x3e, 0x6e, 0x03, 0x92, 0xe7, 0x71, 0xcb, 0xb5, 0x52,
		0x24, 0x4f, 0x8e, 0xcd, 0x98, 0x87, 0x42, 0xf3, 0x83, 0xec, 0x02, 0xa2, 0x6b, 0x50, 0xf8, 0x3c,
		0x9b, 0x4b, 0xce, 0x7a, 0x2a, 0x3c, 0x56, 0x59, 0xdd, 0x7d, 0x08, 0x99, 0xee, 0xa4, 0xb6, 0x7b,
		0x1a, 0x32, 0xdd, 0x45, 0x8d, 0xcd, 0x84, 0x4c, 0xed, 0xc3, 0xa0, 0xe5, 0x1a, 0x96, 0x8d, 0xa6,
		0x65, 0xa4, 0x71, 0x49, 0xb2, 0x94, 0x9f, 0x79, 0xe2, 0xaf, 0xf5, 0xd6, 0xfb, 0xed, 0xd7, 0x51,
		0x64, 0xf4, 0x07, 0x25, 0x98, 0xd5, 0xd5, 0xfb, 0xf0, 0xdd, 0xba, 0xc2, 0xfa, 0xcd, 0xff, 0x11,
		0x53, 0xc2, 0x4f, 0xbb, 0x5d, 0xf9, 0xff, 0xf4, 0xcb, 0xab, 0x6c, 0x9d, 0xbf, 0xb3, 0x59, 0x68,
		0x43, 0xb7, 0x4c, 0x03, 0xcb, 0x98, 0xca, 0xcb, 0x83, 0x2e, 0x67, 0x6f, 0xdf, 0xed, 0x4e, 0xda,
		0xd8, 0xfc, 0xa3, 0x50, 0x1d, 0xbc, 0x79, 0x82, 0x3a, 0x81, 0xee, 0xe1, 0x1b, 0x83, 0x28, 0xc1,
		0x96, 0x17, 0x78, 0x59, 0x4d, 0xfb, 0x88, 0xcd, 0x4a, 0xd4, 0x59, 0xd7, 0x35, 0x44, 0xd4, 0x5e,
		0xc2, 0x07, 0xd3, 0x66, 0x62, 0xeb, 0x2a, 0x24, 0x95, 0x8f, 0xa5, 0xf6, 0xb4, 0x7d, 0x1d, 0x4e,
		0x77, 0x98, 0xf2, 0xfb, 0xa6, 0xa7, 0xf6, 0xb5, 0x97, 0x68, 0x62, 0x2d, 0x1f, 0x6a, 0x5b, 0x89,
		0x1d, 0x86, 0x53, 0xe2, 0x3f, 0xb0, 0x37, 0x1d, 0x8a, 0xe3, 0xea, 0x5a, 0x0f, 0x85, 0xd9, 0xca,
		0x0c, 0x88, 0xc4, 0x87, 0xa1, 0x6d, 0xdd, 0x0a, 0x6e, 0x91, 0x0d, 0x13, 0x7b, 0xce, 0x32, 0x71,
		0x96, 0x09, 0xb8, 0x7a, 0x91, 0xfb, 0x8c, 0x5b, 0x56, 0x8f, 0x5f, 0x56, 0x91, 0xd0, 0xb5, 0xd0,
		0x99, 0xfd, 0xe7, 0x0e, 0x9c, 0x69, 0x75, 0xbe, 0xda, 0x68, 0x7a, 0x68, 0x61, 0x72, 0xd4, 0x3d,
		0x4e, 0x3a, 0x4a, 0x7d, 0x93, 0x78, 0xd2, 0x1b, 0x30, 0x43, 0x3e, 0x7c, 0x97, 0xd3, 0x34, 0x96,
		0x97, 0xe6, 0xbf, 0x55, 0xd7, 0xe6, 0x44, 0xd1, 0x5d, 0x99, 0x29, 0x45, 0xc9, 0x9a, 0x2a, 0x45,
		0xf8, 0xcf, 0x18, 0x85, 0xc0, 0x22, 0x08, 0x31, 0xe7, 0x20, 0xa6, 0x88, 0xe6, 0xc5, 0x66, 0x7b,
		0xf5, 0xce, 0x76, 0xda, 0x31, 0xfb, 0x5a, 0xe3, 0x07, 0x66, 0xe8, 0x14, 0x97, 0x49, 0x6b, 0x6c,
		0xbc, 0xb0, 0x26, 0x6c, 0xec, 0xec, 0x9d, 0x1a, 0x94, 0x57, 0x71, 0x49, 0x1f, 0xa1, 0xd9, 0x13,
		0x54, 0x69, 0x2e, 0x67, 0xce, 0x7c, 0x6a, 0x81, 0xcd, 0x5b, 0x65, 0x6e, 0xb8, 0xdc, 0xb1, 0xc3,
		0x98, 0x1b, 0x2e, 0x1f, 0xec, 0x91, 0x5b, 0x1c, 0xc6, 0xe0, 0xf8, 0xc7, 0x63, 0x73, 0x54, 0xe3,
		0xec, 0x26, 0xe0, 0xfa, 0x75, 0xd6, 0x5e, 0x0e, 0xb2, 0xdf, 0xc6, 0xdb, 0xab, 0x82, 0xed, 0x1d,
		0x9b, 0x77, 0x6c, 0xde, 0xb1, 0xf9, 0x47, 0xc6, 0xe6, 0x5f, 0xb8, 0xac, 0xdf, 0x26, 0x98, 0xbc,
		0xc2, 0xde, 0x99, 0x73, 0x77, 0x7d, 0xb9, 0x1d, 0x5b, 0xf7, 0x15, 0xbb, 0x8d, 0x23, 0x9c, 0x94,
		0x83, 0x53, 0x73, 0x74, 0xe1, 0xdf, 0x0a, 0x02, 0x98, 0x80, 0x17, 0x95, 0xa5, 0xcf, 0x46, 0x78,
		0x89, 0xda, 0x53, 0xa8, 0xc9, 0x04, 0xa4, 0xa7, 0xe3, 0x0b, 0x4b, 0x48, 0xa9, 0xa7, 0xe1, 0x7e,
		0x43, 0x3a, 0xc3, 0x88, 0x72, 0x20, 0xba, 0x8a, 0x1c, 0xa3, 0xe1, 0x62, 0x05, 0x24, 0x99, 0xcc,
		0xbe, 0x31, 0x74, 0xb1, 0x06, 0x8d, 0x74, 0x31, 0x8b, 0x87, 0x1a, 0xb3, 0xd8, 0x6f, 0x01, 0x8a,
		0x3b, 0x44, 0x5e, 0xa9, 0xa3, 0xc4, 0x1d, 0xe8, 0x6a, 0x23, 0x5d, 0x1d, 0xce, 0x39, 0x6d, 0xb2,
		0x0d, 0xf0, 0xb0, 0x21, 0x59, 0x6a, 0x09, 0x3c, 0x14, 0x0b, 0x46, 0xf1, 0xe4, 0x31, 0xc2, 0xb3,
		0x1a, 0x84, 0x66, 0xd9, 0x91, 0xdd, 0x49, 0x52, 0x2b, 0xf2, 0x48, 0x5d, 0x78, 0x7c, 0x47, 0xd1,
		0x11, 0x8d, 0xe1, 0x77, 0xf0, 0xad, 0x4a, 0xce, 0x67, 0xfb, 0xc5, 0x7b, 0x58, 0xf1, 0x8c, 0xe2,
		0xfb, 0x3b, 0xc8, 0x56, 0x13, 0x54, 0xe4, 0xc0, 0x5a, 0x95, 0x8a, 0x1d, 0x15, 0x93, 0xcc, 0x0c,
		0x90, 0x59, 0xae, 0xf2, 0xd1, 0x7a, 0xe5, 0xa3, 0x92, 0xb3, 0x59, 0x56, 0xf4, 0xe8, 0xd7, 0xad,
		0x44, 0x69, 0x96, 0xbe, 0xa9, 0x3b, 0x52, 0x95, 0xe6, 0x6f, 0x6e, 0x6b, 0x5c, 0xb5, 0xc9, 0x86,
		0xfd, 0x65, 0xbe, 0xda, 0xfe, 0xbf, 0x15, 0x6d, 0xb2, 0x5d, 0x2a, 0xd7, 0xee, 0x54, 0x2e, 0x46,
		0x29, 0xf6, 0x85, 0x8d, 0x83, 0x63, 0x39, 0xc4, 0xce, 0xc9, 0x21, 0xa9, 0x23, 0xe6, 0x79, 0xbc,
		0xe5, 0x05, 0xc4, 0xf3, 0xcf, 0x01, 0xbb, 0xa1, 0xce, 0xaf, 0xe0, 0xb0, 0x90, 0x35, 0xbc, 0xd6,
		0xfb, 0x68, 0x3e, 0x8c, 0xb8, 0xca, 0x25, 0xb1, 0x3d, 0x1c, 0x2b, 0xe3, 0xec, 0x4e, 0xc8, 0xcf,
		0x88, 0x0b, 0xf8, 0x44, 0xd9, 0x0d, 0xd5, 0xf9, 0xc3, 0x39, 0x2c, 0xf2, 0x0d, 0xe2, 0x60, 0x3c,
		0xad, 0x3b, 0x2e, 0x8f, 0xe7, 0xb8, 0x04, 0x48, 0x60, 0x0f, 0xd1, 0xc0, 0x93, 0x14, 0xd3, 0x74,
		0xac, 0xc7, 0xba, 0xea, 0xf3, 0x70, 0x18, 0xfc, 0x75, 0xf6, 0xc5, 0x93, 0x1f, 0x83, 0xf4, 0xe3,
		0x9d, 0xfe, 0xb8, 0x28, 0x7c, 0x1c, 0x0d, 0x87, 0xdd, 0xe1, 0x30, 0xf8, 0xdb, 0xf1, 0xb7, 0x47,
		0xbf, 0x7f, 0xfe, 0x30, 0x1c, 0xfe, 0x6d, 0x38, 0xf4, 0xae, 0x0a, 0x57, 0x1c, 0x77, 0x5a, 0xa2,
		0xf6, 0x36, 0xa6, 0xf3, 0xed, 0xd2, 0xa6, 0x4c, 0x94, 0xbe, 0xdf, 0x36, 0xf7, 0x2e, 0xb5, 0xd0,
		0xfa, 0xb4, 0x5d, 0x63, 0x52, 0xa0, 0x66, 0x79, 0x69, 0xdd, 0x8e, 0x79, 0x1b, 0xdb, 0x00, 0x19,
		0xb2, 0x2a, 0x97, 0xd5, 0x7f, 0x17, 0x95, 0x92, 0x02, 0x36, 0x43, 0x84, 0x96, 0xc1, 0x13, 0x5c,
		0x25, 0xb8, 0x56, 0x55, 0x82, 0x1b, 0x9c, 0x7f, 0xf5, 0x70, 0x4a, 0xc1, 0xed, 0xae, 0x6f, 0x64,
		0x24, 0x92, 0x3a, 0x47, 0x47, 0x47, 0xcb, 0xd6, 0x03, 0x1f, 0xaf, 0x8e, 0x8a, 0x7d, 0x08, 0xae,
		0x8e, 0xff, 0xea, 0x9d, 0x3c, 0xef, 0x7f, 0x39, 0xfe, 0x76, 0xf9, 0xfd, 0xd5, 0x70, 0xd8, 0x3d,
		0x7e, 0x56, 0x65, 0xd4, 0xb7, 0xc7, 0x9f, 0x87, 0xc3, 0x6e, 0xa7, 0x7e, 0x6d, 0x3b, 0x93, 0xce,
		0x7c, 0xdb, 0x58, 0x73, 0x2b, 0x7b, 0xf3, 0xbd, 0xa7, 0x01, 0x8e, 0x42, 0xb4, 0x70, 0x2d, 0xf9,
		0x56, 0xd5, 0x01, 0xa3, 0x9e, 0x7c, 0x05, 0x05, 0xc0, 0xbc, 0x29, 0x5f, 0xe2, 0x02, 0x2f, 0x69,
		0xcd, 0xb7, 0x31, 0xca, 0xb0, 0xa1, 0x41, 0x9f, 0x6a, 0x55, 0x97, 0xb5, 0xae, 0x03, 0x0f, 0xa6,
		0x38, 0xc2, 0x6b, 0x89, 0x92, 0x1c, 0x50, 0x84, 0x21, 0x24, 0x9f, 0x30, 0x20, 0x08, 0xc9, 0x28,
		0x42, 0xd1, 0x42, 0xb5, 0xc4, 0x8b, 0x70, 0x0e, 0xde, 0x90, 0x94, 0xf6, 0x52, 0x49, 0x95, 0x0b,
		0x35, 0x42, 0xe5, 0x67, 0x46, 0xba, 0xd3, 0x5e, 0x52, 0x92, 0xe8, 0xa9, 0xbe, 0xea, 0x29, 0x10,
		0xca, 0x05, 0xa2, 0x3e, 0xe6, 0x1a, 0xe7, 0xa0, 0xba, 0xdb, 0x21, 0x55, 0x6b, 0x28, 0x44, 0x22,
		0x6b, 0xb8, 0xc7, 0x97, 0x7d, 0xf4, 0x74, 0xbc, 0x67, 0x48, 0x55, 0x3b, 0xba, 0x19, 0x52, 0x60,
		0x07, 0x55, 0x9f, 0xe8, 0x66, 0x8a, 0x29, 0xa4, 0xcf, 0xb1, 0xf4, 0xf1, 0x62, 0xde, 0x1d, 0xd2,
		0x7f, 0xc8, 0xd7, 0xb9, 0xc1, 0x7a, 0x7a, 0x22, 0x00, 0x15, 0xd0, 0xd3, 0x72, 0x6e, 0x04, 0x79,
		0xcc, 0x9e, 0x7e, 0x18, 0x14, 0x72, 0xb6, 0xa9, 0xab, 0x94, 0x6a, 0x85, 0x37, 0xa4, 0xf9, 0x9b,
		0x0b, 0x06, 0x28, 0x1a, 0x11, 0x81, 0x22, 0x12, 0x92, 0x70, 0x01, 0x88, 0x73, 0x32, 0xa1, 0x29,
		0xf4, 0x02, 0x09, 0x88, 0x62, 0xba, 0x41, 0x7d, 0xdf, 0x4f, 0x2b, 0xba, 0x59, 0x0b, 0x5b, 0xd1,
		0xcd, 0x5c, 0x2b, 0x3a, 0x57, 0xef, 0xd8, 0xb5, 0xa2, 0x6b, 0xb7, 0x47, 0xc7, 0xc1, 0x76, 0x0f,
		0xe3, 0xd1, 0x71, 0xad, 0xe8, 0xf6, 0x69, 0xc5, 0x54, 0xb7, 0x66, 0x2c, 0x4c, 0xb8, 0x4a, 0xa6,
		0xdc, 0xda, 0x92, 0xb8, 0x56, 0x74, 0xcd, 0x38, 0x25, 0x5d, 0x2b, 0x3a, 0xd7, 0x8a, 0xce, 0x09,
		0x2c, 0x53, 0x81, 0xe5, 0x5a, 0xd1, 0x39, 0x99, 0xb6, 0x3f, 0x99, 0xe6, 0x5a, 0xd1, 0xed, 0x2b,
		0x4c, 0xe5, 0x5a, 0xd1, 0x55, 0x0a, 0xce, 0xa5, 0x19, 0x03, 0xf9, 0x7f, 0xd4, 0x69, 0x4b, 0xf7,
		0x46, 0xce, 0xf0, 0x31, 0xff, 0xb7, 0x6b, 0x50, 0xe7, 0x3c, 0x19, 0xfb, 0x0f, 0xda, 0xb9, 0xce,
		0x4d, 0xf7, 0x2b, 0x5e, 0xe7, 0x1a, 0xd4, 0xa5, 0x9c, 0xcd, 0x35, 0xa8, 0x73, 0x6c, 0xce, 0xb1,
		0xb9, 0x07, 0xca, 0xe6, 0x5c, 0x83, 0x3a, 0x38, 0x50, 0xbb, 0x24, 0xf0, 0x40, 0x6c, 0xea, 0x97,
		0x44, 0xb8, 0x50, 0x0d, 0x86, 0xd4, 0xa5, 0xf2, 0x5f, 0x5d, 0x78, 0x85, 0xd2, 0x56, 0x44, 0x53,
		0xc4, 0x8b, 0xe1, 0xce, 0x21, 0x5d, 0x8f, 0x77, 0xb6, 0xa2, 0x23, 0xcb, 0xec, 0x1e, 0x62, 0xb7,
		0x66, 0x0f, 0xb5, 0x23, 0x4b, 0x0e, 0xe6, 0x97, 0x16, 0x0e, 0x40, 0x13, 0x0c, 0x1e, 0xcc, 0xa7,
		0x0b, 0x4e, 0x7c, 0x14, 0x6a, 0xea, 0x62, 0x74, 0x37, 0xfa, 0xaf, 0x55, 0xde, 0xc2, 0x9d, 0x14,
		0x76, 0x4f, 0xbd, 0x85, 0xbb, 0x28, 0xb0, 0x19, 0x6f, 0xa1, 0xab, 0x75, 0xbc, 0x5d, 0xf6, 0xb9,
		0x5a, 0xc7, 0xeb, 0xee, 0xbf, 0xf3, 0x73, 0xe7, 0xfe, 0x6b, 0x20, 0xf6, 0xe3, 0x4a, 0x4a, 0xba,
		0x18, 0x50, 0xab, 0xb8, 0xba, 0x8b, 0xeb, 0x3c, 0x6e, 0xc6, 0xee, 0x4a, 0x4a, 0x36, 0xc5, 0xd9,
		0x5d, 0x49, 0x49, 0xc7, 0xe6, 0x1d, 0x9b, 0x77, 0x6c, 0xde, 0x95, 0x94, 0x7c, 0xb8, 0x4c, 0x3e,
		0x57, 0x33, 0xdf, 0x9c, 0xc7, 0xe7, 0x07, 0xd9, 0xb1, 0xf8, 0x4b, 0xe0, 0xf3, 0x90, 0x08, 0xa1,
		0x1b, 0x7b, 0x43, 0x40, 0xae, 0x49, 0x80, 0x8b, 0x5d, 0xaf, 0x58, 0x5a, 0xca, 0x85, 0x27, 0x0d,
		0xaf, 0x8a, 0x4d, 0x9e, 0x7b, 0x40, 0xa8, 0x6e, 0x4d, 0x5e, 0x6c, 0x69, 0x4d, 0x59, 0xd6, 0x17,
		0x80, 0xfc, 0x47, 0x55, 0x1a, 0x2b, 0x7d, 0x32, 0x5d, 0x78, 0xcd, 0xe4, 0xac, 0x97, 0x35, 0xb1,
		0xbc, 0x72, 0x5e, 0x25, 0xe7, 0x55, 0x72, 0x5e, 0x25, 0x27, 0x95, 0x5c, 0x07, 0xad, 0x46, 0xa4,
		0x52, 0x52, 0xa3, 0xd3, 0xae, 0xd2, 0x31, 0xb7, 0x94, 0x45, 0xb9, 0x3a, 0x6c, 0x9e, 0x14, 0x25,
		0x1c, 0xab, 0x2c, 0x40, 0x14, 0x86, 0x3a, 0xa3, 0x30, 0x9e, 0xcb, 0x2b, 0x70, 0x90, 0xa4, 0xf2,
		0x01, 0xa3, 0x3a, 0xac, 0x25, 0xbf, 0xd5, 0x89, 0x77, 0x2b, 0x01, 0xae, 0xb9, 0xda, 0x4b, 0x1f,
		0x85, 0x43, 0x2a, 0x4d, 0x97, 0xb4, 0xec, 0x80, 0x2a, 0xf8, 0xa9, 0xc3, 0x5d, 0x6f, 0x91, 0x98,
		0xe2, 0x48, 0x37, 0x45, 0x8a, 0x39, 0xa1, 0x13, 0xc0, 0x34, 0x9e, 0x01, 0x51, 0x12, 0x4c, 0x7f,
		0x81, 0x28, 0xbc, 0x56, 0x31, 0x0d, 0xb1, 0xd0, 0x37, 0xb9, 0x21, 0x61, 0x08, 0xc8, 0xf7, 0xf1,
		0x5c, 0x00, 0xa2, 0x8b, 0x21, 0x4d, 0x7f, 0x56, 0xe9, 0x7d, 0x72, 0xe0, 0x08, 0x71, 0x1c, 0x00,
		0x1b, 0x8f, 0x93, 0x94, 0x45, 0xf9, 0xb8, 0x4f, 0x93, 0x02, 0x08, 0x42, 0xe5, 0xf9, 0xe4, 0x40,
		0x66, 0x62, 0x31, 0xbf, 0x1f, 0x49, 0x3e, 0x4e, 0x5e, 0x1d, 0x46, 0x5e, 0xa5, 0x74, 0x62, 0x59,
		0x15, 0xd9, 0x44, 0x6c, 0xa5, 0x94, 0xfa, 0x3d, 0xe2, 0x16, 0x5b, 0x64, 0x53, 0xbe, 0xbc, 0xc8,
		0x80, 0xb9, 0xb1, 0x88, 0xb4, 0x13, 0x93, 0xeb, 0x8f, 0xe5, 0xf5, 0x7b, 0xbd, 0x49, 0x67, 0x1f,
		0xf2, 0xa7, 0xe6, 0x53, 0xb5, 0xf1, 0xa1, 0x5a, 0xf8, 0x4c, 0x03, 0xef, 0xbc, 0x8d, 0x4f, 0xd5,
		0xc6, 0x87, 0x3a, 0x6b, 0x25, 0xa5, 0x9f, 0xb5, 0xf1, 0xa1, 0xda, 0xb8, 0x7d, 0xc6, 0x55, 0xbe,
		0xed, 0xf4, 0xc2, 0xab, 0x3d, 0xcb, 0x31, 0xa3, 0xbc, 0x80, 0xbc, 0x19, 0x93, 0x47, 0xfd, 0x9b,
		0x41, 0xc8, 0x2a, 0xe7, 0x09, 0x64, 0x93, 0x18, 0xe5, 0x0b, 0x18, 0x68, 0xc2, 0x35, 0x6b, 0xdf,
		0xba, 0xdc, 0x8a, 0xcc, 0x6e, 0xb0, 0xc9, 0xad, 0xa8, 0x58, 0xf8, 0x76, 0x3d, 0xad, 0xa2, 0x76,
		0x09, 0xdc, 0x62, 0xbd, 0x79, 0xe3, 0x92, 0x68, 0xd9, 0x80, 0x07, 0x54, 0x18, 0xed, 0x51, 0x83,
		0xeb, 0xcc, 0xc1, 0xc7, 0xe6, 0x99, 0xf9, 0x0e, 0x85, 0xdc, 0xb2, 0x64, 0x8b, 0x9e, 0x2b, 0x8e,
		0x96, 0xbf, 0xb0, 0x72, 0x4a, 0x7c, 0xf5, 0x54, 0xf8, 0x7d, 0xd4, 0x40, 0xdb, 0xc2, 0x8b, 0x5d,
		0x25, 0xb4, 0x9a, 0xfa, 0xc3, 0x81, 0x2a, 0xa1, 0x6d, 0xd0, 0x0f, 0x2c, 0xaa, 0xa2, 0xad, 0xa9,
		0x04, 0x26, 0xf5, 0xd1, 0xae, 0xf1, 0x94, 0xf8, 0x1b, 0x1a, 0xe2, 0x2c, 0xcb, 0x24, 0x24, 0x17,
		0x94, 0x55, 0x45, 0x53, 0xb8, 0x7a, 0x36, 0x86, 0xe4, 0x7a, 0x7e, 0x88, 0xda, 0x5d, 0xa2, 0xef,
		0xb7, 0xaf, 0x78, 0x97, 0x7c, 0xa8, 0xa6, 0xaa, 0x77, 0x99, 0xa8, 0x61, 0xc6, 0x9a, 0xd7, 0x25,
		0x6c, 0xd7, 0xbd, 0x92, 0x5d, 0xd3, 0x2e, 0x68, 0x05, 0x79, 0x61, 0x63, 0x78, 0xff, 0xfe, 0xf5,
		0x4b, 0x5d, 0xdb, 0x8e, 0x4f, 0x59, 0x1c, 0x06, 0x30, 0x8f, 0xd8, 0x6c, 0x2e, 0xd4, 0x25, 0xef,
		0x5f, 0x83, 0x60, 0x30, 0x45, 0xd7, 0x18, 0xd0, 0x90, 0xfe, 0x84, 0x29, 0x8e, 0x90, 0xc0, 0x7a,
		0xc8, 0x28, 0x16, 0x62, 0x7b, 0xa6, 0xed, 0x21, 0x15, 0xb9, 0xcd, 0x04, 0xd2, 0x72, 0x4d, 0x6e,
		0x23, 0x01, 0xed, 0x5b, 0x95, 0x8b, 0x63, 0x12, 0xd4, 0xd5, 0xdf, 0xcc, 0xa5, 0x6d, 0xcf, 0xfb,
		0x1a, 0x79, 0xe3, 0x4b, 0xef, 0xc7, 0xab, 0xbf, 0x5e, 0x7c, 0xf1, 0xf2, 0xff, 0x3c, 0xb3, 0xf9,
		0x67, 0x7f, 0xf0, 0xa5, 0xb3, 0xa7, 0xf4, 0xa4, 0x1b, 0x1c, 0x79, 0xfe, 0x94, 0x11, 0x1f, 0x9b,
		0xa4, 0x29, 0xe5, 0xae, 0x36, 0xad, 0x9d, 0xa7, 0x2f, 0xd7, 0x25, 0x1b, 0x6f, 0x70, 0x04, 0x2a,
		0x22, 0x02, 0x5e, 0x31, 0x9a, 0x93, 0x5c, 0x44, 0x28, 0x27, 0x01, 0x56, 0x2c, 0xb6, 0xe4, 0x54,
		0x9d, 0xbb, 0x53, 0xb5, 0xff, 0x53, 0x55, 0x9a, 0x7d, 0xa4, 0xda, 0xea, 0x45, 0xc4, 0xf7, 0x7c,
		0x93, 0x90, 0x43, 0xb6, 0xae, 0xc5, 0x61, 0x76, 0x61, 0xc4, 0x57, 0xc9, 0x58, 0x4d, 0x4d, 0x38,
		0x80, 0xcd, 0x72, 0x7b, 0x1b, 0xdd, 0x9c, 0xdd, 0x65, 0x8c, 0x6d, 0x37, 0x3d, 0xdd, 0xd3, 0x20,
		0xdb, 0x4e, 0x7a, 0x6b, 0xc6, 0x3b, 0x59, 0x46, 0x87, 0xd9, 0x85, 0x23, 0xc5, 0x98, 0x17, 0xf6,
		0xc1, 0xaf, 0x74, 0xa0, 0xe1, 0xfb, 0xaf, 0xd0, 0xe4, 0xf7, 0x7a, 0x74, 0x56, 0x66, 0x16, 0xd9,
		0xf4, 0xf3, 0xdc, 0x9d, 0x4c, 0x59, 0x99, 0x40, 0xab, 0x10, 0x6a, 0x45, 0x82, 0xad, 0x4a, 0xb8,
		0xb5, 0x09, 0xb8, 0x36, 0x21, 0x57, 0x27, 0x68, 0x3b, 0xf7, 0xfd, 0x17, 0x53, 0xba, 0x32, 0x24,
		0xf4, 0x6c, 0x80, 0x8f, 0xe6, 0xc8, 0x27, 0x62, 0x51, 0xbd, 0xc9, 0x60, 0x36, 0x83, 0xe5, 0x8a,
		0x6d, 0x28, 0x18, 0x37, 0x4a, 0x8f, 0x41, 0xc5, 0x29, 0xcd, 0x60, 0x10, 0xb5, 0x4f, 0x44, 0x9d,
		0x93, 0x51, 0xf3, 0x84, 0xd4, 0x3d, 0x29, 0x8d, 0x9d, 0x98, 0xc6, 0x4e, 0x4e, 0xfd, 0x13, 0x64,
		0x77, 0x92, 0x2a, 0xc4, 0xf3, 0xc0, 0xb2, 0xb8, 0x9d, 0xbd, 0x71, 0x51, 0x6e, 0x74, 0x10, 0x2a,
		0xfa, 0xcf, 0xab, 0x10, 0x4a, 0x72, 0x26, 0x9e, 0x57, 0x18, 0x6a, 0x87, 0x62, 0xb4, 0x77, 0x3e,
		0x37, 0xe2, 0x94, 0x2e, 0xf5, 0xe0, 0xf6, 0x4e, 0xea, 0xcd, 0x53, 0x17, 0xf1, 0x57, 0xdf, 0xdf,
		0xdb, 0x10, 0x09, 0x57, 0x76, 0x86, 0x97, 0x2e, 0xf1, 0xf3, 0xf3, 0xf3, 0xaf, 0xce, 0x1f, 0xee,
		0x32, 0x3f, 0x39, 0xcc, 0xa8, 0xab, 0x16, 0xf4, 0x1d, 0x9e, 0x21, 0x81, 0x23, 0x82, 0xc2, 0xea,
		0xea, 0x40, 0x36, 0x43, 0x3d, 0x75, 0x20, 0xd5, 0x88, 0xd3, 0xe9, 0xd2, 0xde, 0x11, 0x37, 0x58,
		0x9a, 0xfa, 0x8c, 0x67, 0x09, 0x67, 0x88, 0x2a, 0x4c, 0x26, 0xd6, 0x3a, 0xb3, 0xea, 0xfb, 0x80,
		0x51, 0x30, 0xa4, 0x6c, 0x0c, 0x99, 0xeb, 0xe0, 0x86, 0x88, 0x29, 0x48, 0x53, 0x91, 0x03, 0xd2,
		0x59, 0x08, 0xa9, 0xbb, 0x80, 0xc3, 0xb5, 0xbc, 0x0b, 0x27, 0xb3, 0x79, 0x98, 0x5c, 0x47, 0x19,
		0xfc, 0x19, 0xa3, 0x50, 0x79, 0xfd, 0xb8, 0xd3, 0x40, 0x9c, 0x06, 0xd2, 0x16, 0x0d, 0xa4, 0xbe,
		0x16, 0x91, 0x3b, 0x28, 0x35, 0x54, 0x89, 0xfe, 0x59, 0x85, 0xb1, 0xaf, 0x68, 0x3c, 0xab, 0x4e,
		0x2b, 0xef, 0xd8, 0x6f, 0x3a, 0x7d, 0xb0, 0x8e, 0xc8, 0xea, 0xf4, 0xe4, 0x1a, 0x30, 0x31, 0x35,
		0xaa, 0x8c, 0xbf, 0x75, 0x96, 0xbe, 0x2a, 0x6b, 0x40, 0xc4, 0x94, 0xc4, 0x33, 0xaf, 0xda, 0x4a,
		0x66, 0x73, 0x0d, 0xf2, 0x73, 0xcd, 0x59, 0xb8, 0x98, 0xe1, 0xa8, 0xf3, 0xe4, 0x80, 0xba, 0x40,
		0xe7, 0x1d, 0x7b, 0x4d, 0x45, 0xbd, 0x65, 0xcd, 0xaf, 0x85, 0xb5, 0x6e, 0xbc, 0x71, 0xa6, 0x74,
		0x25, 0xb6, 0xf6, 0x71, 0x36, 0x9a, 0x4d, 0xef, 0xf4, 0x05, 0xf4, 0x0e, 0x24, 0xbf, 0xbf, 0xdc,
		0x6d, 0xab, 0x77, 0x53, 0xcf, 0x9b, 0x19, 0x34, 0x6b, 0x6d, 0xdc, 0x86, 0x50, 0xac, 0xc0, 0x5c,
		0xf4, 0x13, 0x6f, 0xfe, 0x69, 0xe2, 0x45, 0x3d, 0xcd, 0xbb, 0xf8, 0x4f, 0x0b, 0x7e, 0xda, 0x53,
		0x3b, 0x1f, 0x19, 0x6c, 0x0c, 0xe0, 0xbe, 0x93, 0xf7, 0xfc, 0x41, 0xcd, 0xfe, 0xf1, 0xdf, 0xfa,
		0x96, 0x1f, 0x13, 0x5d, 0xa1, 0xd3, 0x50, 0x82, 0x8c, 0x09, 0x96, 0x24, 0x7b, 0xb1, 0x19, 0x13,
		0x2c, 0xb2, 0x77, 0x17, 0xae, 0x8c, 0xaf, 0xe6, 0x35, 0x7c, 0x23, 0xc7, 0x16, 0x7d, 0x86, 0xab,
		0x61, 0x91, 0xa4, 0x8a, 0x5b, 0x12, 0x16, 0x49, 0x15, 0x22, 0xe7, 0x59, 0x74, 0x9e, 0xc5, 0xbd,
		0x7b, 0x16, 0x15, 0x65, 0x9b, 0x15, 0xa3, 0xd8, 0x6e, 0x4c, 0x2c, 0xe7, 0xa8, 0x67, 0x4e, 0xbc,
		0x9b, 0x62, 0x5d, 0xa6, 0x22, 0x29, 0x3a, 0xa7, 0x26, 0xee, 0xc2, 0xab, 0x5b, 0x24, 0x15, 0x7f,
		0xdd, 0x80, 0xee, 0xa9, 0xea, 0x5d, 0xaa, 0x7e, 0x79, 0x0a, 0x2c, 0x82, 0xa7, 0xe3, 0x88, 0x51,
		0xf1, 0x14, 0xb0, 0xf0, 0xbb, 0xce, 0x0e, 0x70, 0x76, 0xc0, 0xc3, 0xb1, 0x03, 0x8c, 0x6b, 0x71,
		0x6c, 0x95, 0x08, 0x2f, 0x2a, 0x8c, 0xb5, 0xac, 0xd5, 0xd1, 0x56, 0x7f, 0x62, 0xdf, 0xf9, 0x13,
		0xf7, 0xed, 0x4f, 0x1c, 0xf4, 0x9c, 0x33, 0xf1, 0x21, 0x38, 0x13, 0x95, 0xf4, 0x56, 0x06, 0x41,
		0x5d, 0x15, 0x40, 0x4f, 0x52, 0x4f, 0x07, 0x50, 0x33, 0x41, 0xa5, 0x99, 0x9c, 0x38, 0x77, 0xe2,
		0xbc, 0xbd, 0xe2, 0xdc, 0x05, 0x07, 0x2b, 0x4b, 0x1a, 0x17, 0x1c, 0xdc, 0xbb, 0x30, 0x77, 0xc1,
		0xc1, 0x56, 0xcb, 0xf3, 0x46, 0x9d, 0x04, 0x49, 0x8e, 0x8d, 0xb5, 0xd9, 0x6e, 0x97, 0x3e, 0x9c,
		0x67, 0x05, 0x76, 0x69, 0xc4, 0x79, 0x0a, 0xaf, 0x9d, 0x4e, 0x9c, 0x4d, 0x66, 0x95, 0x56, 0x7c,
		0x8f, 0xfc, 0xb5, 0x95, 0x9c, 0x94, 0xe6, 0x6e, 0xdb, 0x14, 0x88, 0xab, 0xdc, 0x98, 0x8d, 0x39,
		0x6f, 0x6b, 0xe1, 0x44, 0x2d, 0x17, 0xbb, 0x81, 0x45, 0xee, 0xec, 0xa1, 0x1a, 0x13, 0xf1, 0xb1,
		0x25, 0x9e, 0x3a, 0x1b, 0x61, 0x07, 0xa5, 0x7e, 0x4d, 0x05, 0x8e, 0x28, 0x0a, 0xe1, 0x07, 0x36,
		0x1b, 0xc5, 0x5c, 0x39, 0xa0, 0x5f, 0xd1, 0x09, 0xa1, 0x0e, 0x4c, 0xed, 0xc0, 0xd4, 0xd0, 0xf1,
		0xe3, 0x91, 0xa2, 0x72, 0x4b, 0x84, 0xe9, 0x12, 0x59, 0x5a, 0x1c, 0x5f, 0x2d, 0x48, 0xa2, 0xe9,
		0x11, 0x38, 0xf9, 0x8f, 0x6d, 0xd8, 0xa3, 0xe7, 0xc2, 0x1e, 0x2e, 0xec, 0x51, 0x01, 0xf6, 0x69,
		0x6f, 0xd1, 0x55, 0xb7, 0xe4, 0x2a, 0x58, 0x70, 0x15, 0x2d, 0xb7, 0x0a, 0xf6, 0x69, 0x1d, 0x4b,
		0xad, 0xae, 0x85, 0xd6, 0x98, 0xc9, 0x50, 0xdf, 0x54, 0xa8, 0x60, 0x89, 0xd5, 0xb2, 0xc0, 0x9a,
		0xb0, 0xbc, 0xda, 0xb4, 0x7c, 0x7b, 0xb2, 0x7c, 0xae, 0x0e, 0x09, 0x17, 0x50, 0x42, 0xc8, 0x9b,
		0x33, 0x4e, 0xac, 0x34, 0xf9, 0x1c, 0x72, 0xab, 0x38, 0x41, 0x2d, 0x59, 0x98, 0xce, 0xb2, 0xad,
		0xef, 0x1b, 0x46, 0x63, 0x40, 0x21, 0xa3, 0x93, 0x02, 0x68, 0x40, 0x55, 0x77, 0x26, 0x3c, 0xa9,
		0x6f, 0x39, 0x9f, 0x63, 0x14, 0x01, 0xd2, 0x29, 0xce, 0x1c, 0xcd, 0x30, 0x84, 0xf8, 0x1a, 0x87,
		0x19, 0xbe, 0x12, 0x71, 0x0c, 0x98, 0x46, 0x82, 0x60, 0xae, 0xaa, 0x44, 0x4f, 0xf1, 0x90, 0x8e,
		0x89, 0xd4, 0x15, 0x59, 0x2c, 0xe6, 0xb1, 0x70, 0xb2, 0xd8, 0xc9, 0x62, 0x5b, 0x59, 0x5c, 0x5d,
		0xae, 0x56, 0x03, 0x3e, 0x56, 0x01, 0x3c, 0x56, 0x03, 0x3a, 0xd6, 0x03, 0x38, 0x6a, 0x60, 0xa3,
		0x42, 0x2b, 0x54, 0x71, 0x02, 0x2b, 0x40, 0xe3, 0x8c, 0x04, 0x55, 0xc6, 0x2a, 0x00, 0x63, 0x84,
		0x91, 0x25, 0x6a, 0xd1, 0xda, 0x47, 0x5e, 0x19, 0xa5, 0x98, 0x2c, 0x4b, 0x25, 0xf9, 0xa5, 0x16,
		0xa5, 0x52, 0xc0, 0x57, 0x2f, 0xc9, 0x05, 0x0c, 0xee, 0xd6, 0x6b, 0xd7, 0x88, 0xec, 0x1a, 0xc7,
		0x38, 0x2c, 0x4b, 0xf0, 0xdf, 0x7a, 0xf0, 0xf2, 0x83, 0xab, 0xc9, 0xac, 0x1f, 0x63, 0x1c, 0xaa,
		0x94, 0xff, 0xdd, 0x19, 0xff, 0x15, 0xa1, 0x6d, 0xe7, 0x4e, 0xae, 0x38, 0xb9, 0x62, 0x0d, 0x6d,
		0x0b, 0x08, 0xe6, 0x92, 0xae, 0x6d, 0xca, 0x24, 0xaf, 0xed, 0x72, 0x7e, 0x92, 0x7a, 0x81, 0xed,
		0x97, 0x6a, 0x26, 0xa8, 0x32, 0x93, 0x99, 0x1f, 0xae, 0xf6, 0x71, 0xa8, 0x73, 0x2c, 0x6a, 0x1e,
		0x8f, 0xba, 0xc7, 0xa4, 0xb1, 0xe3, 0xd2, 0xd8, 0xb1, 0xa9, 0x7f, 0x7c, 0x2a, 0x9a, 0x56, 0xb6,
		0x54, 0x4a, 0xa2, 0x6a, 0x1b, 0x3d, 0x43, 0xb7, 0xde, 0x88, 0x30, 0x2f, 0x39, 0x21, 0x73, 0x1c,
		0xf9, 0xb8, 0x46, 0x92, 0x42, 0xa1, 0x0d, 0xce, 0x86, 0x79, 0x2b, 0xae, 0xfe, 0x06, 0x84, 0xe9,
		0x0c, 0xdd, 0x92, 0x59, 0x3c, 0x83, 0x64, 0x66, 0x60, 0x63, 0x58, 0xde, 0x4f, 0xd9, 0x45, 0xda,
		0x8e, 0x53, 0xbd, 0x74, 0x74, 0x8b, 0x80, 0xaa, 0x77, 0xaf, 0x86, 0x48, 0xa9, 0x7d, 0x80, 0x9b,
		0x38, 0xc8, 0x0d, 0x1d, 0xe8, 0xa6, 0x0e, 0x76, 0xe3, 0x07, 0xbc, 0xf1, 0x83, 0xde, 0xdc, 0x81,
		0xaf, 0x76, 0xf0, 0x6b, 0x38, 0xb2, 0xa0, 0x66, 0xea, 0x7c, 0x75, 0xdb, 0x6f, 0xa7, 0x8f, 0xf5,
		0x45, 0x1d, 0x7a, 0xb3, 0x53, 0x1d, 0x1b, 0x74, 0xc1, 0xd6, 0x77, 0xc9, 0x36, 0xea, 0xa2, 0x6d,
		0xda, 0x65, 0xbb, 0x37, 0x1f, 0x64, 0xf3, 0x3e, 0xc9, 0x86, 0x4e, 0x46, 0x63, 0x2e, 0xdf, 0xad,
		0x5b, 0x61, 0x5c, 0xbe, 0xf6, 0x21, 0x6d, 0xc6, 0x93, 0xbb, 0x19, 0x7d, 0xd5, 0xce, 0x3c, 0x43,
		0x5b, 0x9b, 0xac, 0x1a, 0xde, 0x24, 0x1b, 0x5f, 0x09, 0x12, 0x91, 0xe2, 0x0f, 0x4e, 0x73, 0xfe,
		0x82, 0xd3, 0xbc, 0x81, 0xd4, 0x02, 0x34, 0xf3, 0x04, 0x71, 0x16, 0x12, 0x8a, 0x6b, 0x9a, 0x7d,
		0xc5, 0x69, 0xea, 0x19, 0x7e, 0x3f, 0x25, 0x73, 0x9d, 0xfe, 0x8a, 0x45, 0xc4, 0x9c, 0x05, 0xe8,
		0x2c, 0xc0, 0x07, 0x64, 0x01, 0x26, 0x46, 0x94, 0x87, 0xc5, 0x14, 0x51, 0x16, 0x36, 0x63, 0xfe,
		0xad, 0x4e, 0xda, 0xa8, 0xed, 0x97, 0xda, 0x7d, 0x68, 0x82, 0x21, 0xb9, 0xc1, 0x66, 0xa3, 0xaf,
		0x0b, 0xb8, 0x3b, 0xe9, 0xc2, 0xab, 0x17, 0xe7, 0xf0, 0x0d, 0xbc, 0x38, 0xff, 0xbf, 0xce, 0x08,
		0x74, 0x46, 0xe0, 0x43, 0x37, 0x02, 0x9d, 0x01, 0xe7, 0x0c, 0x38, 0x67, 0xc0, 0x39, 0x03, 0xce,
		0x19, 0x70, 0x95, 0x00, 0x61, 0xcc, 0x17, 0x88, 0x62, 0x6f, 0x56, 0x07, 0x52, 0x97, 0x32, 0xd0,
		0xdc, 0x5c, 0xcd, 0xe8, 0x3f, 0x6f, 0x08, 0x55, 0x7e, 0xef, 0xcb, 0x7f, 0xbe, 0x86, 0x5f, 0xd4,
		0xe4, 0xf0, 0x16, 0x89, 0x6a, 0x29, 0xe6, 0x4e, 0xb1, 0x71, 0x8a, 0x8d, 0xf3, 0x6e, 0x3b, 0xe5,
		0xa8, 0xb5, 0xca, 0xd1, 0x8b, 0x73, 0xa7, 0x1d, 0xb5, 0x45, 0x3b, 0xfa, 0xfa, 0xcc, 0x29, 0x47,
		0x0f, 0x4d, 0x39, 0x7a, 0x24, 0xde, 0xed, 0xa2, 0x1f, 0xb8, 0x05, 0xfe, 0xed, 0xb4, 0x5c, 0x62,
		0x45, 0xbf, 0x76, 0x95, 0xba, 0x9a, 0xab, 0x7a, 0xe4, 0x2f, 0x72, 0x0e, 0x90, 0xab, 0xe4, 0xbc,
		0xd8, 0xfb, 0x52, 0x08, 0x9d, 0x17, 0xfb, 0x60, 0x5e, 0x6c, 0x75, 0x24, 0x3c, 0x75, 0xe8, 0x2b,
		0x95, 0xc1, 0xdb, 0x7c, 0xc6, 0x72, 0x13, 0x36, 0x63, 0xbd, 0x2d, 0x4f, 0x9d, 0xc6, 0xd9, 0x2a,
		0xdf, 0xf4, 0x3f, 0x16, 0x41, 0xc4, 0x26, 0x98, 0x76, 0x87, 0xf4, 0xb5, 0x00, 0xc2, 0x61, 0x84,
		0xb9, 0x80, 0xb9, 0x12, 0x93, 0xbe, 0x2a, 0xbe, 0x3d, 0x21, 0xd7, 0x18, 0x90, 0xae, 0xaa, 0x27,
		0xa6, 0x48, 0x00, 0x9f, 0xb2, 0x9b, 0x5c, 0xf6, 0x87, 0xfc, 0xee, 0xa9, 0x1c, 0x87, 0xe9, 0x90,
		0xfa, 0x53, 0xc6, 0x31, 0xed, 0xc2, 0x7b, 0x4e, 0xe8, 0x04, 0x90, 0x2e, 0xb8, 0xbd, 0x80, 0xa7,
		0x72, 0xf4, 0xd3, 0xa4, 0xb2, 0xb7, 0x6a, 0x9c, 0x47, 0x99, 0x48, 0x66, 0xa6, 0x40, 0xa8, 0x88,
		0x89, 0x14, 0x9e, 0x30, 0x25, 0x54, 0xa8, 0x92, 0xde, 0x37, 0x53, 0xe2, 0xeb, 0x52, 0xde, 0x70,
		0x83, 0xe4, 0xe4, 0x72, 0x3a, 0xae, 0x32, 0xaa, 0x71, 0x70, 0x02, 0x9c, 0x50, 0x3f, 0x2b, 0xee,
		0x8d, 0x68, 0xa0, 0xaf, 0x44, 0x11, 0x06, 0x36, 0x23, 0x42, 0xe0, 0x60, 0x48, 0xc7, 0x11, 0x9b,
		0xa9, 0x87, 0xb4, 0xca, 0x43, 0x71, 0x16, 0xaa, 0xb3, 0x50, 0x9d, 0x85, 0xda, 0x08, 0xb5, 0x55,
		0x2e, 0x3e, 0xb8, 0x7a, 0xf6, 0xfa, 0x2f, 0x9c, 0x4a, 0xda, 0xa8, 0x4a, 0xaa, 0x55, 0x38, 0x57,
		0xc5, 0xda, 0x64, 0xb1, 0x1e, 0x51, 0xbd, 0x92, 0xac, 0x38, 0x48, 0xd5, 0x52, 0x25, 0x56, 0x2d,
		0x23, 0x0d, 0x5f, 0xa9, 0xd2, 0xab, 0x74, 0x6a, 0x34, 0x3a, 0x8d, 0x69, 0x20, 0xe7, 0x41, 0x51,
		0x44, 0xd0, 0xc4, 0xa0, 0xd5, 0xe9, 0xca, 0xf5, 0x66, 0xcd, 0x4e, 0xdf, 0x25, 0x6e, 0x08, 0x08,
		0xb0, 0x40, 0x24, 0xe4, 0x25, 0x3d, 0x4c, 0xfb, 0xae, 0x87, 0x69, 0x15, 0xe9, 0xdc, 0x70, 0x0f,
		0x53, 0x14, 0x09, 0xe2, 0xc7, 0x21, 0x12, 0x38, 0x30, 0xaf, 0xb8, 0x93, 0x1f, 0x64, 0x59, 0x74,
		0x87, 0x67, 0x3d, 0xa8, 0x73, 0x93, 0x7c, 0x5b, 0x3e, 0xcb, 0x18, 0xc5, 0xa1, 0x30, 0x72, 0xcb,
		0x76, 0x94, 0xab, 0x6a, 0xf7, 0x79, 0xbf, 0x32, 0xab, 0xf0, 0xd3, 0x73, 0x15, 0x7e, 0xea, 0x2b,
		0xa4, 0x87, 0xae, 0xf0, 0x63, 0xac, 0xec, 0x2d, 0xdb, 0x9f, 0x32, 0x16, 0x62, 0x64, 0x12, 0x4f,
		0xcc, 0x78, 0x57, 0x7f, 0x0f, 0x95, 0xaf, 0x44, 0xc2, 0x3f, 0x4d, 0xf3, 0x55, 0x97, 0x94, 0xb2,
		0x32, 0xd0, 0xee, 0x48, 0x2e, 0x3b, 0x54, 0xa7, 0xf3, 0x6c, 0x2c, 0xad, 0x90, 0xeb, 0x46, 0x45,
		0x28, 0x20, 0xf0, 0x19, 0x15, 0x88, 0x50, 0x1c, 0x0d, 0xe9, 0x14, 0x85, 0x63, 0x4f, 0x0e, 0xfe,
		0x24, 0x6d, 0xed, 0xc4, 0x58, 0x55, 0x3d, 0xe7, 0x47, 0x11, 0xbe, 0x26, 0x62, 0xd1, 0x1d, 0xd2,
		0xcb, 0x5c, 0xd7, 0xaa, 0x58, 0x1a, 0xc0, 0xca, 0x6c, 0x5e, 0xe9, 0x7f, 0xb5, 0xb4, 0xa2, 0xe7,
		0x11, 0xbb, 0x26, 0x01, 0x06, 0x4c, 0x59, 0x3c, 0x99, 0xe6, 0x7a, 0x5a, 0xe5, 0xa7, 0xf2, 0x11,
		0x4d, 0x1f, 0x03, 0x10, 0x5d, 0xc0, 0x7f, 0x5f, 0xfe, 0xeb, 0x27, 0xc0, 0x54, 0x10, 0xb1, 0x80,
		0x11, 0xa6, 0x18, 0x89, 0x29, 0x10, 0x21, 0xcd, 0x7d, 0xf9, 0x6b, 0x80, 0xe7, 0x62, 0x0a, 0x9e,
		0xea, 0x29, 0x71, 0xb2, 0x7c, 0xfc, 0x13, 0x55, 0x32, 0xa2, 0xdb, 0xcd, 0x7c, 0x05, 0x13, 0xc6,
		0x82, 0x82, 0xaf, 0x40, 0x39, 0x09, 0xd0, 0x32, 0x65, 0x57, 0x19, 0xe0, 0x63, 0x16, 0xcd, 0x90,
		0x80, 0x67, 0xc9, 0x9a, 0xcb, 0xeb, 0x66, 0xe8, 0x13, 0x96, 0xf7, 0xc3, 0x88, 0x13, 0x1c, 0x81,
		0x60, 0x43, 0x9a, 0xb4, 0xe0, 0x5f, 0xa4, 0xa3, 0x8c, 0xcc, 0x76, 0xc3, 0x28, 0x96, 0xe3, 0x3e,
		0x6d, 0xe4, 0x3e, 0xc6, 0xf5, 0xc5, 0xd4, 0x79, 0xe1, 0x76, 0x78, 0xec, 0xc2, 0x89, 0x4f, 0x07,
		0x57, 0xcb, 0x4c, 0x7f, 0x4d, 0xb5, 0x7b, 0x89, 0x08, 0x98, 0x22, 0x0e, 0x7a, 0x42, 0xcb, 0xfc,
		0xf3, 0x33, 0x97, 0x7f, 0xee, 0xf2, 0xcf, 0xad, 0xf3, 0xcf, 0x69, 0x3c, 0x1b, 0xe1, 0xc8, 0x4b,
		0x28, 0xae, 0x72, 0xc8, 0xa6, 0x38, 0x4d, 0xbd, 0xd0, 0x8d, 0x9e, 0x2b, 0x15, 0x81, 0x55, 0xa6,
		0x33, 0x57, 0x4f, 0xd7, 0x06, 0x0f, 0xec, 0x9c, 0x16, 0x57, 0xae, 0xfa, 0xbb, 0x0b, 0x2e, 0xb5,
		0xc4, 0xfb, 0xd7, 0x4c, 0xf5, 0xf7, 0x17, 0x35, 0x8a, 0xbf, 0x9f, 0x3f, 0xda, 0xe2, 0xef, 0xae,
		0x93, 0xcb, 0xe6, 0x68, 0x41, 0x93, 0xc5, 0xdf, 0x5d, 0xe1, 0xf7, 0x9a, 0xa3, 0xda, 0xd0, 0xc8,
		0x45, 0x89, 0x74, 0x4f, 0x54, 0x61, 0x55, 0x45, 0x7d, 0x5b, 0xcf, 0x51, 0xb3, 0x95, 0x9b, 0xb2,
		0x92, 0xab, 0xb6, 0x99, 0x76, 0xb2, 0xdc, 0xc9, 0xf2, 0x7d, 0xc9, 0xf2, 0x1a, 0x71, 0x56, 0xd7,
		0xdc, 0xb9, 0x91, 0xe6, 0xce, 0x5c, 0x60, 0x1c, 0xd6, 0x6e, 0xee, 0x1c, 0xc5, 0xa3, 0xd1, 0x3d,
		0xec, 0xc3, 0x9c, 0x3c, 0x76, 0xbd, 0x16, 0xcc, 0x7a, 0x05, 0x5d, 0xd3, 0xe4, 0x15, 0xc6, 0xb3,
		0xe7, 0x70, 0x73, 0x31, 0x58, 0x78, 0xba, 0xe2, 0x8d, 0x3e, 0xcd, 0xfb, 0xaa, 0x0e, 0x58, 0xf9,
		0xf1, 0x66, 0x8a, 0x71, 0x58, 0xd5, 0xbf, 0x96, 0x1f, 0x5c, 0xb1, 0xf2, 0x23, 0x8b, 0x94, 0xc7,
		0x57, 0xcf, 0xa4, 0x7c, 0x6d, 0xa5, 0x0e, 0x66, 0xc4, 0x31, 0x84, 0xe4, 0x13, 0x86, 0x67, 0x9e,
		0x06, 0xa1, 0x6d, 0xf0, 0x29, 0x43, 0xea, 0x52, 0x1e, 0xd2, 0x82, 0x4f, 0xb9, 0x3b, 0xa4, 0xaf,
		0x50, 0x8a, 0x2e, 0xf3, 0x11, 0x85, 0x29, 0x52, 0x38, 0xb4, 0x05, 0x2c, 0x9d, 0x1b, 0x21, 0x46,
		0x63, 0x9e, 0x73, 0x7d, 0x73, 0x60, 0x91, 0x72, 0x87, 0xf3, 0xd4, 0x5d, 0xae, 0xca, 0x24, 0xe3,
		0xd4, 0x33, 0xc8, 0x71, 0x38, 0x86, 0x80, 0x61, 0xae, 0x5c, 0xf2, 0x49, 0xd5, 0xe4, 0xe4, 0xae,
		0x33, 0x16, 0xe0, 0x10, 0x3c, 0x18, 0xc5, 0x42, 0xbe, 0x23, 0x85, 0x05, 0x8b, 0x81, 0x0b, 0x14,
		0x09, 0xe0, 0x73, 0xec, 0x93, 0xf1, 0x82, 0xd0, 0xc9, 0x90, 0x22, 0x0a, 0x44, 0xe0, 0x19, 0x8c,
		0x70, 0xc8, 0xe8, 0x84, 0xd0, 0x89, 0x7c, 0x05, 0x46, 0xf5, 0x2d, 0x4e, 0xe4, 0x9b, 0xf1, 0xa9,
		0x72, 0xfa, 0xe3, 0x5b, 0x3f, 0x8c, 0x03, 0xac, 0xae, 0xe6, 0xa0, 0x70, 0x6e, 0x0a, 0xd1, 0xc1,
		0xbb, 0x43, 0xfa, 0xff, 0xa6, 0x24, 0xd4, 0x23, 0xf8, 0xf2, 0xd5, 0x38, 0x53, 0x65, 0x9b, 0xd1,
		0x58, 0x2d, 0x9f, 0xaa, 0xd3, 0xec, 0xb3, 0xd9, 0x8c, 0x51, 0x35, 0xab, 0xc2, 0xfc, 0x09, 0xa1,
		0x97, 0x2c, 0x20, 0x5c, 0x10, 0x3a, 0x89, 0x09, 0x9f, 0x0e, 0x29, 0xce, 0x56, 0x69, 0xb4, 0x90,
		0x33, 0xc9, 0x67, 0xa2, 0x92, 0x5a, 0x43, 0xc4, 0xa7, 0xea, 0x1f, 0x68, 0x26, 0x3f, 0xc6, 0x2c,
		0x02, 0x7f, 0x4a, 0xc2, 0x20, 0xc2, 0xd4, 0xf9, 0x45, 0x9d, 0x5f, 0xf4, 0x50, 0x7e, 0x51, 0xcd,
		0x30, 0x6a, 0xfb, 0x45, 0x93, 0x69, 0x9a, 0xf2, 0x8b, 0x26, 0x6c, 0x2c, 0x09, 0x0c, 0x12, 0x0e,
		0xb3, 0x54, 0x5d, 0x3c, 0x51, 0x50, 0x55, 0xce, 0xe4, 0xa9, 0x53, 0xd5, 0xd5, 0x47, 0x18, 0xfc,
		0x50, 0x72, 0x8a, 0x25, 0xdc, 0x75, 0x48, 0x09, 0xcf, 0x80, 0xae, 0xce, 0xe8, 0x71, 0x46, 0x8f,
		0x33, 0x7a, 0x9c, 0xf3, 0xb3, 0x8e, 0x67, 0xce, 0x75, 0xbe, 0xdc, 0xbb, 0xf3, 0xb3, 0x4a, 0x97,
		0x74, 0xe7, 0xfd, 0x6c, 0x9d, 0xf7, 0x33, 0xb1, 0x64, 0x82, 0x88, 0x5c, 0x63, 0x5a, 0x5d, 0xab,
		0x28, 0x4e, 0xd3, 0xb0, 0x56, 0xa1, 0x67, 0x95, 0xc6, 0x04, 0xf6, 0x51, 0xac, 0xb2, 0x6f, 0x08,
		0x57, 0xb0, 0x04, 0x04, 0x81, 0x0e, 0xad, 0x4a, 0xed, 0xc2, 0x57, 0x86, 0xc2, 0x28, 0x4b, 0x87,
		0xd9, 0x8e, 0xd8, 0xd1, 0xb6, 0x8f, 0x90, 0xe6, 0x01, 0x17, 0xca, 0xdc, 0xc8, 0xd4, 0x15, 0x18,
		0x13, 0x1c, 0x06, 0xd2, 0xf0, 0xc9, 0x01, 0x98, 0x34, 0xa0, 0x49, 0x59, 0x24, 0x88, 0x6b, 0xbb,
		0xe3, 0x86, 0x68, 0x70, 0xc4, 0x12, 0x92, 0x34, 0x52, 0xbd, 0x67, 0x38, 0x19, 0x85, 0xea, 0x1e,
		0x9f, 0x28, 0xbb, 0xd9, 0xa6, 0xe2, 0x00, 0x19, 0x67, 0x0f, 0x7e, 0x2d, 0xcf, 0x13, 0x87, 0x1b,
		0xbc, 0xcc, 0xe3, 0x71, 0xe1, 0x65, 0xa7, 0x9d, 0x39, 0xed, 0xcc, 0x69, 0x58, 0x4e, 0xc3, 0x72,
		0x1a, 0x96, 0xd3, 0xb0, 0x5a, 0xa9, 0x61, 0x3d, 0x24, 0x07, 0x7c, 0xde, 0x99, 0xfd, 0xa0, 0x13,
		0xbf, 0x76, 0xaf, 0xc3, 0xfd, 0xcc, 0x00, 0x33, 0xca, 0xc4, 0x02, 0xe3, 0xb6, 0xe5, 0xef, 0xe5,
		0x74, 0x3f, 0xa4, 0xb3, 0x99, 0x66, 0x94, 0x3d, 0xd9, 0xf1, 0xe6, 0x69, 0xdb, 0xfc, 0xb5, 0x16,
		0x6c, 0x9d, 0x57, 0xb7, 0x8a, 0x29, 0xad, 0xcb, 0xc1, 0x2d, 0xc9, 0x67, 0x39, 0xfd, 0xe8, 0x56,
		0x5c, 0x4c, 0x22, 0x16, 0xcf, 0x3d, 0x81, 0xb6, 0x25, 0xdb, 0x1a, 0x6b, 0x41, 0x05, 0x2d, 0x47,
		0x2f, 0x07, 0xe0, 0x5b, 0x34, 0x9b, 0x87, 0x98, 0x77, 0x4a, 0xde, 0x75, 0x45, 0x1b, 0xde, 0xdd,
		0xe9, 0x7f, 0xa5, 0xa3, 0xff, 0x06, 0x66, 0x5c, 0xa9, 0x73, 0xff, 0xee, 0x0e, 0xfd, 0xab, 0xbb,
		0x51, 0x42, 0x7f, 0xa6, 0x74, 0xb7, 0x61, 0xd1, 0x8d, 0x08, 0xac, 0xb8, 0xa0, 0xcb, 0xc5, 0xd4,
		0x7f, 0x25, 0x0f, 0xbb, 0xed, 0x21, 0x3b, 0x84, 0xff, 0x88, 0x3e, 0xe1, 0xb7, 0x8c, 0xad, 0xef,
		0xe8, 0xea, 0x83, 0x77, 0xf2, 0x3f, 0x15, 0x1e, 0xec, 0x25, 0xbe, 0xce, 0x4e, 0xfb, 0x97, 0x27,
		0x5f, 0xfe, 0x3f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x19, 0xfc, 0x1e,
		0xcc, 0x02, 0x5f, 0x02, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
func initΛEnumTypes(){
  ΛEnumTypes = map[string][]reflect.Type{
	"/switch-model/port/speeds": []reflect.Type{
		reflect.TypeOf((E_OnfSwitchTypes_Speed)(0)),
	},
	"/switch/port/speed": []reflect.Type{
		reflect.TypeOf((E_OnfSwitchTypes_Speed)(0)),
	},
	"/vehicle/power-choice/electric-case/battery/material": []reflect.Type{
		reflect.TypeOf((E_OnfTest1Choice_Vehicle_Battery_Material)(0)),
	},
	"/vehicle/power-choice/ice-case/engine-position": []reflect.Type{
		reflect.TypeOf((E_OnfTest1Choice_Vehicle_EnginePosition)(0)),
	},
	"/vehicle/under-carriage/traction-choice/tracks-case/track-type": []reflect.Type{
		reflect.TypeOf((E_OnfTest1Choice_Vehicle_UnderCarriage_TrackType)(0)),
	},
  }
}

