// Code generated by YGOT. DO NOTEDIT.
/*
Package api is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /go/pkg/mod/github.com/openconfig/ygot@v0.13.1/genutil/names.go
using the following YANG input files:
	- onf-test1-extra@2021-04-01.yang
	- onf-test1@2018-02-20.yang
Imported modules were sourced from:
	- /config-model/yang/...
*/
package api

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Device{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	Cont1A	*OnfTest1_Cont1A	`path:"cont1a" module:"onf-test1"`
	Cont1BState	*OnfTest1_Cont1BState	`path:"cont1b-state" module:"onf-test1"`
	LeafAtTopLevel	*string	`path:"leafAtTopLevel" module:"onf-test1"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfTest1_Cont1A represents the /onf-test1/cont1a YANG schema element.
type OnfTest1_Cont1A struct {
	Cont2A	*OnfTest1_Cont1A_Cont2A	`path:"cont2a" module:"onf-test1"`
	Leaf1A	*string	`path:"leaf1a" module:"onf-test1"`
	List2A	map[string]*OnfTest1_Cont1A_List2A	`path:"list2a" module:"onf-test1"`
	List4	map[string]*OnfTest1_Cont1A_List4	`path:"list4" module:"onf-test1-extra"`
	List5	map[OnfTest1_Cont1A_List5_Key]*OnfTest1_Cont1A_List5	`path:"list5" module:"onf-test1-extra"`
}

// IsYANGGoStruct ensures that OnfTest1_Cont1A implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTest1_Cont1A) IsYANGGoStruct() {}

// OnfTest1_Cont1A_List5_Key represents the key for list List5 of element /onf-test1/cont1a.
type OnfTest1_Cont1A_List5_Key struct {
	Key1	string	`path:"key1"`
	Key2	uint8	`path:"key2"`
}

// NewList2A creates a new entry in the List2A list of the
// OnfTest1_Cont1A struct. The keys of the list are populated from the input
// arguments.
func (t *OnfTest1_Cont1A) NewList2A(Name string) (*OnfTest1_Cont1A_List2A, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.List2A == nil {
		t.List2A = make(map[string]*OnfTest1_Cont1A_List2A)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.List2A[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list List2A", key)
	}

	t.List2A[key] = &OnfTest1_Cont1A_List2A{
		Name: &Name,
	}

	return t.List2A[key], nil
}

// NewList4 creates a new entry in the List4 list of the
// OnfTest1_Cont1A struct. The keys of the list are populated from the input
// arguments.
func (t *OnfTest1_Cont1A) NewList4(Id string) (*OnfTest1_Cont1A_List4, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.List4 == nil {
		t.List4 = make(map[string]*OnfTest1_Cont1A_List4)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.List4[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list List4", key)
	}

	t.List4[key] = &OnfTest1_Cont1A_List4{
		Id: &Id,
	}

	return t.List4[key], nil
}

// NewList5 creates a new entry in the List5 list of the
// OnfTest1_Cont1A struct. The keys of the list are populated from the input
// arguments.
func (t *OnfTest1_Cont1A) NewList5(Key1 string, Key2 uint8) (*OnfTest1_Cont1A_List5, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.List5 == nil {
		t.List5 = make(map[OnfTest1_Cont1A_List5_Key]*OnfTest1_Cont1A_List5)
	}

	key := OnfTest1_Cont1A_List5_Key{
		Key1: Key1,
		Key2: Key2,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.List5[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list List5", key)
	}

	t.List5[key] = &OnfTest1_Cont1A_List5{
		Key1: &Key1,
		Key2: &Key2,
	}

	return t.List5[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_Cont1A) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTest1_Cont1A"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTest1_Cont1A) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfTest1_Cont1A_Cont2A represents the /onf-test1/cont1a/cont2a YANG schema element.
type OnfTest1_Cont1A_Cont2A struct {
	Leaf2A	*uint8	`path:"leaf2a" module:"onf-test1"`
	Leaf2B	*float64	`path:"leaf2b" module:"onf-test1"`
	Leaf2C	*string	`path:"leaf2c" module:"onf-test1"`
	Leaf2D	*float64	`path:"leaf2d" module:"onf-test1"`
	Leaf2E	[]int16	`path:"leaf2e" module:"onf-test1"`
	Leaf2F	Binary	`path:"leaf2f" module:"onf-test1"`
	Leaf2G	*bool	`path:"leaf2g" module:"onf-test1"`
}

// IsYANGGoStruct ensures that OnfTest1_Cont1A_Cont2A implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTest1_Cont1A_Cont2A) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_Cont1A_Cont2A) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTest1_Cont1A_Cont2A"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTest1_Cont1A_Cont2A) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfTest1_Cont1A_List2A represents the /onf-test1/cont1a/list2a YANG schema element.
type OnfTest1_Cont1A_List2A struct {
	Name	*string	`path:"name" module:"onf-test1"`
	RangeMax	*uint8	`path:"range-max" module:"onf-test1"`
	RangeMin	*uint8	`path:"range-min" module:"onf-test1"`
	Ref2D	*float64	`path:"ref2d" module:"onf-test1"`
	TxPower	*uint16	`path:"tx-power" module:"onf-test1"`
}

// IsYANGGoStruct ensures that OnfTest1_Cont1A_List2A implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTest1_Cont1A_List2A) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfTest1_Cont1A_List2A struct, which is a YANG list entry.
func (t *OnfTest1_Cont1A_List2A) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_Cont1A_List2A) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTest1_Cont1A_List2A"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTest1_Cont1A_List2A) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfTest1_Cont1A_List4 represents the /onf-test1/cont1a/list4 YANG schema element.
type OnfTest1_Cont1A_List4 struct {
	Id	*string	`path:"id" module:"onf-test1-extra"`
	Leaf4B	*string	`path:"leaf4b" module:"onf-test1-extra"`
	List4A	map[OnfTest1_Cont1A_List4_List4A_Key]*OnfTest1_Cont1A_List4_List4A	`path:"list4a" module:"onf-test1-extra"`
}

// IsYANGGoStruct ensures that OnfTest1_Cont1A_List4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTest1_Cont1A_List4) IsYANGGoStruct() {}

// OnfTest1_Cont1A_List4_List4A_Key represents the key for list List4A of element /onf-test1/cont1a/list4.
type OnfTest1_Cont1A_List4_List4A_Key struct {
	Fkey1	string	`path:"fkey1"`
	Fkey2	uint8	`path:"fkey2"`
}

// NewList4A creates a new entry in the List4A list of the
// OnfTest1_Cont1A_List4 struct. The keys of the list are populated from the input
// arguments.
func (t *OnfTest1_Cont1A_List4) NewList4A(Fkey1 string, Fkey2 uint8) (*OnfTest1_Cont1A_List4_List4A, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.List4A == nil {
		t.List4A = make(map[OnfTest1_Cont1A_List4_List4A_Key]*OnfTest1_Cont1A_List4_List4A)
	}

	key := OnfTest1_Cont1A_List4_List4A_Key{
		Fkey1: Fkey1,
		Fkey2: Fkey2,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.List4A[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list List4A", key)
	}

	t.List4A[key] = &OnfTest1_Cont1A_List4_List4A{
		Fkey1: &Fkey1,
		Fkey2: &Fkey2,
	}

	return t.List4A[key], nil
}

// ΛListKeyMap returns the keys of the OnfTest1_Cont1A_List4 struct, which is a YANG list entry.
func (t *OnfTest1_Cont1A_List4) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_Cont1A_List4) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTest1_Cont1A_List4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTest1_Cont1A_List4) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfTest1_Cont1A_List4_List4A represents the /onf-test1/cont1a/list4/list4a YANG schema element.
type OnfTest1_Cont1A_List4_List4A struct {
	Displayname	*string	`path:"displayname" module:"onf-test1-extra"`
	Fkey1	*string	`path:"fkey1" module:"onf-test1-extra"`
	Fkey2	*uint8	`path:"fkey2" module:"onf-test1-extra"`
}

// IsYANGGoStruct ensures that OnfTest1_Cont1A_List4_List4A implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTest1_Cont1A_List4_List4A) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfTest1_Cont1A_List4_List4A struct, which is a YANG list entry.
func (t *OnfTest1_Cont1A_List4_List4A) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Fkey1 == nil {
		return nil, fmt.Errorf("nil value for key Fkey1")
	}

	if t.Fkey2 == nil {
		return nil, fmt.Errorf("nil value for key Fkey2")
	}

	return map[string]interface{}{
		"fkey1": *t.Fkey1,
		"fkey2": *t.Fkey2,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_Cont1A_List4_List4A) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTest1_Cont1A_List4_List4A"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTest1_Cont1A_List4_List4A) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfTest1_Cont1A_List5 represents the /onf-test1/cont1a/list5 YANG schema element.
type OnfTest1_Cont1A_List5 struct {
	Key1	*string	`path:"key1" module:"onf-test1-extra"`
	Key2	*uint8	`path:"key2" module:"onf-test1-extra"`
	Leaf5A	*string	`path:"leaf5a" module:"onf-test1-extra"`
}

// IsYANGGoStruct ensures that OnfTest1_Cont1A_List5 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTest1_Cont1A_List5) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfTest1_Cont1A_List5 struct, which is a YANG list entry.
func (t *OnfTest1_Cont1A_List5) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Key1 == nil {
		return nil, fmt.Errorf("nil value for key Key1")
	}

	if t.Key2 == nil {
		return nil, fmt.Errorf("nil value for key Key2")
	}

	return map[string]interface{}{
		"key1": *t.Key1,
		"key2": *t.Key2,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_Cont1A_List5) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTest1_Cont1A_List5"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTest1_Cont1A_List5) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfTest1_Cont1BState represents the /onf-test1/cont1b-state YANG schema element.
type OnfTest1_Cont1BState struct {
	Leaf2D	*uint16	`path:"leaf2d" module:"onf-test1"`
	List2B	map[uint8]*OnfTest1_Cont1BState_List2B	`path:"list2b" module:"onf-test1"`
}

// IsYANGGoStruct ensures that OnfTest1_Cont1BState implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTest1_Cont1BState) IsYANGGoStruct() {}

// NewList2B creates a new entry in the List2B list of the
// OnfTest1_Cont1BState struct. The keys of the list are populated from the input
// arguments.
func (t *OnfTest1_Cont1BState) NewList2B(Index uint8) (*OnfTest1_Cont1BState_List2B, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.List2B == nil {
		t.List2B = make(map[uint8]*OnfTest1_Cont1BState_List2B)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.List2B[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list List2B", key)
	}

	t.List2B[key] = &OnfTest1_Cont1BState_List2B{
		Index: &Index,
	}

	return t.List2B[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_Cont1BState) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTest1_Cont1BState"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTest1_Cont1BState) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfTest1_Cont1BState_List2B represents the /onf-test1/cont1b-state/list2b YANG schema element.
type OnfTest1_Cont1BState_List2B struct {
	Index	*uint8	`path:"index" module:"onf-test1"`
	Leaf3C	*string	`path:"leaf3c" module:"onf-test1"`
}

// IsYANGGoStruct ensures that OnfTest1_Cont1BState_List2B implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTest1_Cont1BState_List2B) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfTest1_Cont1BState_List2B struct, which is a YANG list entry.
func (t *OnfTest1_Cont1BState_List2B) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTest1_Cont1BState_List2B) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTest1_Cont1BState_List2B"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTest1_Cont1BState_List2B) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }



var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0x5b, 0x6f, 0xdb, 0x38,
		0x16, 0x7e, 0xcf, 0xaf, 0x38, 0xd0, 0xd3, 0xee, 0xa2, 0x9e, 0xc8, 0x8a, 0x9d, 0xb6, 0x01, 0xf6,
		0xc1, 0xbd, 0xed, 0x02, 0xd3, 0x76, 0x8a, 0x4e, 0x30, 0xc0, 0x6e, 0x37, 0x58, 0xd0, 0xd2, 0xb1,
		0x43, 0x44, 0xa6, 0xbc, 0x22, 0x95, 0xc6, 0x18, 0xe4, 0xbf, 0x2f, 0x44, 0x29, 0xbe, 0xea, 0x72,
		0x28, 0xd9, 0x8e, 0x1d, 0xf3, 0x65, 0x26, 0xb5, 0x29, 0x59, 0xe4, 0xb9, 0x7d, 0xfc, 0xf8, 0x89,
		0xfc, 0xf3, 0x0c, 0x00, 0xc0, 0xf9, 0xca, 0x26, 0xe8, 0x5c, 0x81, 0x13, 0xe0, 0x3d, 0xf7, 0xd1,
		0x79, 0x95, 0x7d, 0xfa, 0x2b, 0x17, 0x81, 0x73, 0x05, 0xdd, 0xfc, 0x9f, 0xef, 0x23, 0x31, 0xe2,
		0x63, 0xe7, 0x0a, 0xdc, 0xfc, 0x83, 0x0f, 0x3c, 0x76, 0xae, 0x20, 0xbb, 0x85, 0xfe, 0xc0, 0x8f,
		0x84, 0xea, 0xb2, 0x95, 0xcf, 0x56, 0x6e, 0x9f, 0x7f, 0xff, 0x6a, 0xf5, 0xdb, 0x0f, 0x28, 0xfd,
		0x98, 0x4f, 0x15, 0x8f, 0x44, 0xda, 0xe8, 0xfa, 0x16, 0x41, 0x45, 0x53, 0x08, 0xf1, 0x1e, 0x43,
		0x48, 0x2f, 0x61, 0x5c, 0x60, 0xbc, 0x7e, 0xd5, 0xea, 0xc3, 0xcd, 0x3f, 0x5e, 0x7f, 0xc8, 0xf9,
		0x17, 0xdf, 0x62, 0x1c, 0xf1, 0x87, 0x8d, 0x67, 0x5b, 0x79, 0x3e, 0xd5, 0x5d, 0xfb, 0x15, 0xfd,
		0xed, 0xef, 0x51, 0x12, 0xfb, 0x58, 0x78, 0x65, 0xf6, 0x24, 0x38, 0xfb, 0x19, 0xc5, 0xe9, 0xc3,
		0x38, 0xd3, 0xec, 0x47, 0x5e, 0x15, 0x37, 0xfc, 0x27, 0x93, 0x83, 0x78, 0x9c, 0x4c, 0x50, 0x28,
		0xe7, 0x0a, 0x54, 0x9c, 0x60, 0x49, 0xc3, 0xa5, 0x56, 0xe9, 0x33, 0x6d, 0x34, 0x7a, 0x5c, 0xf9,
		0xe4, 0x71, 0x7d, 0x3c, 0xd7, 0xcc, 0xb2, 0x62, 0x1e, 0x8f, 0x95, 0x77, 0x64, 0xd9, 0x4c, 0x1e,
		0x2b, 0xeb, 0x45, 0x81, 0xb9, 0x3c, 0x11, 0xd4, 0x98, 0xab, 0xc6, 0x6c, 0xb5, 0xe6, 0xa3, 0x98,
		0x91, 0x66, 0x4e, 0xaa, 0x59, 0x8d, 0xcd, 0x6b, 0x6c, 0x66, 0xb2, 0xb9, 0x8b, 0xcd, 0x5e, 0x62,
		0xfe, 0x5a, 0x37, 0x98, 0x37, 0x08, 0x91, 0x8d, 0x2a, 0xdc, 0x61, 0x63, 0x38, 0xf3, 0xf6, 0x35,
		0x9d, 0x59, 0x73, 0x8f, 0xaf, 0xc9, 0x04, 0x63, 0xee, 0x43, 0x7a, 0x31, 0x70, 0x21, 0x79, 0x80,
		0xf0, 0xfe, 0xc9, 0x49, 0x80, 0x72, 0xbb, 0x11, 0x4b, 0x42, 0x3d, 0x34, 0x5e, 0x5d, 0xdb, 0xdc,
		0xb7, 0xdc, 0x9a, 0x66, 0x75, 0x3e, 0x66, 0xe2, 0x6b, 0x66, 0x3e, 0x67, 0xea, 0x7b, 0x8d, 0x7d,
		0xb0, 0xb1, 0x2f, 0x1a, 0xfb, 0x64, 0xb5, 0x6f, 0xd6, 0xf8, 0xe8, 0xfc, 0xd7, 0xae, 0x67, 0x53,
		0x34, 0x1b, 0xe7, 0x84, 0x0b, 0xf5, 0x86, 0x32, 0xd4, 0xb9, 0x53, 0xf4, 0x09, 0x4d, 0xbf, 0x33,
		0x31, 0x4e, 0x6f, 0xfe, 0x83, 0x34, 0x44, 0x34, 0xd3, 0xe9, 0x1b, 0x7f, 0xe1, 0x82, 0x6c, 0x6b,
		0x43, 0x6f, 0xde, 0xb8, 0xec, 0x0f, 0x16, 0x26, 0x58, 0x9e, 0x61, 0x4b, 0xaf, 0xfb, 0x14, 0x33,
		0x3f, 0x0d, 0xda, 0x0f, 0x7c, 0xcc, 0x95, 0x4c, 0x7f, 0x98, 0x7c, 0xfd, 0xe3, 0x2b, 0x83, 0xa1,
		0x60, 0x0f, 0x7b, 0x1f, 0x8a, 0x8b, 0x3d, 0x0e, 0xc5, 0xd9, 0x16, 0x07, 0xec, 0xd0, 0x3d, 0xcc,
		0xba, 0xd8, 0x62, 0x2c, 0x0e, 0xcf, 0xc7, 0x6a, 0x5b, 0xdd, 0xb4, 0x4a, 0xd9, 0xf8, 0xa0, 0x62,
		0xd6, 0x49, 0x84, 0x54, 0x6c, 0x18, 0x12, 0x93, 0x77, 0x8c, 0x23, 0x8c, 0x51, 0xf8, 0x3b, 0x49,
		0xb2, 0x4f, 0x95, 0xe1, 0xfb, 0xa7, 0xf7, 0x70, 0xe9, 0xf6, 0x5c, 0xc7, 0xc0, 0x65, 0x0c, 0xeb,
		0x71, 0x51, 0x5d, 0x5e, 0xf4, 0xcd, 0xd0, 0x13, 0x9a, 0x96, 0xe8, 0xc2, 0x52, 0x3d, 0xef, 0xfc,
		0xa1, 0x79, 0xd3, 0x59, 0x03, 0x3f, 0xcb, 0x10, 0xe7, 0xd0, 0x10, 0xa1, 0x0e, 0x0d, 0x11, 0xea,
		0x1f, 0x51, 0xa8, 0xd8, 0x18, 0x1b, 0x23, 0x54, 0x8b, 0x3a, 0x8f, 0x15, 0x75, 0x7e, 0x61, 0x22,
		0x60, 0x2a, 0x8a, 0x67, 0xf5, 0x70, 0xa9, 0x01, 0x42, 0x0d, 0xd0, 0xe7, 0x13, 0x16, 0x5e, 0xf6,
		0x0c, 0x50, 0x6a, 0xd7, 0x23, 0xb4, 0xdd, 0x28, 0x1d, 0x17, 0x16, 0xdb, 0x9a, 0x8e, 0xd8, 0x8b,
		0x01, 0x1e, 0x9e, 0xeb, 0xba, 0x7b, 0x1c, 0x8d, 0x43, 0x2f, 0x16, 0xbe, 0x61, 0xb1, 0xf0, 0x0d,
		0x8b, 0xc5, 0x77, 0x64, 0x01, 0x44, 0x22, 0x9c, 0xed, 0xad, 0x5c, 0x78, 0xb6, 0x5c, 0x1c, 0x2d,
		0x49, 0x21, 0x55, 0xcc, 0xc5, 0xd8, 0x24, 0xff, 0xbf, 0xd9, 0x55, 0x60, 0x04, 0x86, 0x81, 0x11,
		0x18, 0x06, 0xc6, 0x40, 0x44, 0xea, 0x16, 0x63, 0xc8, 0xab, 0x9e, 0x05, 0x52, 0x36, 0x32, 0x2c,
		0x38, 0xb2, 0xe0, 0xc8, 0x82, 0xa3, 0x03, 0x02, 0x47, 0x68, 0x58, 0x03, 0xd0, 0xb0, 0x06, 0x68,
		0x48, 0x14, 0x72, 0xa9, 0x6c, 0xf6, 0xb7, 0xd9, 0xbf, 0x6a, 0x9c, 0xb9, 0x50, 0xdd, 0x4b, 0x83,
		0xcc, 0xef, 0x1d, 0x6b, 0x0e, 0xef, 0x36, 0xcd, 0xe1, 0xed, 0xf3, 0x96, 0xfb, 0x92, 0xb2, 0xf8,
		0xa9, 0x91, 0xeb, 0x9f, 0xb9, 0x54, 0x03, 0xa5, 0x62, 0x5a, 0x58, 0x7d, 0xe1, 0xe2, 0x63, 0x88,
		0x69, 0xc0, 0x4b, 0xda, 0x30, 0xa7, 0x66, 0x5c, 0xba, 0xa2, 0xfb, 0xa6, 0xd7, 0xbb, 0x7c, 0xdd,
		0xeb, 0xb9, 0xaf, 0x2f, 0x5e, 0xbb, 0x6f, 0xfb, 0xfd, 0xee, 0x65, 0x97, 0xb2, 0x5c, 0xfa, 0x5b,
		0x1c, 0x60, 0x8c, 0xc1, 0xbb, 0x99, 0x73, 0x05, 0x22, 0x09, 0xc3, 0x5d, 0x95, 0xad, 0x91, 0x61,
		0xd9, 0x1a, 0x19, 0x96, 0xad, 0x21, 0x17, 0x2c, 0x5e, 0x9d, 0xd0, 0xfb, 0xb6, 0x70, 0xd9, 0xc2,
		0x55, 0x30, 0xce, 0x99, 0xab, 0x18, 0x54, 0xae, 0xb7, 0x84, 0xa6, 0x9f, 0x51, 0x8c, 0xd5, 0xed,
		0x4b, 0x99, 0x7e, 0x78, 0xb6, 0x72, 0x3d, 0xcf, 0x58, 0x1c, 0xfa, 0xec, 0x63, 0x6c, 0x98, 0xc6,
		0xc7, 0x86, 0x69, 0xfc, 0x5d, 0x14, 0x85, 0xc8, 0x84, 0x5d, 0xc7, 0xb3, 0x79, 0xbc, 0x3e, 0x8f,
		0x67, 0xbe, 0x62, 0x42, 0x3e, 0x75, 0x9b, 0xc6, 0x85, 0x91, 0x68, 0x73, 0x20, 0x44, 0xa4, 0x58,
		0xee, 0xd2, 0x15, 0xda, 0x4d, 0xe9, 0xdf, 0xe2, 0x84, 0x4d, 0x99, 0xae, 0x1b, 0xce, 0x79, 0x24,
		0x46, 0x1d, 0x85, 0x52, 0x75, 0xcf, 0x33, 0x89, 0xf5, 0x79, 0xa5, 0x84, 0x37, 0xbb, 0x83, 0x8a,
		0x13, 0x5f, 0x89, 0x7c, 0x40, 0x7e, 0x13, 0xa3, 0xeb, 0xf4, 0xfa, 0xff, 0xa6, 0x11, 0xd3, 0x1d,
		0xe8, 0xff, 0x79, 0x83, 0x62, 0xc3, 0x6d, 0xf6, 0xa8, 0xa0, 0x37, 0x3a, 0x86, 0xbb, 0x04, 0xb1,
		0x71, 0xde, 0x8e, 0x26, 0x36, 0xfe, 0x5c, 0x18, 0xdb, 0xe5, 0x97, 0x57, 0xc7, 0xb4, 0x55, 0x1b,
		0x6f, 0x4f, 0x6d, 0x5c, 0x1b, 0x83, 0xf4, 0x45, 0x91, 0xc5, 0x62, 0x48, 0x45, 0x1b, 0x22, 0x68,
		0xa2, 0xcd, 0x9e, 0x0c, 0x52, 0xa9, 0x11, 0x20, 0x98, 0x03, 0x81, 0x3e, 0xb1, 0x7d, 0x83, 0xfa,
		0xff, 0x48, 0x9b, 0xee, 0xed, 0xbc, 0x8b, 0x5d, 0x77, 0x87, 0x7d, 0x6c, 0x98, 0x7b, 0x6f, 0xda,
		0xe4, 0x2f, 0x2e, 0x49, 0x2f, 0x4b, 0xe4, 0xed, 0x68, 0xf9, 0x6b, 0x00, 0x92, 0x4f, 0xa6, 0x21,
		0x66, 0x2c, 0x69, 0x34, 0x4a, 0x27, 0x9a, 0x23, 0x3e, 0x4e, 0x62, 0x9d, 0xf2, 0x81, 0x2b, 0x9c,
		0x48, 0xfb, 0xe6, 0xc4, 0xc1, 0xbf, 0x39, 0x91, 0x57, 0x4d, 0x22, 0x9a, 0xd5, 0xad, 0xcd, 0xb0,
		0xec, 0xf5, 0x6d, 0xee, 0x22, 0x5c, 0xc2, 0x1d, 0xce, 0x30, 0x80, 0xe1, 0x0c, 0x28, 0xf7, 0xb1,
		0x20, 0xf6, 0x74, 0x40, 0x6c, 0x03, 0x75, 0xc1, 0xc9, 0xb1, 0x11, 0x3d, 0x4b, 0x46, 0x3c, 0x0d,
		0xc5, 0x1b, 0xcb, 0x45, 0x68, 0x0d, 0x3a, 0x13, 0x63, 0xec, 0x4c, 0x08, 0x06, 0x98, 0x07, 0xda,
		0xe2, 0x12, 0x43, 0x4d, 0x0c, 0x4c, 0xd8, 0x03, 0xdc, 0xa7, 0xe3, 0x0f, 0xa3, 0x28, 0x06, 0x75,
		0x8b, 0xa0, 0xef, 0x65, 0xb3, 0xb8, 0xcd, 0xe2, 0xf6, 0x45, 0x36, 0x62, 0xde, 0xb2, 0x7c, 0xf2,
		0x82, 0x4f, 0xee, 0xf7, 0x6d, 0x12, 0x5f, 0x4a, 0xe2, 0x04, 0x6f, 0x5c, 0x4f, 0xe2, 0x5c, 0x18,
		0x27, 0xf1, 0x7c, 0xca, 0xa6, 0x6f, 0x00, 0x2a, 0x02, 0x85, 0x52, 0x41, 0x9c, 0x84, 0x28, 0x81,
		0x0b, 0xf8, 0xd7, 0xe0, 0xeb, 0x3f, 0x7e, 0x81, 0x2f, 0x5c, 0xc0, 0x24, 0x91, 0x0a, 0x86, 0x08,
		0xff, 0x49, 0x5c, 0xf7, 0xc2, 0xff, 0x3b, 0x10, 0x0a, 0x86, 0x4d, 0xf4, 0xc7, 0x9a, 0xe8, 0x77,
		0xfb, 0xee, 0x88, 0x2d, 0x0a, 0xb6, 0x28, 0xd8, 0xa2, 0x60, 0x5a, 0x14, 0xd0, 0x48, 0xe6, 0x9e,
		0x35, 0x37, 0x2d, 0x06, 0xf3, 0xd7, 0x3c, 0xd3, 0x4a, 0x90, 0x29, 0xe5, 0xd3, 0x2a, 0x90, 0x42,
		0x7b, 0x8f, 0xd5, 0x6e, 0x7f, 0x62, 0x13, 0xff, 0x09, 0x22, 0xfc, 0xd4, 0x4b, 0x62, 0x1c, 0x99,
		0x10, 0x35, 0xaf, 0x09, 0x6d, 0xbf, 0x3d, 0x2d, 0xfe, 0xad, 0x2c, 0xf9, 0x9d, 0xe7, 0x6f, 0x6f,
		0xec, 0x20, 0xbe, 0xd4, 0x43, 0x67, 0x1a, 0xfd, 0xc4, 0x98, 0x1e, 0x62, 0xf3, 0x2b, 0x0c, 0xd9,
		0xcf, 0x98, 0x09, 0x39, 0xe1, 0x0a, 0x48, 0x17, 0xdb, 0x50, 0x3a, 0xad, 0xc9, 0xb2, 0x91, 0x72,
		0xf8, 0xd2, 0xbe, 0xfd, 0x71, 0xba, 0xc0, 0xe8, 0x94, 0xd4, 0x57, 0x46, 0x0b, 0x5c, 0xbf, 0xe2,
		0xac, 0x66, 0x61, 0x8a, 0xa6, 0x40, 0xa6, 0x2b, 0x8f, 0xd7, 0x14, 0xc7, 0x15, 0xb4, 0x3c, 0x4d,
		0x56, 0x5c, 0xd6, 0x33, 0x83, 0x5d, 0x49, 0x9c, 0x74, 0xbe, 0xbe, 0x0d, 0x01, 0xc1, 0x06, 0xc3,
		0x90, 0x33, 0x00, 0x40, 0xe5, 0x8d, 0x0b, 0x6a, 0x20, 0xb1, 0x42, 0xcc, 0xeb, 0xcf, 0x2d, 0x97,
		0xc0, 0x25, 0xb0, 0x8c, 0x84, 0x90, 0x8a, 0x29, 0x3d, 0xd6, 0xd4, 0x82, 0xd1, 0x60, 0xff, 0x93,
		0xe5, 0xea, 0x14, 0x2c, 0x3d, 0xbb, 0x41, 0x52, 0x68, 0xb3, 0xf3, 0xc9, 0x6a, 0xa9, 0x2a, 0xeb,
		0xfe, 0x96, 0xa2, 0x92, 0xa2, 0xb1, 0xf8, 0x18, 0xc7, 0x51, 0x3c, 0x98, 0x4e, 0xaf, 0xd9, 0xd8,
		0xdc, 0x7e, 0x19, 0xb7, 0xa4, 0x1d, 0x72, 0x3f, 0x16, 0xc3, 0xf4, 0x69, 0x3b, 0x6c, 0x3a, 0xed,
		0x28, 0x36, 0x7e, 0x16, 0x9b, 0x2d, 0x75, 0x79, 0xdf, 0x56, 0xfa, 0x82, 0x52, 0xb2, 0x31, 0x36,
		0x34, 0x93, 0x8e, 0xf0, 0x27, 0xae, 0x2f, 0x44, 0x29, 0x41, 0xdd, 0x32, 0x01, 0x51, 0x0c, 0xf8,
		0xbf, 0x84, 0x85, 0xe9, 0xbc, 0xd0, 0x24, 0xf0, 0xb7, 0x67, 0xcd, 0x49, 0xde, 0xad, 0x67, 0xb3,
		0xa6, 0xd1, 0xc8, 0x6c, 0xcb, 0xe8, 0xdb, 0x95, 0x06, 0xed, 0x58, 0x96, 0x59, 0x29, 0x16, 0x82,
		0x7a, 0x59, 0x66, 0x5a, 0x95, 0x5b, 0xca, 0x32, 0xb9, 0x54, 0x3d, 0x9a, 0xaa, 0xa9, 0x47, 0x16,
		0x35, 0x69, 0xa9, 0xca, 0x4f, 0xae, 0x6e, 0x81, 0x41, 0x3e, 0xdb, 0x05, 0x2e, 0x02, 0x7c, 0x38,
		0x0c, 0x2d, 0x13, 0x1e, 0xa3, 0x98, 0x09, 0xf7, 0xa6, 0x66, 0xe2, 0x06, 0xa4, 0x19, 0x37, 0x65,
		0xcc, 0x3e, 0x73, 0x71, 0xa7, 0xa9, 0x32, 0xed, 0xf9, 0x5a, 0xc3, 0x24, 0x8f, 0x63, 0x46, 0x8f,
		0x2f, 0x71, 0x4a, 0x8f, 0xa7, 0x47, 0x8f, 0xa9, 0xee, 0x55, 0x9e, 0x7d, 0x55, 0xf7, 0x2a, 0x73,
		0xc3, 0xf4, 0x2f, 0x9d, 0x62, 0x77, 0xf4, 0xae, 0x4b, 0xcf, 0x70, 0xcf, 0xba, 0xde, 0xb0, 0xc9,
		0x9b, 0xf6, 0x3d, 0x06, 0x91, 0xd0, 0x81, 0xd5, 0x63, 0x80, 0x4f, 0x93, 0x2b, 0x1b, 0x5b, 0x36,
		0xb6, 0xac, 0x44, 0xd0, 0x32, 0x66, 0x96, 0x31, 0x6b, 0x91, 0xc3, 0x75, 0x4e, 0x35, 0xc8, 0xe1,
		0x59, 0x7b, 0xd3, 0xb5, 0xc4, 0x39, 0x6c, 0xe6, 0x22, 0x05, 0xce, 0x73, 0x10, 0xed, 0xc1, 0x1d,
		0xce, 0x24, 0x30, 0x99, 0xbd, 0xcb, 0x18, 0xe3, 0x88, 0x9a, 0xd6, 0xbb, 0x36, 0xad, 0x1f, 0x5f,
		0x5a, 0xaf, 0x03, 0xe8, 0xf3, 0x86, 0x01, 0x97, 0xd3, 0x90, 0xcd, 0x48, 0x6f, 0x1f, 0x6c, 0x58,
		0x67, 0xf9, 0x62, 0xe2, 0x38, 0xac, 0x39, 0x6c, 0x3a, 0x95, 0xd7, 0xff, 0x60, 0x21, 0xe4, 0x77,
		0xd3, 0x78, 0x1e, 0x98, 0x52, 0x31, 0x1f, 0x26, 0x0a, 0x9f, 0xdc, 0x37, 0xe0, 0x23, 0xbd, 0x4a,
		0xae, 0x20, 0xd4, 0xa5, 0x22, 0x9b, 0xf6, 0x4b, 0xea, 0xef, 0x1a, 0xbe, 0x81, 0x44, 0x75, 0xea,
		0x26, 0xce, 0xdd, 0xd0, 0xc9, 0xdb, 0x10, 0x3b, 0xad, 0x9c, 0x7e, 0x2b, 0xcc, 0x4e, 0xb3, 0x20,
		0x30, 0x4c, 0xec, 0x44, 0x5b, 0x91, 0x31, 0x4f, 0x73, 0xec, 0xd3, 0x04, 0x03, 0x35, 0xc5, 0x42,
		0xe6, 0x98, 0xa8, 0x15, 0x36, 0x6a, 0x09, 0x0c, 0xda, 0x62, 0xa5, 0x6d, 0xe0, 0x84, 0x06, 0xd8,
		0xa9, 0x15, 0x86, 0xda, 0xf6, 0x90, 0xf5, 0x9f, 0x71, 0xc8, 0xce, 0x76, 0x38, 0xc0, 0xc7, 0xea,
		0xc1, 0xae, 0x75, 0xe1, 0x5d, 0x4f, 0x0b, 0x9e, 0xd1, 0x87, 0xc9, 0xad, 0x6f, 0xf6, 0xb8, 0xe8,
		0x34, 0xba, 0xc3, 0x59, 0xd7, 0x1c, 0xb1, 0x65, 0x97, 0x35, 0xc3, 0x6a, 0xa3, 0x28, 0x46, 0x3e,
		0x16, 0xe9, 0x44, 0x02, 0xba, 0xd0, 0x49, 0xe7, 0x10, 0x4f, 0x2c, 0x6c, 0x9f, 0x9d, 0x9b, 0xdc,
		0xd8, 0x82, 0x31, 0x0b, 0xc6, 0xda, 0x83, 0x31, 0x3a, 0xc9, 0xdb, 0x84, 0xec, 0xad, 0x26, 0x7d,
		0x51, 0xb3, 0xbe, 0x7d, 0xfd, 0x97, 0xf6, 0xfc, 0x3d, 0x87, 0xbe, 0xd7, 0x2c, 0xf4, 0xbd, 0x2d,
		0x84, 0xbe, 0x57, 0x14, 0xfa, 0x9e, 0x0d, 0x7d, 0x1b, 0xfa, 0x27, 0x19, 0xfa, 0xde, 0x9e, 0x54,
		0x07, 0xaf, 0x6a, 0x97, 0x92, 0xe7, 0xf5, 0x1d, 0x28, 0xa1, 0xfe, 0x12, 0xf7, 0x03, 0xad, 0x5b,
		0x0c, 0xa7, 0x29, 0x2e, 0xe6, 0xed, 0x29, 0xca, 0x8b, 0xde, 0x39, 0x89, 0xa8, 0x05, 0x9a, 0x0e,
		0xa3, 0x97, 0xfd, 0x77, 0xe0, 0xec, 0x53, 0xb2, 0x59, 0xba, 0xfe, 0xbe, 0x63, 0xc1, 0xa6, 0x99,
		0x4b, 0xb4, 0xd3, 0x70, 0x6e, 0x53, 0x6c, 0xd3, 0x6b, 0xa7, 0xb5, 0xe9, 0xb5, 0x95, 0xda, 0xf4,
		0x69, 0x52, 0x9b, 0x7e, 0x03, 0xa9, 0x4d, 0xb6, 0x4a, 0x60, 0x15, 0x36, 0x47, 0xa0, 0xb0, 0x21,
		0xcd, 0xff, 0xe6, 0xc3, 0x49, 0x98, 0x9d, 0xad, 0xfb, 0x85, 0xae, 0x24, 0x51, 0xbe, 0xf9, 0x7e,
		0x1f, 0x3a, 0x40, 0x22, 0x3f, 0xad, 0x18, 0x60, 0x8b, 0x80, 0xcd, 0x8a, 0x01, 0xac, 0x18, 0xc0,
		0x8a, 0x01, 0x5e, 0xa0, 0x18, 0x80, 0x34, 0x83, 0x5f, 0x4e, 0xde, 0x9e, 0x79, 0xf2, 0xf6, 0x56,
		0x92, 0xb7, 0x48, 0x26, 0xc3, 0x63, 0x79, 0xef, 0xd1, 0x26, 0xef, 0xfd, 0x24, 0x6f, 0xbb, 0x23,
		0x44, 0x5d, 0xba, 0xb2, 0x99, 0xbb, 0xe9, 0x1a, 0xd7, 0x4b, 0xde, 0x76, 0xbe, 0xcf, 0xcc, 0xa4,
		0xb8, 0x7d, 0x53, 0x19, 0x97, 0x88, 0x32, 0xaa, 0x75, 0x21, 0x82, 0xb1, 0x38, 0xdc, 0xa6, 0x72,
		0x8b, 0xc3, 0x2d, 0x0e, 0xb7, 0x38, 0x7c, 0x3f, 0x9c, 0xa8, 0x26, 0x3f, 0x2a, 0x70, 0xb7, 0xa5,
		0x46, 0x0b, 0xa9, 0xd1, 0x7e, 0x3b, 0x6a, 0xb4, 0x4f, 0xa6, 0x46, 0xcf, 0x2a, 0x7a, 0xe6, 0x0c,
		0x92, 0x71, 0x3a, 0x90, 0x18, 0x14, 0x66, 0xae, 0x1a, 0xea, 0x74, 0xb1, 0xd6, 0x43, 0xe5, 0x4f,
		0x83, 0x00, 0x18, 0xf8, 0x51, 0x32, 0x0d, 0x75, 0x9d, 0x16, 0xf8, 0x53, 0xd7, 0x6a, 0x09, 0x2a,
		0x82, 0xea, 0x3b, 0x59, 0x42, 0xf5, 0x80, 0x08, 0xd5, 0xea, 0xb7, 0x58, 0x0b, 0x29, 0xf6, 0x5e,
		0x73, 0x79, 0x3e, 0xf1, 0xad, 0x56, 0xa2, 0xab, 0x58, 0x38, 0x77, 0xc8, 0x70, 0xae, 0x6e, 0x9d,
		0xcd, 0xac, 0xa8, 0x98, 0x17, 0x97, 0xad, 0x14, 0x19, 0xb3, 0x62, 0xd3, 0x72, 0x92, 0x55, 0xb9,
		0xca, 0x55, 0x18, 0x8a, 0xfd, 0x16, 0xa1, 0x58, 0xb9, 0xea, 0x65, 0x23, 0xf0, 0xe5, 0x44, 0x60,
		0x1d, 0xaa, 0x3b, 0xcd, 0x40, 0x6c, 0x84, 0xb9, 0x6e, 0xd6, 0x30, 0x17, 0x61, 0x93, 0xa4, 0xd4,
		0xb7, 0x24, 0x0a, 0xbf, 0x9c, 0x1e, 0x24, 0xc0, 0x98, 0xeb, 0x68, 0x0a, 0x21, 0xde, 0x63, 0x08,
		0x5c, 0x42, 0x76, 0x43, 0xb5, 0x7d, 0x5c, 0x93, 0x3d, 0xe6, 0x2e, 0x91, 0x4d, 0x61, 0x3f, 0x5a,
		0xdb, 0xe8, 0xa6, 0x1a, 0x17, 0x57, 0x23, 0xfd, 0x3a, 0x84, 0x5f, 0x30, 0x1e, 0xd5, 0x98, 0x7e,
		0xb5, 0x3f, 0x8b, 0xa7, 0x5d, 0x7a, 0x2e, 0x47, 0xdf, 0x7a, 0xd8, 0xd1, 0xdb, 0x2b, 0x6d, 0x3c,
		0xd5, 0xdc, 0xea, 0x2b, 0xad, 0xd6, 0x7a, 0xb5, 0xb9, 0xb7, 0x36, 0xfa, 0x91, 0x08, 0x40, 0xcd,
		0x47, 0x78, 0x71, 0xf2, 0x6e, 0x07, 0xf4, 0xb6, 0x4e, 0x91, 0xc8, 0x0e, 0x4f, 0xd0, 0xf7, 0x5b,
		0xb0, 0x6c, 0xf2, 0x17, 0xf8, 0x18, 0x70, 0x05, 0x72, 0x36, 0x19, 0x46, 0x21, 0xc8, 0xdb, 0x28,
		0x09, 0x03, 0x10, 0x91, 0xde, 0x7b, 0xe6, 0x9e, 0x4b, 0x9e, 0x7a, 0xf6, 0xda, 0xaf, 0x17, 0x57,
		0x85, 0x45, 0x15, 0x58, 0xa3, 0x90, 0xab, 0xb2, 0x7e, 0xf5, 0xce, 0x8f, 0x75, 0x9e, 0x4c, 0x4e,
		0xe2, 0x64, 0xbf, 0xad, 0xdd, 0xb9, 0xb1, 0x7a, 0x16, 0x56, 0x06, 0xb8, 0x9d, 0x7c, 0x37, 0x51,
		0xd2, 0x29, 0x7e, 0xa5, 0xbb, 0xe9, 0x16, 0x98, 0x7d, 0xd5, 0x98, 0x6d, 0x8f, 0xef, 0xf3, 0xec,
		0x91, 0x57, 0x2d, 0x67, 0x5c, 0xf4, 0xe3, 0xfb, 0x6a, 0xb7, 0xe0, 0x24, 0x6c, 0xbd, 0x49, 0x5c,
		0x79, 0x3a, 0x90, 0xc3, 0xfb, 0xba, 0xae, 0xeb, 0xba, 0x2f, 0xff, 0x00, 0x3f, 0x6f, 0xc7, 0xdd,
		0x7c, 0xae, 0x33, 0xfc, 0x86, 0xc4, 0x33, 0xfc, 0x86, 0x4d, 0xcf, 0xf0, 0xcb, 0x92, 0xd9, 0x56,
		0xce, 0xee, 0xb3, 0x89, 0x6c, 0xe7, 0xd4, 0x51, 0xc6, 0xe0, 0xd0, 0x37, 0xbc, 0xa2, 0x10, 0x3e,
		0xa5, 0xa7, 0xf7, 0x19, 0xb0, 0x45, 0x76, 0xff, 0xea, 0xad, 0x4f, 0x55, 0xad, 0x8a, 0xe3, 0xe8,
		0xd6, 0xfd, 0xec, 0xb9, 0x1e, 0xf6, 0x5c, 0x8f, 0xa2, 0x39, 0xc8, 0x85, 0x6f, 0x26, 0xe3, 0xb8,
		0xf0, 0xcd, 0x8f, 0x79, 0xd2, 0xcb, 0xf2, 0x4b, 0x3a, 0x8e, 0xfc, 0x58, 0x8f, 0x34, 0x93, 0x6f,
		0x3b, 0x87, 0x7b, 0x36, 0x87, 0x1f, 0x6d, 0x0e, 0xb7, 0xf2, 0x0d, 0xc2, 0x94, 0xc9, 0xa6, 0x71,
		0x2b, 0xdf, 0xa8, 0x83, 0xea, 0x4f, 0x4b, 0x6d, 0x55, 0x1b, 0x05, 0x5b, 0xe9, 0xc6, 0x2a, 0xb1,
		0x9b, 0xf3, 0xaa, 0xe7, 0x95, 0x33, 0xd6, 0x5a, 0xb6, 0xf7, 0xdd, 0xef, 0xe9, 0x4d, 0xb2, 0xdd,
		0xa4, 0xdf, 0x6d, 0x49, 0xc7, 0xd1, 0x8a, 0xaf, 0x2e, 0xa6, 0x8b, 0x89, 0xfd, 0xa0, 0x50, 0xd7,
		0x29, 0x26, 0x18, 0xa8, 0xeb, 0x68, 0xfa, 0x19, 0xef, 0x31, 0x2c, 0x27, 0xaf, 0xd7, 0xda, 0xd5,
		0xd1, 0xd7, 0x7a, 0x7f, 0x3e, 0xa6, 0x34, 0x4e, 0x58, 0x70, 0xd8, 0x7f, 0x11, 0x91, 0x82, 0x18,
		0xfd, 0x68, 0x32, 0x41, 0x11, 0x60, 0x00, 0xc3, 0x44, 0xcd, 0xf7, 0x45, 0x97, 0xc9, 0x74, 0x1a,
		0xc5, 0x0a, 0x83, 0xbf, 0x96, 0xd0, 0xd3, 0x6e, 0x19, 0x3d, 0xed, 0x9e, 0x2c, 0x3d, 0x5d, 0x5a,
		0xa4, 0xeb, 0x8b, 0x72, 0x55, 0x11, 0x76, 0xbe, 0x31, 0xa5, 0x30, 0x16, 0xa5, 0x55, 0xd7, 0xf9,
		0x31, 0xe8, 0xfc, 0xfb, 0xe6, 0xcf, 0x8b, 0xc7, 0xce, 0x0f, 0xb7, 0xf3, 0xf6, 0xe6, 0x6f, 0x4e,
		0xdd, 0x22, 0xce, 0xd9, 0xea, 0x5f, 0x79, 0x3f, 0xca, 0x82, 0xc3, 0xe1, 0xf2, 0x13, 0xbb, 0xc3,
		0xef, 0x51, 0xb4, 0x39, 0x7a, 0xeb, 0x01, 0xe3, 0x2c, 0x7f, 0xb5, 0x12, 0x12, 0x1f, 0xf0, 0x9e,
		0xfb, 0x79, 0x10, 0x3c, 0x9e, 0x3d, 0xfe, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff,
		0xff, 0xc8, 0x13, 0x68, 0x61, 0xd2, 0xb5, 0x00, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
}

