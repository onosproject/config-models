// Code generated by YGOT. DO NOTEDIT.
/*
Package api is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /go/pkg/mod/github.com/openconfig/ygot@v0.24.4/genutil/names.go
using the following YANG input files:
	- /config-model/yang/onf-switch@2022-05-25.yang
	- /config-model/yang/onf-switch-model@2022-05-25.yang
	- /config-model/yang/onf-route@2022-05-25.yang
	- /config-model/yang/onf-dhcp-server@2022-05-25.yang
Imported modules were sourced from:
	- /var/model-compiler/yang-base/...
	- /config-model/yang/...
*/
package api

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
	ΛEnumTypes map[string][]reflect.Type
)

func init() {
	var err error
	initΛEnumTypes()
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Device{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	DhcpServer	map[string]*OnfDhcpServer_DhcpServer	`path:"dhcp-server" module:"onf-dhcp-server"`
	Route	map[string]*OnfRoute_Route	`path:"route" module:"onf-route"`
	Switch	map[string]*OnfSwitch_Switch	`path:"switch" module:"onf-switch"`
	SwitchModel	map[string]*OnfSwitchModel_SwitchModel	`path:"switch-model" module:"onf-switch-model"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// NewDhcpServer creates a new entry in the DhcpServer list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewDhcpServer(DhcpServerId string) (*OnfDhcpServer_DhcpServer, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DhcpServer == nil {
		t.DhcpServer = make(map[string]*OnfDhcpServer_DhcpServer)
	}

	key := DhcpServerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DhcpServer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DhcpServer", key)
	}

	t.DhcpServer[key] = &OnfDhcpServer_DhcpServer{
		DhcpServerId: &DhcpServerId,
	}

	return t.DhcpServer[key], nil
}

// NewRoute creates a new entry in the Route list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewRoute(RouteId string) (*OnfRoute_Route, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[string]*OnfRoute_Route)
	}

	key := RouteId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &OnfRoute_Route{
		RouteId: &RouteId,
	}

	return t.Route[key], nil
}

// NewSwitch creates a new entry in the Switch list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewSwitch(SwitchId string) (*OnfSwitch_Switch, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Switch == nil {
		t.Switch = make(map[string]*OnfSwitch_Switch)
	}

	key := SwitchId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Switch[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Switch", key)
	}

	t.Switch[key] = &OnfSwitch_Switch{
		SwitchId: &SwitchId,
	}

	return t.Switch[key], nil
}

// NewSwitchModel creates a new entry in the SwitchModel list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewSwitchModel(SwitchModelId string) (*OnfSwitchModel_SwitchModel, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SwitchModel == nil {
		t.SwitchModel = make(map[string]*OnfSwitchModel_SwitchModel)
	}

	key := SwitchModelId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SwitchModel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SwitchModel", key)
	}

	t.SwitchModel[key] = &OnfSwitchModel_SwitchModel{
		SwitchModelId: &SwitchModelId,
	}

	return t.SwitchModel[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Device.
func (*Device) ΛBelongingModule() string {
	return ""
}


// OnfDhcpServer_DhcpServer represents the /onf-dhcp-server/dhcp-server YANG schema element.
type OnfDhcpServer_DhcpServer struct {
	Address	*string	`path:"address" module:"onf-dhcp-server"`
	Description	*string	`path:"description" module:"onf-dhcp-server"`
	DhcpServerId	*string	`path:"dhcp-server-id" module:"onf-dhcp-server"`
	DisplayName	*string	`path:"display-name" module:"onf-dhcp-server"`
}

// IsYANGGoStruct ensures that OnfDhcpServer_DhcpServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfDhcpServer_DhcpServer) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfDhcpServer_DhcpServer struct, which is a YANG list entry.
func (t *OnfDhcpServer_DhcpServer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DhcpServerId == nil {
		return nil, fmt.Errorf("nil value for key DhcpServerId")
	}

	return map[string]interface{}{
		"dhcp-server-id": *t.DhcpServerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfDhcpServer_DhcpServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfDhcpServer_DhcpServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfDhcpServer_DhcpServer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfDhcpServer_DhcpServer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfDhcpServer_DhcpServer.
func (*OnfDhcpServer_DhcpServer) ΛBelongingModule() string {
	return "onf-dhcp-server"
}


// OnfRoute_Route represents the /onf-route/route YANG schema element.
type OnfRoute_Route struct {
	Address	*string	`path:"address" module:"onf-route"`
	Description	*string	`path:"description" module:"onf-route"`
	DisplayName	*string	`path:"display-name" module:"onf-route"`
	Metric	*uint8	`path:"metric" module:"onf-route"`
	Prefix	*string	`path:"prefix" module:"onf-route"`
	RouteId	*string	`path:"route-id" module:"onf-route"`
}

// IsYANGGoStruct ensures that OnfRoute_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfRoute_Route) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfRoute_Route struct, which is a YANG list entry.
func (t *OnfRoute_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RouteId == nil {
		return nil, fmt.Errorf("nil value for key RouteId")
	}

	return map[string]interface{}{
		"route-id": *t.RouteId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfRoute_Route) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfRoute_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfRoute_Route) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfRoute_Route) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfRoute_Route.
func (*OnfRoute_Route) ΛBelongingModule() string {
	return "onf-route"
}


// OnfSwitchModel_SwitchModel represents the /onf-switch-model/switch-model YANG schema element.
type OnfSwitchModel_SwitchModel struct {
	Attribute	map[string]*OnfSwitchModel_SwitchModel_Attribute	`path:"attribute" module:"onf-switch-model"`
	Description	*string	`path:"description" module:"onf-switch-model"`
	DisplayName	*string	`path:"display-name" module:"onf-switch-model"`
	Pipeline	E_OnfSwitchModel_SwitchModel_Pipeline	`path:"pipeline" module:"onf-switch-model"`
	Port	map[uint8]*OnfSwitchModel_SwitchModel_Port	`path:"port" module:"onf-switch-model"`
	SwitchModelId	*string	`path:"switch-model-id" module:"onf-switch-model"`
}

// IsYANGGoStruct ensures that OnfSwitchModel_SwitchModel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfSwitchModel_SwitchModel) IsYANGGoStruct() {}

// NewAttribute creates a new entry in the Attribute list of the
// OnfSwitchModel_SwitchModel struct. The keys of the list are populated from the input
// arguments.
func (t *OnfSwitchModel_SwitchModel) NewAttribute(AttributeKey string) (*OnfSwitchModel_SwitchModel_Attribute, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Attribute == nil {
		t.Attribute = make(map[string]*OnfSwitchModel_SwitchModel_Attribute)
	}

	key := AttributeKey

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Attribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Attribute", key)
	}

	t.Attribute[key] = &OnfSwitchModel_SwitchModel_Attribute{
		AttributeKey: &AttributeKey,
	}

	return t.Attribute[key], nil
}

// NewPort creates a new entry in the Port list of the
// OnfSwitchModel_SwitchModel struct. The keys of the list are populated from the input
// arguments.
func (t *OnfSwitchModel_SwitchModel) NewPort(CageNumber uint8) (*OnfSwitchModel_SwitchModel_Port, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[uint8]*OnfSwitchModel_SwitchModel_Port)
	}

	key := CageNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Port[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Port", key)
	}

	t.Port[key] = &OnfSwitchModel_SwitchModel_Port{
		CageNumber: &CageNumber,
	}

	return t.Port[key], nil
}

// ΛListKeyMap returns the keys of the OnfSwitchModel_SwitchModel struct, which is a YANG list entry.
func (t *OnfSwitchModel_SwitchModel) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SwitchModelId == nil {
		return nil, fmt.Errorf("nil value for key SwitchModelId")
	}

	return map[string]interface{}{
		"switch-model-id": *t.SwitchModelId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitchModel_SwitchModel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfSwitchModel_SwitchModel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitchModel_SwitchModel) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfSwitchModel_SwitchModel) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfSwitchModel_SwitchModel.
func (*OnfSwitchModel_SwitchModel) ΛBelongingModule() string {
	return "onf-switch-model"
}


// OnfSwitchModel_SwitchModel_Attribute represents the /onf-switch-model/switch-model/attribute YANG schema element.
type OnfSwitchModel_SwitchModel_Attribute struct {
	AttributeKey	*string	`path:"attribute-key" module:"onf-switch-model"`
	Value	*string	`path:"value" module:"onf-switch-model"`
}

// IsYANGGoStruct ensures that OnfSwitchModel_SwitchModel_Attribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfSwitchModel_SwitchModel_Attribute) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfSwitchModel_SwitchModel_Attribute struct, which is a YANG list entry.
func (t *OnfSwitchModel_SwitchModel_Attribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttributeKey == nil {
		return nil, fmt.Errorf("nil value for key AttributeKey")
	}

	return map[string]interface{}{
		"attribute-key": *t.AttributeKey,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitchModel_SwitchModel_Attribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfSwitchModel_SwitchModel_Attribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitchModel_SwitchModel_Attribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfSwitchModel_SwitchModel_Attribute) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfSwitchModel_SwitchModel_Attribute.
func (*OnfSwitchModel_SwitchModel_Attribute) ΛBelongingModule() string {
	return "onf-switch-model"
}


// OnfSwitchModel_SwitchModel_Port represents the /onf-switch-model/switch-model/port YANG schema element.
type OnfSwitchModel_SwitchModel_Port struct {
	CageNumber	*uint8	`path:"cage-number" module:"onf-switch-model"`
	Description	*string	`path:"description" module:"onf-switch-model"`
	DisplayName	*string	`path:"display-name" module:"onf-switch-model"`
	MaxChannel	*uint8	`path:"max-channel" module:"onf-switch-model"`
	Speeds	[]E_OnfSdnFabricTypes_Speed	`path:"speeds" module:"onf-switch-model"`
}

// IsYANGGoStruct ensures that OnfSwitchModel_SwitchModel_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfSwitchModel_SwitchModel_Port) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfSwitchModel_SwitchModel_Port struct, which is a YANG list entry.
func (t *OnfSwitchModel_SwitchModel_Port) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CageNumber == nil {
		return nil, fmt.Errorf("nil value for key CageNumber")
	}

	return map[string]interface{}{
		"cage-number": *t.CageNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitchModel_SwitchModel_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfSwitchModel_SwitchModel_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitchModel_SwitchModel_Port) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfSwitchModel_SwitchModel_Port) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfSwitchModel_SwitchModel_Port.
func (*OnfSwitchModel_SwitchModel_Port) ΛBelongingModule() string {
	return "onf-switch-model"
}


// OnfSwitch_Switch represents the /onf-switch/switch YANG schema element.
type OnfSwitch_Switch struct {
	Attribute	map[string]*OnfSwitch_Switch_Attribute	`path:"attribute" module:"onf-switch"`
	Description	*string	`path:"description" module:"onf-switch"`
	DisplayName	*string	`path:"display-name" module:"onf-switch"`
	Management	*OnfSwitch_Switch_Management	`path:"management" module:"onf-switch"`
	ModelId	*string	`path:"model-id" module:"onf-switch"`
	Port	map[OnfSwitch_Switch_Port_Key]*OnfSwitch_Switch_Port	`path:"port" module:"onf-switch"`
	Role	E_OnfSwitch_Switch_Role	`path:"role" module:"onf-switch"`
	State	*OnfSwitch_Switch_State	`path:"state" module:"onf-switch"`
	SwitchId	*string	`path:"switch-id" module:"onf-switch"`
	SwitchPair	*OnfSwitch_Switch_SwitchPair	`path:"switch-pair" module:"onf-switch"`
	Vlan	map[uint16]*OnfSwitch_Switch_Vlan	`path:"vlan" module:"onf-switch"`
}

// IsYANGGoStruct ensures that OnfSwitch_Switch implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfSwitch_Switch) IsYANGGoStruct() {}

// OnfSwitch_Switch_Port_Key represents the key for list Port of element /onf-switch/switch.
type OnfSwitch_Switch_Port_Key struct {
	CageNumber	uint8	`path:"cage-number"`
	ChannelNumber	uint8	`path:"channel-number"`
}

// NewAttribute creates a new entry in the Attribute list of the
// OnfSwitch_Switch struct. The keys of the list are populated from the input
// arguments.
func (t *OnfSwitch_Switch) NewAttribute(AttributeKey string) (*OnfSwitch_Switch_Attribute, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Attribute == nil {
		t.Attribute = make(map[string]*OnfSwitch_Switch_Attribute)
	}

	key := AttributeKey

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Attribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Attribute", key)
	}

	t.Attribute[key] = &OnfSwitch_Switch_Attribute{
		AttributeKey: &AttributeKey,
	}

	return t.Attribute[key], nil
}

// NewPort creates a new entry in the Port list of the
// OnfSwitch_Switch struct. The keys of the list are populated from the input
// arguments.
func (t *OnfSwitch_Switch) NewPort(CageNumber uint8, ChannelNumber uint8) (*OnfSwitch_Switch_Port, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[OnfSwitch_Switch_Port_Key]*OnfSwitch_Switch_Port)
	}

	key := OnfSwitch_Switch_Port_Key{
		CageNumber: CageNumber,
		ChannelNumber: ChannelNumber,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Port[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Port", key)
	}

	t.Port[key] = &OnfSwitch_Switch_Port{
		CageNumber: &CageNumber,
		ChannelNumber: &ChannelNumber,
	}

	return t.Port[key], nil
}

// NewVlan creates a new entry in the Vlan list of the
// OnfSwitch_Switch struct. The keys of the list are populated from the input
// arguments.
func (t *OnfSwitch_Switch) NewVlan(VlanId uint16) (*OnfSwitch_Switch_Vlan, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vlan == nil {
		t.Vlan = make(map[uint16]*OnfSwitch_Switch_Vlan)
	}

	key := VlanId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vlan[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vlan", key)
	}

	t.Vlan[key] = &OnfSwitch_Switch_Vlan{
		VlanId: &VlanId,
	}

	return t.Vlan[key], nil
}

// ΛListKeyMap returns the keys of the OnfSwitch_Switch struct, which is a YANG list entry.
func (t *OnfSwitch_Switch) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SwitchId == nil {
		return nil, fmt.Errorf("nil value for key SwitchId")
	}

	return map[string]interface{}{
		"switch-id": *t.SwitchId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitch_Switch) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfSwitch_Switch"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitch_Switch) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfSwitch_Switch) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfSwitch_Switch.
func (*OnfSwitch_Switch) ΛBelongingModule() string {
	return "onf-switch"
}


// OnfSwitch_Switch_Attribute represents the /onf-switch/switch/attribute YANG schema element.
type OnfSwitch_Switch_Attribute struct {
	AttributeKey	*string	`path:"attribute-key" module:"onf-switch"`
	Value	*string	`path:"value" module:"onf-switch"`
}

// IsYANGGoStruct ensures that OnfSwitch_Switch_Attribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfSwitch_Switch_Attribute) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfSwitch_Switch_Attribute struct, which is a YANG list entry.
func (t *OnfSwitch_Switch_Attribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttributeKey == nil {
		return nil, fmt.Errorf("nil value for key AttributeKey")
	}

	return map[string]interface{}{
		"attribute-key": *t.AttributeKey,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitch_Switch_Attribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfSwitch_Switch_Attribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitch_Switch_Attribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfSwitch_Switch_Attribute) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfSwitch_Switch_Attribute.
func (*OnfSwitch_Switch_Attribute) ΛBelongingModule() string {
	return "onf-switch"
}


// OnfSwitch_Switch_Management represents the /onf-switch/switch/management YANG schema element.
type OnfSwitch_Switch_Management struct {
	Address	*string	`path:"address" module:"onf-switch"`
	PortNumber	*uint16	`path:"port-number" module:"onf-switch"`
}

// IsYANGGoStruct ensures that OnfSwitch_Switch_Management implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfSwitch_Switch_Management) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitch_Switch_Management) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfSwitch_Switch_Management"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitch_Switch_Management) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfSwitch_Switch_Management) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfSwitch_Switch_Management.
func (*OnfSwitch_Switch_Management) ΛBelongingModule() string {
	return "onf-switch"
}


// OnfSwitch_Switch_Port represents the /onf-switch/switch/port YANG schema element.
type OnfSwitch_Switch_Port struct {
	CageNumber	*uint8	`path:"cage-number" module:"onf-switch"`
	ChannelNumber	*uint8	`path:"channel-number" module:"onf-switch"`
	Description	*string	`path:"description" module:"onf-switch"`
	DhcpConnectPoint	[]string	`path:"dhcp-connect-point" module:"onf-switch"`
	DisplayName	*string	`path:"display-name" module:"onf-switch"`
	Speed	E_OnfSdnFabricTypes_Speed	`path:"speed" module:"onf-switch"`
	State	*OnfSwitch_Switch_Port_State	`path:"state" module:"onf-switch"`
	Vlans	*OnfSwitch_Switch_Port_Vlans	`path:"vlans" module:"onf-switch"`
}

// IsYANGGoStruct ensures that OnfSwitch_Switch_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfSwitch_Switch_Port) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfSwitch_Switch_Port struct, which is a YANG list entry.
func (t *OnfSwitch_Switch_Port) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CageNumber == nil {
		return nil, fmt.Errorf("nil value for key CageNumber")
	}

	if t.ChannelNumber == nil {
		return nil, fmt.Errorf("nil value for key ChannelNumber")
	}

	return map[string]interface{}{
		"cage-number": *t.CageNumber,
		"channel-number": *t.ChannelNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitch_Switch_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfSwitch_Switch_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitch_Switch_Port) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfSwitch_Switch_Port) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfSwitch_Switch_Port.
func (*OnfSwitch_Switch_Port) ΛBelongingModule() string {
	return "onf-switch"
}


// OnfSwitch_Switch_Port_State represents the /onf-switch/switch/port/state YANG schema element.
type OnfSwitch_Switch_Port_State struct {
	AdminStatus	E_OnfSwitch_Switch_Port_State_AdminStatus	`path:"admin-status" module:"onf-switch"`
	Ifindex	*uint32	`path:"ifindex" module:"onf-switch"`
	LastChange	*uint64	`path:"last-change" module:"onf-switch"`
	OperStatus	E_OnfSwitch_Switch_Port_State_OperStatus	`path:"oper-status" module:"onf-switch"`
}

// IsYANGGoStruct ensures that OnfSwitch_Switch_Port_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfSwitch_Switch_Port_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitch_Switch_Port_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfSwitch_Switch_Port_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitch_Switch_Port_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfSwitch_Switch_Port_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfSwitch_Switch_Port_State.
func (*OnfSwitch_Switch_Port_State) ΛBelongingModule() string {
	return "onf-switch"
}


// OnfSwitch_Switch_Port_Vlans represents the /onf-switch/switch/port/vlans YANG schema element.
type OnfSwitch_Switch_Port_Vlans struct {
	Tagged	[]uint16	`path:"tagged" module:"onf-switch"`
	Untagged	*uint16	`path:"untagged" module:"onf-switch"`
}

// IsYANGGoStruct ensures that OnfSwitch_Switch_Port_Vlans implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfSwitch_Switch_Port_Vlans) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitch_Switch_Port_Vlans) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfSwitch_Switch_Port_Vlans"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitch_Switch_Port_Vlans) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfSwitch_Switch_Port_Vlans) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfSwitch_Switch_Port_Vlans.
func (*OnfSwitch_Switch_Port_Vlans) ΛBelongingModule() string {
	return "onf-switch"
}


// OnfSwitch_Switch_State represents the /onf-switch/switch/state YANG schema element.
type OnfSwitch_Switch_State struct {
	Connected	*string	`path:"connected" module:"onf-switch"`
	LastConnected	*string	`path:"last-connected" module:"onf-switch"`
}

// IsYANGGoStruct ensures that OnfSwitch_Switch_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfSwitch_Switch_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitch_Switch_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfSwitch_Switch_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitch_Switch_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfSwitch_Switch_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfSwitch_Switch_State.
func (*OnfSwitch_Switch_State) ΛBelongingModule() string {
	return "onf-switch"
}


// OnfSwitch_Switch_SwitchPair represents the /onf-switch/switch/switch-pair YANG schema element.
type OnfSwitch_Switch_SwitchPair struct {
	PairedSwitch	*string	`path:"paired-switch" module:"onf-switch"`
	PairingPort	map[OnfSwitch_Switch_SwitchPair_PairingPort_Key]*OnfSwitch_Switch_SwitchPair_PairingPort	`path:"pairing-port" module:"onf-switch"`
}

// IsYANGGoStruct ensures that OnfSwitch_Switch_SwitchPair implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfSwitch_Switch_SwitchPair) IsYANGGoStruct() {}

// OnfSwitch_Switch_SwitchPair_PairingPort_Key represents the key for list PairingPort of element /onf-switch/switch/switch-pair.
type OnfSwitch_Switch_SwitchPair_PairingPort_Key struct {
	CageNumber	uint8	`path:"cage-number"`
	ChannelNumber	uint8	`path:"channel-number"`
}

// NewPairingPort creates a new entry in the PairingPort list of the
// OnfSwitch_Switch_SwitchPair struct. The keys of the list are populated from the input
// arguments.
func (t *OnfSwitch_Switch_SwitchPair) NewPairingPort(CageNumber uint8, ChannelNumber uint8) (*OnfSwitch_Switch_SwitchPair_PairingPort, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PairingPort == nil {
		t.PairingPort = make(map[OnfSwitch_Switch_SwitchPair_PairingPort_Key]*OnfSwitch_Switch_SwitchPair_PairingPort)
	}

	key := OnfSwitch_Switch_SwitchPair_PairingPort_Key{
		CageNumber: CageNumber,
		ChannelNumber: ChannelNumber,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PairingPort[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PairingPort", key)
	}

	t.PairingPort[key] = &OnfSwitch_Switch_SwitchPair_PairingPort{
		CageNumber: &CageNumber,
		ChannelNumber: &ChannelNumber,
	}

	return t.PairingPort[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitch_Switch_SwitchPair) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfSwitch_Switch_SwitchPair"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitch_Switch_SwitchPair) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfSwitch_Switch_SwitchPair) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfSwitch_Switch_SwitchPair.
func (*OnfSwitch_Switch_SwitchPair) ΛBelongingModule() string {
	return "onf-switch"
}


// OnfSwitch_Switch_SwitchPair_PairingPort represents the /onf-switch/switch/switch-pair/pairing-port YANG schema element.
type OnfSwitch_Switch_SwitchPair_PairingPort struct {
	CageNumber	*uint8	`path:"cage-number" module:"onf-switch"`
	ChannelNumber	*uint8	`path:"channel-number" module:"onf-switch"`
}

// IsYANGGoStruct ensures that OnfSwitch_Switch_SwitchPair_PairingPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfSwitch_Switch_SwitchPair_PairingPort) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfSwitch_Switch_SwitchPair_PairingPort struct, which is a YANG list entry.
func (t *OnfSwitch_Switch_SwitchPair_PairingPort) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CageNumber == nil {
		return nil, fmt.Errorf("nil value for key CageNumber")
	}

	if t.ChannelNumber == nil {
		return nil, fmt.Errorf("nil value for key ChannelNumber")
	}

	return map[string]interface{}{
		"cage-number": *t.CageNumber,
		"channel-number": *t.ChannelNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitch_Switch_SwitchPair_PairingPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfSwitch_Switch_SwitchPair_PairingPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitch_Switch_SwitchPair_PairingPort) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfSwitch_Switch_SwitchPair_PairingPort) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfSwitch_Switch_SwitchPair_PairingPort.
func (*OnfSwitch_Switch_SwitchPair_PairingPort) ΛBelongingModule() string {
	return "onf-switch"
}


// OnfSwitch_Switch_Vlan represents the /onf-switch/switch/vlan YANG schema element.
type OnfSwitch_Switch_Vlan struct {
	Description	*string	`path:"description" module:"onf-switch"`
	DisplayName	*string	`path:"display-name" module:"onf-switch"`
	Subnet	[]string	`path:"subnet" module:"onf-switch"`
	VlanId	*uint16	`path:"vlan-id" module:"onf-switch"`
}

// IsYANGGoStruct ensures that OnfSwitch_Switch_Vlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfSwitch_Switch_Vlan) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfSwitch_Switch_Vlan struct, which is a YANG list entry.
func (t *OnfSwitch_Switch_Vlan) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VlanId == nil {
		return nil, fmt.Errorf("nil value for key VlanId")
	}

	return map[string]interface{}{
		"vlan-id": *t.VlanId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitch_Switch_Vlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfSwitch_Switch_Vlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSwitch_Switch_Vlan) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfSwitch_Switch_Vlan) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OnfSwitch_Switch_Vlan.
func (*OnfSwitch_Switch_Vlan) ΛBelongingModule() string {
	return "onf-switch"
}


// E_OnfSdnFabricTypes_Speed is a derived int64 type which is used to represent
// the enumerated node OnfSdnFabricTypes_Speed. An additional value named
// OnfSdnFabricTypes_Speed_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OnfSdnFabricTypes_Speed int64

// IsYANGGoEnum ensures that OnfSdnFabricTypes_Speed implements the yang.GoEnum
// interface. This ensures that OnfSdnFabricTypes_Speed can be identified as a
// mapped type for a YANG enumeration.
func (E_OnfSdnFabricTypes_Speed) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OnfSdnFabricTypes_Speed.
func (E_OnfSdnFabricTypes_Speed) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OnfSdnFabricTypes_Speed.
func (e E_OnfSdnFabricTypes_Speed) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OnfSdnFabricTypes_Speed")
}

const (
	// OnfSdnFabricTypes_Speed_UNSET corresponds to the value UNSET of OnfSdnFabricTypes_Speed
	OnfSdnFabricTypes_Speed_UNSET E_OnfSdnFabricTypes_Speed = 0
	// OnfSdnFabricTypes_Speed_speed_100g corresponds to the value speed_100g of OnfSdnFabricTypes_Speed
	OnfSdnFabricTypes_Speed_speed_100g E_OnfSdnFabricTypes_Speed = 1
	// OnfSdnFabricTypes_Speed_speed_10g corresponds to the value speed_10g of OnfSdnFabricTypes_Speed
	OnfSdnFabricTypes_Speed_speed_10g E_OnfSdnFabricTypes_Speed = 2
	// OnfSdnFabricTypes_Speed_speed_1g corresponds to the value speed_1g of OnfSdnFabricTypes_Speed
	OnfSdnFabricTypes_Speed_speed_1g E_OnfSdnFabricTypes_Speed = 3
	// OnfSdnFabricTypes_Speed_speed_2_5g corresponds to the value speed_2_5g of OnfSdnFabricTypes_Speed
	OnfSdnFabricTypes_Speed_speed_2_5g E_OnfSdnFabricTypes_Speed = 4
	// OnfSdnFabricTypes_Speed_speed_25g corresponds to the value speed_25g of OnfSdnFabricTypes_Speed
	OnfSdnFabricTypes_Speed_speed_25g E_OnfSdnFabricTypes_Speed = 5
	// OnfSdnFabricTypes_Speed_speed_400g corresponds to the value speed_400g of OnfSdnFabricTypes_Speed
	OnfSdnFabricTypes_Speed_speed_400g E_OnfSdnFabricTypes_Speed = 6
	// OnfSdnFabricTypes_Speed_speed_40g corresponds to the value speed_40g of OnfSdnFabricTypes_Speed
	OnfSdnFabricTypes_Speed_speed_40g E_OnfSdnFabricTypes_Speed = 7
	// OnfSdnFabricTypes_Speed_speed_5g corresponds to the value speed_5g of OnfSdnFabricTypes_Speed
	OnfSdnFabricTypes_Speed_speed_5g E_OnfSdnFabricTypes_Speed = 8
	// OnfSdnFabricTypes_Speed_speed_autoneg corresponds to the value speed_autoneg of OnfSdnFabricTypes_Speed
	OnfSdnFabricTypes_Speed_speed_autoneg E_OnfSdnFabricTypes_Speed = 9
)


// E_OnfSwitchModel_SwitchModel_Pipeline is a derived int64 type which is used to represent
// the enumerated node OnfSwitchModel_SwitchModel_Pipeline. An additional value named
// OnfSwitchModel_SwitchModel_Pipeline_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OnfSwitchModel_SwitchModel_Pipeline int64

// IsYANGGoEnum ensures that OnfSwitchModel_SwitchModel_Pipeline implements the yang.GoEnum
// interface. This ensures that OnfSwitchModel_SwitchModel_Pipeline can be identified as a
// mapped type for a YANG enumeration.
func (E_OnfSwitchModel_SwitchModel_Pipeline) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OnfSwitchModel_SwitchModel_Pipeline.
func (E_OnfSwitchModel_SwitchModel_Pipeline) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OnfSwitchModel_SwitchModel_Pipeline.
func (e E_OnfSwitchModel_SwitchModel_Pipeline) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OnfSwitchModel_SwitchModel_Pipeline")
}

const (
	// OnfSwitchModel_SwitchModel_Pipeline_UNSET corresponds to the value UNSET of OnfSwitchModel_SwitchModel_Pipeline
	OnfSwitchModel_SwitchModel_Pipeline_UNSET E_OnfSwitchModel_SwitchModel_Pipeline = 0
	// OnfSwitchModel_SwitchModel_Pipeline_unknown corresponds to the value unknown of OnfSwitchModel_SwitchModel_Pipeline
	OnfSwitchModel_SwitchModel_Pipeline_unknown E_OnfSwitchModel_SwitchModel_Pipeline = 1
	// OnfSwitchModel_SwitchModel_Pipeline_dual corresponds to the value dual of OnfSwitchModel_SwitchModel_Pipeline
	OnfSwitchModel_SwitchModel_Pipeline_dual E_OnfSwitchModel_SwitchModel_Pipeline = 2
	// OnfSwitchModel_SwitchModel_Pipeline_quad corresponds to the value quad of OnfSwitchModel_SwitchModel_Pipeline
	OnfSwitchModel_SwitchModel_Pipeline_quad E_OnfSwitchModel_SwitchModel_Pipeline = 3
)


// E_OnfSwitch_Switch_Port_State_AdminStatus is a derived int64 type which is used to represent
// the enumerated node OnfSwitch_Switch_Port_State_AdminStatus. An additional value named
// OnfSwitch_Switch_Port_State_AdminStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OnfSwitch_Switch_Port_State_AdminStatus int64

// IsYANGGoEnum ensures that OnfSwitch_Switch_Port_State_AdminStatus implements the yang.GoEnum
// interface. This ensures that OnfSwitch_Switch_Port_State_AdminStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_OnfSwitch_Switch_Port_State_AdminStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OnfSwitch_Switch_Port_State_AdminStatus.
func (E_OnfSwitch_Switch_Port_State_AdminStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OnfSwitch_Switch_Port_State_AdminStatus.
func (e E_OnfSwitch_Switch_Port_State_AdminStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OnfSwitch_Switch_Port_State_AdminStatus")
}

const (
	// OnfSwitch_Switch_Port_State_AdminStatus_UNSET corresponds to the value UNSET of OnfSwitch_Switch_Port_State_AdminStatus
	OnfSwitch_Switch_Port_State_AdminStatus_UNSET E_OnfSwitch_Switch_Port_State_AdminStatus = 0
	// OnfSwitch_Switch_Port_State_AdminStatus_UP corresponds to the value UP of OnfSwitch_Switch_Port_State_AdminStatus
	OnfSwitch_Switch_Port_State_AdminStatus_UP E_OnfSwitch_Switch_Port_State_AdminStatus = 1
	// OnfSwitch_Switch_Port_State_AdminStatus_DOWN corresponds to the value DOWN of OnfSwitch_Switch_Port_State_AdminStatus
	OnfSwitch_Switch_Port_State_AdminStatus_DOWN E_OnfSwitch_Switch_Port_State_AdminStatus = 2
	// OnfSwitch_Switch_Port_State_AdminStatus_TESTING corresponds to the value TESTING of OnfSwitch_Switch_Port_State_AdminStatus
	OnfSwitch_Switch_Port_State_AdminStatus_TESTING E_OnfSwitch_Switch_Port_State_AdminStatus = 3
)


// E_OnfSwitch_Switch_Port_State_OperStatus is a derived int64 type which is used to represent
// the enumerated node OnfSwitch_Switch_Port_State_OperStatus. An additional value named
// OnfSwitch_Switch_Port_State_OperStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OnfSwitch_Switch_Port_State_OperStatus int64

// IsYANGGoEnum ensures that OnfSwitch_Switch_Port_State_OperStatus implements the yang.GoEnum
// interface. This ensures that OnfSwitch_Switch_Port_State_OperStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_OnfSwitch_Switch_Port_State_OperStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OnfSwitch_Switch_Port_State_OperStatus.
func (E_OnfSwitch_Switch_Port_State_OperStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OnfSwitch_Switch_Port_State_OperStatus.
func (e E_OnfSwitch_Switch_Port_State_OperStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OnfSwitch_Switch_Port_State_OperStatus")
}

const (
	// OnfSwitch_Switch_Port_State_OperStatus_UNSET corresponds to the value UNSET of OnfSwitch_Switch_Port_State_OperStatus
	OnfSwitch_Switch_Port_State_OperStatus_UNSET E_OnfSwitch_Switch_Port_State_OperStatus = 0
	// OnfSwitch_Switch_Port_State_OperStatus_UP corresponds to the value UP of OnfSwitch_Switch_Port_State_OperStatus
	OnfSwitch_Switch_Port_State_OperStatus_UP E_OnfSwitch_Switch_Port_State_OperStatus = 1
	// OnfSwitch_Switch_Port_State_OperStatus_DOWN corresponds to the value DOWN of OnfSwitch_Switch_Port_State_OperStatus
	OnfSwitch_Switch_Port_State_OperStatus_DOWN E_OnfSwitch_Switch_Port_State_OperStatus = 2
	// OnfSwitch_Switch_Port_State_OperStatus_TESTING corresponds to the value TESTING of OnfSwitch_Switch_Port_State_OperStatus
	OnfSwitch_Switch_Port_State_OperStatus_TESTING E_OnfSwitch_Switch_Port_State_OperStatus = 3
	// OnfSwitch_Switch_Port_State_OperStatus_UNKNOWN corresponds to the value UNKNOWN of OnfSwitch_Switch_Port_State_OperStatus
	OnfSwitch_Switch_Port_State_OperStatus_UNKNOWN E_OnfSwitch_Switch_Port_State_OperStatus = 4
	// OnfSwitch_Switch_Port_State_OperStatus_DORMANT corresponds to the value DORMANT of OnfSwitch_Switch_Port_State_OperStatus
	OnfSwitch_Switch_Port_State_OperStatus_DORMANT E_OnfSwitch_Switch_Port_State_OperStatus = 5
	// OnfSwitch_Switch_Port_State_OperStatus_NOT_PRESENT corresponds to the value NOT_PRESENT of OnfSwitch_Switch_Port_State_OperStatus
	OnfSwitch_Switch_Port_State_OperStatus_NOT_PRESENT E_OnfSwitch_Switch_Port_State_OperStatus = 6
	// OnfSwitch_Switch_Port_State_OperStatus_LOWER_LAYER_DOWN corresponds to the value LOWER_LAYER_DOWN of OnfSwitch_Switch_Port_State_OperStatus
	OnfSwitch_Switch_Port_State_OperStatus_LOWER_LAYER_DOWN E_OnfSwitch_Switch_Port_State_OperStatus = 7
)


// E_OnfSwitch_Switch_Role is a derived int64 type which is used to represent
// the enumerated node OnfSwitch_Switch_Role. An additional value named
// OnfSwitch_Switch_Role_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OnfSwitch_Switch_Role int64

// IsYANGGoEnum ensures that OnfSwitch_Switch_Role implements the yang.GoEnum
// interface. This ensures that OnfSwitch_Switch_Role can be identified as a
// mapped type for a YANG enumeration.
func (E_OnfSwitch_Switch_Role) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OnfSwitch_Switch_Role.
func (E_OnfSwitch_Switch_Role) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OnfSwitch_Switch_Role.
func (e E_OnfSwitch_Switch_Role) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OnfSwitch_Switch_Role")
}

const (
	// OnfSwitch_Switch_Role_UNSET corresponds to the value UNSET of OnfSwitch_Switch_Role
	OnfSwitch_Switch_Role_UNSET E_OnfSwitch_Switch_Role = 0
	// OnfSwitch_Switch_Role_undefined corresponds to the value undefined of OnfSwitch_Switch_Role
	OnfSwitch_Switch_Role_undefined E_OnfSwitch_Switch_Role = 1
	// OnfSwitch_Switch_Role_leaf corresponds to the value leaf of OnfSwitch_Switch_Role
	OnfSwitch_Switch_Role_leaf E_OnfSwitch_Switch_Role = 2
	// OnfSwitch_Switch_Role_spine corresponds to the value spine of OnfSwitch_Switch_Role
	OnfSwitch_Switch_Role_spine E_OnfSwitch_Switch_Role = 3
)


// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_OnfSdnFabricTypes_Speed": {
		1: {Name: "speed-100g", DefiningModule: "onf-sdn-fabric-types"},
		2: {Name: "speed-10g", DefiningModule: "onf-sdn-fabric-types"},
		3: {Name: "speed-1g", DefiningModule: "onf-sdn-fabric-types"},
		4: {Name: "speed-2-5g", DefiningModule: "onf-sdn-fabric-types"},
		5: {Name: "speed-25g", DefiningModule: "onf-sdn-fabric-types"},
		6: {Name: "speed-400g", DefiningModule: "onf-sdn-fabric-types"},
		7: {Name: "speed-40g", DefiningModule: "onf-sdn-fabric-types"},
		8: {Name: "speed-5g", DefiningModule: "onf-sdn-fabric-types"},
		9: {Name: "speed-autoneg", DefiningModule: "onf-sdn-fabric-types"},
	},
	"E_OnfSwitchModel_SwitchModel_Pipeline": {
		1: {Name: "unknown"},
		2: {Name: "dual"},
		3: {Name: "quad"},
	},
	"E_OnfSwitch_Switch_Port_State_AdminStatus": {
		1: {Name: "UP"},
		2: {Name: "DOWN"},
		3: {Name: "TESTING"},
	},
	"E_OnfSwitch_Switch_Port_State_OperStatus": {
		1: {Name: "UP"},
		2: {Name: "DOWN"},
		3: {Name: "TESTING"},
		4: {Name: "UNKNOWN"},
		5: {Name: "DORMANT"},
		6: {Name: "NOT_PRESENT"},
		7: {Name: "LOWER_LAYER_DOWN"},
	},
	"E_OnfSwitch_Switch_Role": {
		1: {Name: "undefined"},
		2: {Name: "leaf"},
		3: {Name: "spine"},
	},
}


var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0xff, 0x73, 0xda, 0xb8,
		0xb6, 0xff, 0xbd, 0x7f, 0x85, 0x86, 0x79, 0x77, 0x06, 0xba, 0xb1, 0x63, 0x08, 0xa4, 0x0d, 0x33,
		0x77, 0x7a, 0xb3, 0x6d, 0x77, 0x37, 0x6f, 0xd3, 0x36, 0xd3, 0xa6, 0x7b, 0xef, 0x5b, 0x4c, 0x33,
		0x8a, 0x2d, 0x40, 0x2f, 0x46, 0xf6, 0x5a, 0x72, 0xbe, 0x6c, 0x92, 0xff, 0xfd, 0x8e, 0x65, 0x63,
		0xcc, 0x37, 0x5b, 0xb2, 0x21, 0x71, 0x40, 0x3b, 0x3b, 0x85, 0x80, 0x24, 0x64, 0xe9, 0xe8, 0x73,
		0x8e, 0x3e, 0xe7, 0xe8, 0xe8, 0xfe, 0x15, 0x00, 0x00, 0xd4, 0x3e, 0xc3, 0x31, 0xaa, 0x75, 0x41,
		0xcd, 0x46, 0xd7, 0xd8, 0x42, 0xb5, 0xbd, 0xe8, 0xd3, 0xdf, 0x31, 0xb1, 0x6b, 0x5d, 0xd0, 0x8c,
		0xff, 0x7c, 0xef, 0x92, 0x01, 0x1e, 0xd6, 0xba, 0xc0, 0x88, 0x3f, 0xf8, 0x80, 0xfd, 0x5a, 0x17,
		0x44, 0x4d, 0xf0, 0x0f, 0xec, 0x91, 0xe5, 0x69, 0x14, 0xf9, 0xd7, 0x68, 0xf6, 0x8b, 0xd9, 0xdf,
		0x48, 0x15, 0xda, 0x9b, 0x2d, 0xf2, 0x01, 0x51, 0xcb, 0xc7, 0x1e, 0xc3, 0x2e, 0x09, 0x4b, 0x1e,
		0x03, 0x07, 0x53, 0x06, 0xdc, 0x01, 0xf8, 0xf0, 0xdb, 0xfb, 0x33, 0xf0, 0x8d, 0xd7, 0xa1, 0xf3,
		0x95, 0x66, 0x7b, 0x99, 0x7c, 0x3c, 0xdf, 0xdb, 0xe4, 0x8b, 0x33, 0x1f, 0x0d, 0xf0, 0xed, 0x42,
		0xff, 0x16, 0xfa, 0x38, 0xf7, 0x3b, 0xfc, 0xfb, 0x6f, 0x6e, 0xe0, 0x5b, 0x68, 0x69, 0xdd, 0xa8,
		0x2f, 0xe8, 0xee, 0xc6, 0xf5, 0xc3, 0xee, 0xd4, 0xbc, 0xe8, 0x67, 0xf6, 0x96, 0x17, 0xfc, 0x0d,
		0xd2, 0x63, 0x7f, 0x18, 0x8c, 0x11, 0x61, 0xb5, 0x2e, 0x60, 0x7e, 0x80, 0x56, 0x14, 0x4c, 0x95,
		0x8a, 0x7a, 0xb5, 0x50, 0xec, 0x71, 0xe6, 0x93, 0xc7, 0xf9, 0x21, 0xc5, 0xfe, 0xf2, 0x47, 0x85,
		0xb6, 0xed, 0x23, 0x4a, 0x57, 0x3f, 0xcb, 0x64, 0x2c, 0x26, 0x05, 0x57, 0x74, 0x70, 0x6e, 0xce,
		0x20, 0x01, 0xd8, 0x03, 0x39, 0x75, 0xe2, 0x29, 0x33, 0x56, 0x7c, 0xbd, 0x6a, 0xea, 0x44, 0xa6,
		0x50, 0x74, 0x2a, 0x45, 0xa7, 0x54, 0x7a, 0x6a, 0xa5, 0xa7, 0x58, 0x62, 0xaa, 0x97, 0x4f, 0xf9,
		0x8a, 0xa9, 0x4f, 0xda, 0xfd, 0x04, 0x89, 0x0d, 0x99, 0xeb, 0xdf, 0x2d, 0xae, 0x92, 0xa4, 0xcc,
		0xf9, 0x9d, 0x87, 0xc4, 0xc6, 0x13, 0x7b, 0xd7, 0x6d, 0x2d, 0x9e, 0x5f, 0x8d, 0xb8, 0xda, 0xdf,
		0x2e, 0x41, 0x59, 0xe3, 0x3b, 0x59, 0x9e, 0x6f, 0x33, 0xca, 0x9c, 0x41, 0xc6, 0x90, 0x1f, 0xca,
		0x4f, 0x2f, 0x7b, 0x88, 0xea, 0xf5, 0x9e, 0xa1, 0x1d, 0xf5, 0x1f, 0x7a, 0x4d, 0xed, 0xa8, 0x1f,
		0xbd, 0x6d, 0xf2, 0x97, 0xe8, 0x7d, 0xab, 0x67, 0x68, 0xed, 0xc9, 0xfb, 0x4e, 0xcf, 0xd0, 0x3a,
		0xfd, 0x86, 0x69, 0xea, 0x8d, 0xfb, 0x83, 0x47, 0xf9, 0x8a, 0xf5, 0x7f, 0xf4, 0x4c, 0xd3, 0xbb,
		0xff, 0xfc, 0x18, 0xfe, 0x7b, 0xfa, 0xd8, 0xff, 0xa9, 0xf1, 0x2e, 0x6f, 0xca, 0xc3, 0x06, 0x4c,
		0x53, 0xef, 0xbf, 0x5e, 0x3d, 0x75, 0xfd, 0x57, 0x62, 0x13, 0xba, 0x64, 0x32, 0x6b, 0xf6, 0xcc,
		0x52, 0xcb, 0x59, 0xb6, 0xe9, 0xc2, 0x62, 0x4b, 0xd7, 0x71, 0xc9, 0x10, 0xa4, 0xaa, 0x81, 0x01,
		0x46, 0x8e, 0x5d, 0x85, 0x35, 0x3c, 0x60, 0x2f, 0x6f, 0x05, 0x0f, 0xd8, 0xba, 0xd6, 0xaf, 0xf8,
		0xda, 0xa4, 0xcc, 0xc7, 0x64, 0x58, 0x76, 0x35, 0x9e, 0x22, 0x32, 0x64, 0xa3, 0xdc, 0xc5, 0x98,
		0x3d, 0xda, 0x11, 0xf2, 0x60, 0x92, 0x3b, 0x2d, 0x49, 0xe1, 0x3f, 0xa0, 0x13, 0xa0, 0xd5, 0x10,
		0xb5, 0x50, 0xfe, 0x17, 0x1f, 0x5a, 0xa1, 0x98, 0x7e, 0xc0, 0x43, 0xcc, 0xe8, 0x6a, 0x49, 0x5b,
		0x1c, 0x2d, 0x34, 0x84, 0x0c, 0x5f, 0x87, 0xbf, 0x35, 0x80, 0x0e, 0x45, 0xb9, 0xb5, 0x1e, 0xf7,
		0x04, 0x1e, 0x15, 0xde, 0x16, 0x78, 0x54, 0xa3, 0xd5, 0xae, 0xde, 0xd3, 0xbe, 0x2a, 0xf6, 0x6d,
		0x29, 0x64, 0x9b, 0xda, 0x84, 0x1a, 0xb6, 0x05, 0xc0, 0x6d, 0xb6, 0xbc, 0x18, 0xbe, 0x9d, 0x8f,
		0x10, 0x38, 0xf9, 0x10, 0x9a, 0x93, 0x6c, 0x84, 0xd2, 0x26, 0xa5, 0x32, 0x53, 0xaa, 0x60, 0xa6,
		0x88, 0xc3, 0xdc, 0x1d, 0x24, 0x43, 0x0d, 0xdb, 0x88, 0x30, 0x3c, 0xc0, 0x2b, 0xa7, 0x4f, 0xe1,
		0x5d, 0xf5, 0xf0, 0xee, 0x6d, 0xbb, 0x7d, 0xf8, 0xa6, 0xdd, 0x36, 0xde, 0x1c, 0xbc, 0x31, 0x8e,
		0x3a, 0x9d, 0xe6, 0x61, 0xb3, 0xb3, 0x3d, 0xf8, 0xb7, 0x0e, 0x03, 0xb7, 0x07, 0xb5, 0xbf, 0x8f,
		0xb5, 0x3f, 0x2f, 0xfa, 0xf1, 0x1b, 0x6e, 0x50, 0x6a, 0x17, 0xa1, 0x49, 0x99, 0xb3, 0x2c, 0xf5,
		0x07, 0x5d, 0x7f, 0xe8, 0xfd, 0xb8, 0xfd, 0x4f, 0x5f, 0x7f, 0xfd, 0xa0, 0xf7, 0x7e, 0x8c, 0x3f,
		0xf1, 0x37, 0x7a, 0xef, 0x87, 0x73, 0xda, 0xd7, 0x37, 0x65, 0x91, 0x62, 0xea, 0x39, 0xf0, 0x4e,
		0x23, 0xd1, 0xca, 0xcc, 0x43, 0xed, 0x74, 0x69, 0x31, 0xcc, 0x8e, 0xab, 0x80, 0xb0, 0x0a, 0x60,
		0x2e, 0x08, 0x28, 0x02, 0x98, 0x80, 0x5f, 0xbf, 0x9f, 0x00, 0xd7, 0x07, 0xef, 0x4f, 0x4f, 0x94,
		0x79, 0xaa, 0xcc, 0x53, 0x05, 0xd7, 0x9b, 0x81, 0xeb, 0xb7, 0xc6, 0xee, 0x19, 0xa7, 0x99, 0x64,
		0xda, 0xef, 0xe8, 0x2e, 0xd7, 0xfa, 0xac, 0x9d, 0x62, 0xca, 0x8e, 0x19, 0x5b, 0x41, 0xbb, 0x7d,
		0xc2, 0xe4, 0xa3, 0x83, 0xc2, 0x55, 0xb8, 0x62, 0x9c, 0xc2, 0xa9, 0x4a, 0x95, 0x10, 0x53, 0x99,
		0xb5, 0x2f, 0xbe, 0x8d, 0x7c, 0x64, 0xff, 0x1c, 0xf6, 0x8f, 0x04, 0x8e, 0x93, 0xf9, 0x18, 0xc7,
		0x84, 0xb8, 0x0c, 0xae, 0xa4, 0x11, 0x6a, 0xd4, 0x1a, 0xa1, 0x31, 0xf4, 0x20, 0x5f, 0x65, 0xb5,
		0x7d, 0x97, 0x0c, 0xb4, 0xd4, 0x23, 0xef, 0xaf, 0x26, 0x70, 0xa3, 0xda, 0xcc, 0x0f, 0x2c, 0x16,
		0x6b, 0x84, 0xda, 0x17, 0x32, 0xf8, 0x30, 0xb2, 0xbc, 0xc8, 0xd0, 0xbe, 0x98, 0xbe, 0x9d, 0x45,
		0x9f, 0xe9, 0xb0, 0xa7, 0xfa, 0x5a, 0xf3, 0xdd, 0x80, 0xa1, 0xd5, 0x44, 0x72, 0xf4, 0xb5, 0x28,
		0x85, 0xcc, 0x4b, 0x3f, 0x09, 0x79, 0xec, 0xb3, 0xea, 0x51, 0xc7, 0x3e, 0xab, 0x3a, 0x71, 0x7c,
		0x72, 0x36, 0x61, 0x8d, 0xc3, 0xd9, 0x1a, 0xb9, 0x5e, 0x15, 0x34, 0xbb, 0xff, 0x02, 0x35, 0xbb,
		0xcf, 0xaa, 0x4a, 0x1c, 0x17, 0xa1, 0x8d, 0x8f, 0x32, 0xca, 0xc4, 0xbf, 0x5d, 0xda, 0x0e, 0x28,
		0x48, 0x6d, 0xcb, 0x58, 0x2d, 0xd2, 0x3b, 0x81, 0x17, 0x42, 0x79, 0xcb, 0x50, 0xdf, 0xd9, 0xba,
		0x58, 0xd0, 0x9a, 0x91, 0x9b, 0xce, 0xc3, 0x0a, 0x4e, 0x67, 0xf7, 0x21, 0x1c, 0x2b, 0xa8, 0x0d,
		0x8e, 0xb5, 0x5f, 0xfa, 0xf7, 0xc6, 0x5e, 0xfb, 0xb1, 0xd1, 0x6d, 0xd4, 0xe7, 0x3f, 0xeb, 0x36,
		0xee, 0x8d, 0xbd, 0xce, 0x63, 0xbd, 0xbe, 0xe4, 0x9b, 0x77, 0xcb, 0xda, 0x68, 0x3c, 0xd4, 0xeb,
		0xf5, 0x78, 0x22, 0x67, 0x26, 0xb7, 0x67, 0x34, 0xfb, 0xef, 0xf8, 0xdb, 0xe8, 0xdf, 0x44, 0x3c,
		0x84, 0x0a, 0x37, 0xca, 0x08, 0x45, 0xbd, 0xde, 0xfb, 0xd1, 0xed, 0xff, 0xd4, 0x6d, 0xdc, 0x1f,
		0x3e, 0x4e, 0xde, 0xf3, 0x7f, 0x1b, 0x0f, 0x75, 0xfd, 0xb5, 0x69, 0xea, 0xfa, 0xeb, 0x46, 0xd4,
		0xf1, 0xb8, 0xdc, 0xeb, 0xe8, 0xdb, 0x77, 0xdd, 0xee, 0xc2, 0x47, 0x8d, 0xfa, 0x3f, 0x74, 0x49,
		0x79, 0x8c, 0xc6, 0xa7, 0xbb, 0x1e, 0xb1, 0x54, 0x1e, 0x1d, 0xb5, 0x65, 0x56, 0x5b, 0x66, 0xb5,
		0x65, 0x56, 0x1e, 0x1d, 0xc5, 0x0c, 0x2a, 0x98, 0x53, 0x30, 0xa7, 0x98, 0x41, 0x05, 0x72, 0x63,
		0xc4, 0x7c, 0x6c, 0xe5, 0xc3, 0x5b, 0x5c, 0x4e, 0x0c, 0xd8, 0x3e, 0xf1, 0xc2, 0x80, 0x7a, 0xc8,
		0xc2, 0x03, 0x8c, 0x28, 0xf7, 0x56, 0x7b, 0x3e, 0x76, 0x7d, 0xcc, 0xee, 0x14, 0x29, 0xb2, 0x5d,
		0xa4, 0x48, 0x80, 0x09, 0x7b, 0x2b, 0x80, 0x7b, 0x19, 0x6e, 0xd2, 0xda, 0x57, 0x48, 0x86, 0xe8,
		0xd9, 0x50, 0xcf, 0xd8, 0x1d, 0xd4, 0x6b, 0x75, 0x3a, 0x0a, 0xf6, 0x40, 0xb2, 0x5e, 0x73, 0x61,
		0x2f, 0x9b, 0xc7, 0x9e, 0x83, 0x3d, 0x1a, 0x5c, 0x12, 0xc4, 0x42, 0x4b, 0x6e, 0x0c, 0x99, 0x35,
		0x02, 0x1e, 0xb4, 0xae, 0x10, 0x53, 0x78, 0xb7, 0x75, 0x24, 0x70, 0xee, 0xd3, 0x3f, 0x1f, 0xf7,
		0x2b, 0x34, 0x31, 0xdb, 0x45, 0xf9, 0xee, 0xc7, 0x3f, 0xd6, 0x78, 0xa8, 0xf7, 0x9a, 0x5a, 0xab,
		0x3f, 0xf9, 0xe3, 0xa0, 0x67, 0x68, 0xad, 0x7e, 0xa3, 0x51, 0x31, 0x3a, 0xb7, 0x32, 0x33, 0xf4,
		0xe2, 0x58, 0xdc, 0xf4, 0x44, 0x87, 0xaf, 0xf7, 0xad, 0xc7, 0xc6, 0x43, 0x3d, 0x14, 0x8f, 0x66,
		0x32, 0xe9, 0xcd, 0xb0, 0x91, 0xb7, 0x61, 0xf1, 0xe7, 0x61, 0x78, 0xf7, 0xf5, 0x9f, 0x1a, 0xd5,
		0x24, 0x6a, 0xb9, 0xf7, 0x58, 0x28, 0x34, 0x35, 0x29, 0x59, 0x24, 0x28, 0x75, 0x99, 0x4b, 0x5b,
		0xe9, 0xbc, 0x27, 0xd7, 0x79, 0x2a, 0x14, 0x75, 0xfb, 0x89, 0x5a, 0x15, 0x8a, 0xfa, 0x82, 0x43,
		0x51, 0x45, 0xa2, 0xb4, 0x56, 0x00, 0xf1, 0x76, 0xc6, 0x67, 0xf1, 0x87, 0xdd, 0x5f, 0xa5, 0x3e,
		0x16, 0x63, 0xb2, 0xbe, 0x86, 0x25, 0x2f, 0xf8, 0xbf, 0x22, 0x91, 0x58, 0xf4, 0x06, 0x33, 0x6b,
		0xb4, 0x3a, 0x14, 0x2b, 0xfe, 0x3e, 0x2f, 0x16, 0x6b, 0x0c, 0x09, 0x1c, 0x22, 0x1b, 0x44, 0xc7,
		0x8c, 0x01, 0x26, 0x5c, 0xe9, 0x0d, 0xe0, 0xe5, 0x22, 0x3b, 0xb6, 0x91, 0xc8, 0x2c, 0x7a, 0x53,
		0xbd, 0xc8, 0x2c, 0x7a, 0xb3, 0xbe, 0xc8, 0x2c, 0xc6, 0x7c, 0x7c, 0xb9, 0x2c, 0x66, 0x6e, 0x61,
		0x24, 0xa6, 0x45, 0x05, 0x8f, 0xf5, 0x82, 0x31, 0xf4, 0x42, 0x2b, 0x05, 0xdd, 0x32, 0x1f, 0x82,
		0xa4, 0x3a, 0xed, 0x82, 0x88, 0xbb, 0xd7, 0x32, 0x29, 0xfc, 0x15, 0xb3, 0xa9, 0x9c, 0x2e, 0xeb,
		0x77, 0xba, 0xac, 0x92, 0x8e, 0x45, 0x29, 0xd1, 0xae, 0x38, 0x50, 0xe6, 0x8c, 0xc3, 0x82, 0xc4,
		0xf0, 0x6a, 0x39, 0x8f, 0x36, 0x27, 0x3d, 0xe1, 0x2a, 0xbf, 0x42, 0x77, 0xe1, 0x82, 0x4f, 0x04,
		0x69, 0x2a, 0x42, 0x79, 0x8d, 0x65, 0xdb, 0xbd, 0xc2, 0x32, 0x24, 0x23, 0x4b, 0x72, 0x32, 0x25,
		0x2b, 0x5b, 0x85, 0x65, 0xac, 0xb0, 0xac, 0x49, 0xcb, 0x9c, 0xa0, 0x05, 0x92, 0x33, 0xd2, 0xb9,
		0x76, 0x74, 0x09, 0x7b, 0xba, 0xd0, 0x46, 0x5f, 0xd0, 0xbe, 0x16, 0xb7, 0xb3, 0x0b, 0xd9, 0xdb,
		0x45, 0xed, 0xee, 0xd2, 0x16, 0x68, 0x71, 0x4b, 0x54, 0xc2, 0x1e, 0x2f, 0x64, 0x97, 0x2f, 0x0c,
		0x49, 0xdb, 0x78, 0x39, 0x63, 0xf2, 0x6a, 0x3d, 0xa5, 0xfa, 0x9b, 0x60, 0xaa, 0x0a, 0x5b, 0xf1,
		0xe5, 0xad, 0xf9, 0xb2, 0x7c, 0x4d, 0x86, 0xac, 0xd5, 0xae, 0x63, 0x31, 0x11, 0x54, 0x5e, 0x51,
		0x71, 0x79, 0xa5, 0xc5, 0xeb, 0xcd, 0x68, 0x2b, 0x11, 0xed, 0xa7, 0x14, 0xd6, 0x4b, 0x55, 0x58,
		0x02, 0xce, 0x8e, 0x12, 0xca, 0x2d, 0x37, 0xca, 0x45, 0xe9, 0xb4, 0xad, 0xd6, 0x69, 0x2d, 0x63,
		0x07, 0x95, 0x5a, 0x51, 0xf0, 0x97, 0xda, 0xf4, 0xc4, 0x94, 0x8f, 0x08, 0x4a, 0x67, 0xf3, 0x3f,
		0xe2, 0x3c, 0x50, 0x29, 0x3e, 0x48, 0x8c, 0x17, 0xca, 0x7b, 0xea, 0x1c, 0x9e, 0x28, 0x8b, 0x2f,
		0x8a, 0x08, 0x9b, 0xfd, 0xf8, 0x25, 0x8f, 0x0d, 0x58, 0xce, 0x21, 0x7d, 0xe3, 0x95, 0x2f, 0xe2,
		0x97, 0xe3, 0xa4, 0x0d, 0x15, 0x0f, 0xaf, 0x38, 0x0b, 0x15, 0x28, 0xaa, 0xdc, 0x2c, 0x2a, 0x1e,
		0x3e, 0x8d, 0x6c, 0x2a, 0x1e, 0x5e, 0xc1, 0x9c, 0x82, 0xb9, 0x2d, 0x85, 0x39, 0x15, 0x0f, 0xcf,
		0x3b, 0x19, 0xf9, 0xf7, 0xe2, 0x85, 0x93, 0x17, 0x13, 0x3f, 0x2d, 0x2b, 0x06, 0x70, 0x16, 0x07,
		0xa2, 0xc0, 0xe7, 0x06, 0xef, 0x24, 0x60, 0x66, 0xda, 0x0a, 0xf0, 0x5c, 0x9f, 0x55, 0xc1, 0xfd,
		0xb4, 0xd4, 0xc9, 0x58, 0x71, 0x8c, 0x5b, 0xe6, 0x84, 0x2c, 0x86, 0x71, 0xf9, 0xee, 0xa7, 0x9c,
		0xf4, 0x11, 0x0b, 0xe3, 0x99, 0x9d, 0x46, 0x62, 0x95, 0xb4, 0x9c, 0xcf, 0x0a, 0xc7, 0xc9, 0xd9,
		0x75, 0x7b, 0x9a, 0x5f, 0xc2, 0x07, 0x23, 0x97, 0xb2, 0xf0, 0x95, 0x22, 0x9f, 0xbb, 0xa2, 0x33,
		0x14, 0x6d, 0xa5, 0x68, 0xbd, 0x4c, 0xe1, 0x7a, 0xa1, 0xb4, 0x5e, 0x96, 0xf0, 0xad, 0x87, 0xd6,
		0x93, 0xa7, 0xea, 0x6c, 0x77, 0x0c, 0x31, 0xd1, 0x04, 0xc4, 0x42, 0xf1, 0x75, 0xdb, 0xcb, 0xd7,
		0x75, 0x0e, 0x94, 0x13, 0x6a, 0x19, 0x70, 0xc9, 0x87, 0x4b, 0xd7, 0xa7, 0xee, 0xa7, 0x8b, 0x7e,
		0x7d, 0xd6, 0x17, 0xd5, 0x6f, 0xdc, 0x1b, 0x7b, 0x87, 0xcd, 0xc7, 0xc6, 0xbb, 0xe9, 0xe7, 0x7d,
		0xd3, 0xd4, 0x1b, 0xaf, 0x8b, 0xd4, 0x7a, 0xd7, 0x78, 0x30, 0x4d, 0xfd, 0x79, 0xbc, 0x52, 0xa1,
		0x09, 0xa2, 0x91, 0x60, 0x7c, 0x89, 0x7c, 0x71, 0xfd, 0x96, 0xae, 0x54, 0x48, 0xc7, 0xa5, 0xec,
		0x1f, 0x20, 0xd6, 0x8e, 0xd2, 0x64, 0xbb, 0xa3, 0xc9, 0xc4, 0xc5, 0x2b, 0x2d, 0x1a, 0x87, 0x02,
		0x45, 0xc5, 0xce, 0x1d, 0x3e, 0xb5, 0x1e, 0x33, 0x94, 0x1e, 0x9b, 0x1f, 0x92, 0xc3, 0x4e, 0xe7,
		0xa0, 0xa3, 0x3c, 0x4f, 0x1b, 0xf1, 0x3c, 0xad, 0xcd, 0x07, 0x93, 0xbb, 0x1f, 0x16, 0x71, 0xc2,
		0x7c, 0x9a, 0x36, 0x52, 0x66, 0x1b, 0xef, 0xda, 0xc8, 0x11, 0x3a, 0xec, 0x92, 0x94, 0x14, 0xf4,
		0xbf, 0x60, 0x72, 0x05, 0x98, 0x0b, 0xa2, 0x47, 0x06, 0xbc, 0x76, 0x15, 0x68, 0xc9, 0xdd, 0xde,
		0xb2, 0xaf, 0xf7, 0x84, 0xa7, 0x83, 0xe0, 0xc0, 0x47, 0x03, 0x11, 0xee, 0xf2, 0x4d, 0xf6, 0x31,
		0x85, 0x68, 0xa5, 0xd0, 0x71, 0x37, 0x12, 0x17, 0x8d, 0x8b, 0xcb, 0xfc, 0xdf, 0xa1, 0xf0, 0x95,
		0x39, 0xca, 0xec, 0xfa, 0x02, 0x5c, 0x55, 0x16, 0xb5, 0xb4, 0x10, 0xe4, 0xce, 0xed, 0x30, 0x1e,
		0xe9, 0xba, 0x34, 0x2a, 0x5e, 0x71, 0x52, 0xd5, 0xe3, 0xa4, 0x2c, 0x38, 0x44, 0xd2, 0x76, 0x7b,
		0xba, 0x92, 0x9c, 0xdd, 0xee, 0xa3, 0x01, 0xf2, 0x11, 0xb1, 0xb8, 0x9f, 0x86, 0x8d, 0x10, 0x48,
		0x35, 0x35, 0x21, 0x36, 0x27, 0x52, 0x14, 0xbe, 0x17, 0x80, 0x4b, 0x65, 0xda, 0xef, 0xa0, 0x69,
		0x9f, 0x0f, 0xb5, 0x32, 0x90, 0x2b, 0x04, 0xbd, 0xa1, 0x58, 0x86, 0xaf, 0x69, 0xe1, 0x2f, 0xf5,
		0xd4, 0x1f, 0x6f, 0xb9, 0x75, 0x99, 0xbf, 0x87, 0x90, 0x97, 0x12, 0xca, 0xba, 0xe1, 0x08, 0x69,
		0x14, 0x39, 0xc8, 0xca, 0x88, 0x12, 0xd9, 0x8c, 0xc0, 0xec, 0xa7, 0x87, 0xae, 0xf7, 0xaf, 0x39,
		0x9d, 0xf5, 0xcf, 0xff, 0x61, 0x23, 0x4c, 0xf7, 0x75, 0x3d, 0xfc, 0x7f, 0xf2, 0x61, 0x7f, 0x9f,
		0x0f, 0xef, 0xbf, 0x84, 0x07, 0x37, 0x5f, 0xe8, 0x72, 0xe8, 0x9c, 0x1a, 0x3f, 0xce, 0xa3, 0x05,
		0x84, 0x32, 0x78, 0xe9, 0x08, 0x8a, 0xdf, 0x38, 0xa0, 0x6c, 0x13, 0xdb, 0xbe, 0x04, 0x3e, 0x10,
		0xd3, 0x2c, 0x97, 0x30, 0x88, 0x09, 0xad, 0xaf, 0x67, 0x18, 0xf7, 0x80, 0x2e, 0x7a, 0xa4, 0x7d,
		0x09, 0x60, 0x4b, 0x6e, 0xbb, 0xd2, 0x56, 0xc3, 0x0c, 0xb4, 0x87, 0x03, 0x07, 0x2e, 0x11, 0x18,
		0xf8, 0xee, 0x38, 0xc2, 0x7d, 0xd7, 0xf7, 0x11, 0xf5, 0x5c, 0x62, 0x63, 0x32, 0x04, 0xe9, 0x67,
		0xab, 0x49, 0xee, 0xb6, 0x24, 0xc1, 0x74, 0xd5, 0x92, 0xc9, 0x0f, 0xa9, 0xda, 0xc8, 0xc2, 0x59,
		0xb9, 0x88, 0x4a, 0x0d, 0xa1, 0xd4, 0x4f, 0x3f, 0x6e, 0x64, 0xdb, 0xfe, 0xd1, 0xf7, 0x5d, 0xff,
		0x13, 0xa2, 0x14, 0x0e, 0xd1, 0x06, 0x04, 0xc9, 0xf3, 0x11, 0x45, 0x84, 0xdb, 0x09, 0xab, 0xc7,
		0x61, 0x3f, 0xc3, 0x7a, 0xdd, 0xb4, 0x3c, 0xa1, 0xf0, 0xf9, 0xb5, 0x71, 0x3c, 0x00, 0x95, 0x96,
		0x28, 0x89, 0xb1, 0xdc, 0x94, 0x60, 0x3d, 0x37, 0xf1, 0x91, 0xb1, 0x45, 0xb0, 0x46, 0x90, 0x10,
		0xe4, 0xc8, 0x1b, 0xc9, 0xb3, 0xf5, 0xca, 0xda, 0xc9, 0x33, 0xad, 0xe5, 0x99, 0xca, 0xba, 0x49,
		0xce, 0x93, 0x33, 0x1c, 0x16, 0x24, 0xc4, 0x65, 0x00, 0xdd, 0x5a, 0x08, 0xd9, 0x71, 0xe8, 0xc0,
		0xad, 0x16, 0x37, 0x48, 0x27, 0x4d, 0xcd, 0xce, 0xfc, 0x62, 0xc3, 0x9a, 0xb2, 0xc1, 0x95, 0x0d,
		0x0e, 0x64, 0x12, 0xf8, 0xcd, 0x0b, 0x45, 0x47, 0x11, 0xeb, 0xdb, 0x43, 0xac, 0x37, 0x0f, 0x15,
		0xab, 0x2e, 0xb5, 0xbe, 0xaa, 0xb8, 0xdd, 0x88, 0x94, 0x49, 0x5d, 0x6f, 0x00, 0x33, 0x30, 0x8c,
		0x03, 0xeb, 0x9f, 0xb1, 0x13, 0xb5, 0xf8, 0xd6, 0xa3, 0x97, 0xde, 0x7a, 0x4c, 0xcb, 0xa5, 0x3f,
		0xed, 0xef, 0xa7, 0xd4, 0xcf, 0x73, 0x6d, 0x4d, 0x66, 0xb5, 0xe9, 0xc4, 0x10, 0x42, 0x7f, 0x05,
		0xd0, 0x01, 0xae, 0x0f, 0x1c, 0x44, 0x29, 0x60, 0x23, 0x48, 0xd2, 0xaa, 0xb2, 0xba, 0xb6, 0x66,
		0x35, 0xf7, 0x2e, 0x9b, 0x1a, 0xe3, 0x2d, 0xdb, 0xdc, 0xcc, 0x0e, 0x53, 0x64, 0xa5, 0xd1, 0x99,
		0x31, 0x71, 0x07, 0x6a, 0x8f, 0x53, 0x42, 0xf2, 0x0a, 0x0e, 0xe9, 0x0e, 0x6e, 0x75, 0x6c, 0x09,
		0x80, 0x95, 0x38, 0x8b, 0xb6, 0x6a, 0x93, 0x23, 0x75, 0x26, 0xad, 0x52, 0x5b, 0x0c, 0x75, 0xc4,
		0xfc, 0x69, 0xb6, 0x18, 0xea, 0xd8, 0xf8, 0x8e, 0xef, 0x32, 0x84, 0xcf, 0xd0, 0xed, 0xce, 0x3e,
		0xa3, 0x18, 0xb2, 0x8f, 0x2c, 0x4f, 0xb3, 0x5c, 0x42, 0x90, 0xc5, 0x34, 0xcf, 0xc5, 0x19, 0xc7,
		0x54, 0x16, 0x01, 0x7e, 0xb1, 0xae, 0x1c, 0xce, 0x7f, 0x4d, 0x93, 0x59, 0x1f, 0x7e, 0x7b, 0x7f,
		0x06, 0xe2, 0xd6, 0x80, 0x50, 0x6b, 0x8a, 0x53, 0xda, 0x1d, 0x4e, 0x69, 0xd3, 0x7e, 0xdd, 0x50,
		0x96, 0xbb, 0xf3, 0x37, 0xfa, 0x76, 0xe7, 0x6e, 0x35, 0x2e, 0xf5, 0xcc, 0x42, 0x39, 0x16, 0xd2,
		0x0a, 0x43, 0x2c, 0xd7, 0x42, 0x1a, 0x4f, 0x0b, 0xe7, 0x5c, 0x48, 0x1a, 0x11, 0xca, 0xbd, 0x50,
		0x12, 0x71, 0x44, 0x4e, 0xfd, 0x2e, 0x62, 0x4d, 0xfe, 0xe9, 0xdf, 0x55, 0x28, 0x53, 0xf4, 0x14,
		0xb0, 0x32, 0x2c, 0x95, 0x61, 0xa9, 0x0c, 0xcb, 0x1d, 0x33, 0x2c, 0xdf, 0xaa, 0x74, 0x44, 0xeb,
		0x00, 0x79, 0xea, 0x21, 0x64, 0x8b, 0xa3, 0x7b, 0x54, 0x5c, 0x0e, 0xd6, 0x27, 0x67, 0x9f, 0x91,
		0x1d, 0x39, 0x25, 0x85, 0xda, 0x50, 0x26, 0xe3, 0x4b, 0x35, 0x19, 0x37, 0x9b, 0x86, 0x2e, 0x4a,
		0xaf, 0xca, 0xee, 0x24, 0x4d, 0x4c, 0x11, 0x93, 0xea, 0x24, 0x6e, 0xfa, 0x67, 0x48, 0x25, 0xa6,
		0x53, 0x66, 0x65, 0xcc, 0x82, 0x18, 0x15, 0x56, 0x33, 0x72, 0xaa, 0x66, 0xb1, 0x5b, 0x5a, 0xd3,
		0x30, 0x86, 0xb5, 0x4d, 0x60, 0x78, 0xc9, 0x5e, 0x55, 0xb1, 0x53, 0x15, 0xec, 0x53, 0x4b, 0xeb,
		0x54, 0xb1, 0x57, 0x55, 0xec, 0x54, 0xbb, 0x92, 0x92, 0xde, 0xae, 0x62, 0xa7, 0xaa, 0x38, 0x7d,
		0x30, 0x60, 0x2e, 0x41, 0x32, 0x1d, 0x13, 0x2a, 0xd9, 0xdf, 0xb0, 0xce, 0x53, 0x81, 0xe0, 0x85,
		0xc2, 0x08, 0xf8, 0x9c, 0xd3, 0x5d, 0x0c, 0x13, 0x2f, 0x1f, 0x22, 0x2e, 0x31, 0xc0, 0x7b, 0xf1,
		0x35, 0x17, 0x75, 0x5e, 0xaa, 0xf1, 0x4c, 0x11, 0x1b, 0xbc, 0x2f, 0x2a, 0x8c, 0x5c, 0x7a, 0x09,
		0x16, 0x1c, 0xbc, 0xed, 0x8a, 0xb1, 0x98, 0x7d, 0x7e, 0x15, 0x3a, 0xbe, 0x0e, 0x29, 0x52, 0x41,
		0xe3, 0x99, 0xc4, 0x08, 0x83, 0x4c, 0x82, 0xf6, 0x8e, 0x8a, 0xcb, 0x11, 0x23, 0x5f, 0x3c, 0xc0,
		0xab, 0xc9, 0x5f, 0x27, 0xd3, 0x14, 0xa5, 0x45, 0x5a, 0x8a, 0x16, 0xa9, 0x08, 0x2d, 0x92, 0x77,
		0x8e, 0x37, 0x29, 0x08, 0xed, 0x31, 0x26, 0x5a, 0x28, 0x18, 0x01, 0x95, 0xa7, 0x21, 0x66, 0x6a,
		0x0b, 0x0e, 0xc4, 0x92, 0xcc, 0x3c, 0x36, 0xa2, 0xd8, 0x47, 0x76, 0x2c, 0x9f, 0xf1, 0x01, 0x03,
		0x4c, 0x18, 0xf2, 0x07, 0xd0, 0x42, 0x3a, 0x00, 0x27, 0x04, 0x7c, 0xfd, 0xe5, 0x3d, 0x78, 0xd3,
		0x6a, 0x1d, 0x80, 0xd0, 0xaa, 0x00, 0xa1, 0x91, 0x6a, 0x92, 0x11, 0x8c, 0xae, 0xfc, 0xa7, 0x70,
		0x8c, 0x80, 0x8f, 0xa0, 0x0d, 0x28, 0x1a, 0x43, 0xc2, 0xb0, 0x45, 0x01, 0xa4, 0x00, 0x0f, 0x8e,
		0xc3, 0xfe, 0x7d, 0xe3, 0xdd, 0xd3, 0x01, 0xf8, 0x0d, 0xf9, 0x68, 0x0f, 0x60, 0x66, 0x12, 0x1f,
		0x0d, 0x42, 0xfb, 0x36, 0xaa, 0xcd, 0x1f, 0x02, 0x53, 0xe6, 0x73, 0xbe, 0x75, 0xb2, 0x48, 0x28,
		0xa0, 0x88, 0x81, 0xcb, 0x3b, 0x80, 0x08, 0xbc, 0x74, 0x42, 0xa0, 0x72, 0x7d, 0x93, 0xd8, 0x98,
		0xc6, 0x7f, 0xcd, 0x76, 0x51, 0xf4, 0xe1, 0xc5, 0x88, 0x46, 0x69, 0xc2, 0xb1, 0xc8, 0x0a, 0x5b,
		0x98, 0x4c, 0xd7, 0xd2, 0xf0, 0x40, 0xc6, 0x5a, 0x2b, 0xa8, 0xbe, 0x0a, 0x2f, 0xbe, 0xb5, 0xe9,
		0xab, 0x99, 0xc5, 0x18, 0x3d, 0xf6, 0xba, 0xb5, 0x88, 0xe0, 0x7c, 0x49, 0xd0, 0x97, 0xf2, 0x34,
		0xe6, 0xc2, 0x0c, 0x23, 0x12, 0x8c, 0x51, 0x94, 0x15, 0x54, 0x66, 0x9e, 0x27, 0x6a, 0xa0, 0x2d,
		0x63, 0x8d, 0x91, 0x60, 0x2c, 0x2f, 0x19, 0xe7, 0xee, 0xb7, 0xc8, 0xd1, 0x56, 0xc8, 0x24, 0x32,
		0xc2, 0x67, 0xfc, 0x7e, 0x56, 0xc4, 0x02, 0x6a, 0x86, 0x55, 0x3f, 0x7c, 0xf9, 0xf7, 0xe7, 0x22,
		0x95, 0x5b, 0x1c, 0xc7, 0x3e, 0x7e, 0x3b, 0x3f, 0xf9, 0xfc, 0xab, 0xa4, 0xf1, 0xb2, 0x27, 0x3b,
		0x3e, 0x27, 0x02, 0x91, 0x38, 0xcb, 0x61, 0x37, 0x7c, 0x38, 0x69, 0xdf, 0x5e, 0xf4, 0xab, 0xf1,
		0xa3, 0xe5, 0x2a, 0xf8, 0xa5, 0xb5, 0xbf, 0x9f, 0x85, 0xf8, 0xf5, 0xbc, 0x36, 0x9d, 0xe0, 0xca,
		0x2a, 0xb0, 0x77, 0x4f, 0xea, 0x26, 0x27, 0xf0, 0xa4, 0x78, 0x76, 0x79, 0x0a, 0x6b, 0x66, 0x41,
		0x87, 0x4a, 0xb1, 0xf5, 0xf6, 0xf0, 0xa0, 0x0b, 0xf8, 0xe5, 0xd8, 0x13, 0x75, 0x44, 0xc1, 0xaf,
		0xbe, 0x1b, 0x78, 0xe0, 0xd3, 0xc9, 0xcf, 0x40, 0x9b, 0x55, 0x83, 0x45, 0xe4, 0xbb, 0xc4, 0x36,
		0x65, 0x1e, 0xef, 0xa7, 0xa3, 0xb4, 0x57, 0xac, 0xad, 0x75, 0x6c, 0x55, 0x16, 0x54, 0x40, 0x81,
		0x61, 0x94, 0xfe, 0xd1, 0xc7, 0x0d, 0xad, 0x80, 0xfe, 0x9a, 0x76, 0x35, 0x22, 0x09, 0xbf, 0xf1,
		0x00, 0x13, 0x1b, 0xdd, 0xca, 0xdb, 0x89, 0x93, 0x8a, 0xc5, 0x4c, 0xc4, 0x6f, 0x77, 0x94, 0xa1,
		0x31, 0x80, 0x94, 0xe2, 0x21, 0x41, 0x76, 0x7c, 0xe8, 0x08, 0x0c, 0x5c, 0x1f, 0x20, 0x68, 0x8d,
		0x66, 0x2c, 0xc5, 0xf7, 0xc9, 0xde, 0x92, 0x02, 0xe6, 0x9a, 0x04, 0x0f, 0x4e, 0xc2, 0x5f, 0x06,
		0xee, 0xe5, 0xff, 0x23, 0x8b, 0xef, 0x3e, 0xbf, 0x7d, 0xfe, 0x74, 0x36, 0x9d, 0xe3, 0x70, 0x72,
		0x95, 0xf1, 0xa6, 0x8c, 0xb7, 0x22, 0xea, 0xa2, 0xb8, 0x21, 0x16, 0x60, 0xc2, 0x0e, 0x5a, 0x05,
		0x6c, 0xb0, 0x37, 0x12, 0x55, 0xe4, 0xce, 0xc6, 0x96, 0xd0, 0x46, 0x45, 0x82, 0x8d, 0x92, 0xca,
		0x05, 0xcf, 0xcc, 0x26, 0xf5, 0xcb, 0x06, 0xda, 0x4c, 0xe7, 0xa6, 0x68, 0xc0, 0x4d, 0x41, 0x63,
		0x0e, 0x14, 0x0d, 0x4a, 0x5a, 0x18, 0xba, 0x76, 0xeb, 0xa8, 0x7d, 0x74, 0xf8, 0xa6, 0x75, 0xd4,
		0x79, 0xf9, 0x63, 0xf8, 0xbc, 0x5a, 0x72, 0xdb, 0xed, 0x44, 0xa0, 0xad, 0xb4, 0x70, 0x94, 0x61,
		0x98, 0x61, 0x18, 0x66, 0x8d, 0xdb, 0x4e, 0x5a, 0x82, 0x0e, 0xa4, 0x8c, 0x1f, 0x8e, 0x1c, 0x16,
		0x08, 0x5e, 0x4a, 0x57, 0x2e, 0x4a, 0x1a, 0x62, 0x0a, 0x18, 0x1e, 0x23, 0xca, 0xe0, 0xd8, 0x03,
		0x98, 0xd8, 0xd8, 0x82, 0x0c, 0x45, 0x7c, 0x5e, 0xf8, 0xf9, 0x84, 0x44, 0x0c, 0x7f, 0x2a, 0x66,
		0xf4, 0xa2, 0x1f, 0x34, 0xc9, 0x3c, 0xbd, 0x08, 0xea, 0x48, 0x1f, 0xea, 0x7b, 0x20, 0xf0, 0x34,
		0xe6, 0x6a, 0xb6, 0x7b, 0x43, 0x00, 0xf3, 0x21, 0xa1, 0x38, 0xfc, 0xb1, 0x86, 0x0e, 0xc2, 0xdf,
		0x32, 0x89, 0x35, 0x63, 0x57, 0x46, 0x2d, 0x0c, 0x4e, 0x21, 0x65, 0xef, 0x79, 0xb3, 0x29, 0xfb,
		0x92, 0x13, 0x92, 0x0c, 0x12, 0x1b, 0xfa, 0xb6, 0x49, 0x70, 0xda, 0xd0, 0xd4, 0x4d, 0x92, 0x4e,
		0xb4, 0x82, 0xa7, 0xfd, 0x9d, 0x3c, 0x07, 0x20, 0x90, 0xb8, 0x14, 0x59, 0xfc, 0x77, 0x7c, 0xe4,
		0x44, 0x94, 0x64, 0x68, 0xc8, 0x86, 0x25, 0xbf, 0x13, 0x7c, 0x0b, 0x3e, 0x7a, 0xae, 0x35, 0x02,
		0xf5, 0xff, 0x85, 0x04, 0x34, 0xf7, 0x40, 0xf3, 0xe8, 0x8d, 0x01, 0x0c, 0xa3, 0xcb, 0xff, 0x07,
		0xdf, 0xcf, 0xdf, 0x37, 0x14, 0x17, 0xa9, 0xcc, 0xd9, 0x27, 0x36, 0x67, 0x43, 0x09, 0x66, 0xd8,
		0xba, 0xa2, 0x87, 0xed, 0x02, 0x36, 0xed, 0x5b, 0x65, 0xd3, 0x2a, 0x9b, 0x76, 0x7e, 0xe8, 0x8a,
		0x1d, 0x54, 0x52, 0xd6, 0xad, 0x62, 0x41, 0x57, 0xd2, 0x77, 0x53, 0x6d, 0xad, 0x6c, 0xdd, 0xe2,
		0x24, 0x68, 0x6a, 0x14, 0x77, 0xd2, 0xf2, 0x75, 0x3d, 0xe4, 0x17, 0xf6, 0x97, 0xa7, 0x2b, 0x17,
		0x77, 0x97, 0x5b, 0x81, 0xef, 0x23, 0xc2, 0x40, 0xd8, 0x1a, 0x77, 0xe6, 0x41, 0x67, 0x95, 0xeb,
		0x3c, 0x32, 0x38, 0x63, 0x87, 0x39, 0x98, 0xf1, 0x97, 0xcf, 0xb9, 0xca, 0xbf, 0x78, 0xc8, 0x8f,
		0x3d, 0xe5, 0xca, 0x80, 0x54, 0x06, 0x64, 0x11, 0xc5, 0xa1, 0x9c, 0xd9, 0xb3, 0x8f, 0x56, 0xca,
		0x99, 0xdd, 0x2c, 0xee, 0xcc, 0x6e, 0x95, 0x71, 0x66, 0x1f, 0xa4, 0x9d, 0xd9, 0x05, 0xea, 0xb7,
		0x79, 0xbf, 0x3f, 0xff, 0xfe, 0xb9, 0xe0, 0xef, 0x77, 0xa2, 0xce, 0x7f, 0xfd, 0x74, 0xfc, 0xf9,
		0xbc, 0x48, 0xfd, 0xc3, 0xb0, 0xfe, 0xe7, 0x2f, 0xe7, 0x17, 0x67, 0x5f, 0x3f, 0x7e, 0xfb, 0x58,
		0xac, 0x8d, 0x37, 0x61, 0x1b, 0xa7, 0x5f, 0xfe, 0xfd, 0xf1, 0xeb, 0xc5, 0xe9, 0xf1, 0xff, 0x7d,
		0xfc, 0x7a, 0xc1, 0x07, 0xb3, 0xba, 0x9e, 0xfd, 0x68, 0xb0, 0x84, 0x32, 0x66, 0x2e, 0xa9, 0xcd,
		0xe3, 0x02, 0x8a, 0x78, 0xf6, 0x17, 0x46, 0x48, 0xca, 0x3f, 0x31, 0x5d, 0xd0, 0xa9, 0xc9, 0x12,
		0xba, 0x4e, 0x6b, 0x71, 0xf0, 0x92, 0x00, 0x85, 0x83, 0x22, 0x01, 0x0a, 0xb1, 0xb0, 0x76, 0x41,
		0xbb, 0x68, 0x78, 0x43, 0x53, 0x85, 0x37, 0x3c, 0xa3, 0x61, 0x3f, 0x35, 0x5d, 0x94, 0x61, 0x5f,
		0xdc, 0xb0, 0x4f, 0x8d, 0xe2, 0xf6, 0x19, 0xf6, 0xa5, 0x82, 0x69, 0x05, 0x2f, 0x2e, 0x4b, 0xca,
		0xe7, 0x5e, 0x60, 0x16, 0x5d, 0x0d, 0x22, 0x10, 0xc3, 0x0d, 0x04, 0x2e, 0x32, 0x3b, 0x73, 0x7d,
		0x76, 0xf1, 0x8d, 0x37, 0xb6, 0x81, 0xc0, 0xf4, 0x6b, 0x07, 0x12, 0x89, 0x1b, 0xa8, 0xa3, 0xe2,
		0x72, 0x81, 0xe9, 0x01, 0x61, 0x70, 0x38, 0x44, 0x36, 0x80, 0xc4, 0x06, 0xf1, 0x5b, 0xde, 0x0e,
		0xf0, 0x90, 0x0f, 0x04, 0xce, 0x55, 0x48, 0xc7, 0xa9, 0xab, 0xe3, 0xfb, 0x62, 0xc8, 0x51, 0xa1,
		0x38, 0xf5, 0x48, 0x2e, 0xe4, 0x77, 0xdc, 0x71, 0xbd, 0x62, 0x9b, 0xed, 0x71, 0xe0, 0x30, 0xec,
		0x39, 0x68, 0x46, 0x2a, 0xb7, 0x61, 0x77, 0x2c, 0x24, 0xac, 0x5b, 0xb6, 0x35, 0x16, 0x11, 0xe6,
		0xcd, 0xd8, 0x5d, 0xc5, 0xf7, 0xb8, 0xe2, 0xe9, 0xcd, 0x16, 0xb0, 0x50, 0x26, 0x52, 0x68, 0x92,
		0xee, 0x2c, 0x3a, 0xf9, 0xa9, 0xeb, 0xfb, 0xf4, 0xa6, 0x1b, 0xca, 0xfa, 0xe4, 0x35, 0x37, 0xc9,
		0x99, 0xec, 0x88, 0x48, 0x25, 0x3d, 0x9b, 0xf2, 0x0b, 0xb2, 0xc9, 0xcf, 0x52, 0xcc, 0x44, 0xf9,
		0x24, 0x68, 0x49, 0x63, 0x52, 0xc9, 0xd0, 0xd6, 0x4b, 0x3e, 0x4e, 0x54, 0xa5, 0x3c, 0x0e, 0x26,
		0x35, 0x8b, 0x21, 0x61, 0x28, 0x05, 0x3c, 0xe0, 0x32, 0x51, 0xd6, 0x1e, 0xb4, 0xae, 0x10, 0x93,
		0xa0, 0x31, 0x07, 0x30, 0x70, 0x98, 0xd4, 0xee, 0xa1, 0xd6, 0x14, 0x93, 0xba, 0xbe, 0x42, 0x64,
		0x85, 0xc8, 0x0a, 0x91, 0x9f, 0x65, 0x6f, 0xb4, 0xd9, 0x5c, 0x14, 0xc4, 0xb5, 0x91, 0x86, 0x6e,
		0x19, 0x22, 0xb4, 0x70, 0x2e, 0x0a, 0xee, 0xaa, 0x2d, 0x60, 0xfc, 0xd6, 0xd6, 0x81, 0xd8, 0x2f,
		0x2d, 0x03, 0x47, 0xb4, 0xef, 0x62, 0x88, 0xb2, 0x4d, 0xe7, 0xc9, 0xd8, 0xcc, 0xa6, 0x5a, 0xd4,
		0x42, 0x17, 0xda, 0x54, 0xff, 0xc1, 0x1b, 0x7b, 0x92, 0xbb, 0xd1, 0x7f, 0x47, 0x77, 0x73, 0x17,
		0xe5, 0x02, 0xa1, 0xfb, 0xc0, 0xf2, 0xd7, 0x9f, 0xf8, 0x45, 0xc5, 0xb2, 0xeb, 0x4d, 0x7e, 0x9d,
		0x09, 0xae, 0xaf, 0xe5, 0x43, 0xb7, 0x42, 0xa0, 0xc4, 0x6c, 0x49, 0x71, 0xdb, 0xb1, 0x94, 0xad,
		0x28, 0x66, 0x1b, 0x6e, 0xfc, 0x82, 0xfc, 0x1c, 0xce, 0x44, 0x44, 0xf8, 0xcb, 0xdc, 0x14, 0xee,
		0xbb, 0x19, 0xec, 0x72, 0xa2, 0x49, 0x79, 0x29, 0xb1, 0x9b, 0xc2, 0xcf, 0x47, 0x08, 0x84, 0xc5,
		0x27, 0xfe, 0xed, 0xf8, 0xea, 0xba, 0x38, 0xd8, 0x72, 0x00, 0x2f, 0x7d, 0x6c, 0xa9, 0xcb, 0xf1,
		0xb7, 0xeb, 0x72, 0x7c, 0x31, 0xf7, 0xae, 0x88, 0x3b, 0x57, 0xcc, 0x7d, 0x2b, 0xe7, 0xae, 0x8d,
		0xce, 0x1a, 0x07, 0xc4, 0x46, 0x03, 0x4c, 0x84, 0x76, 0x55, 0x91, 0x43, 0x37, 0x54, 0xed, 0x22,
		0x85, 0x5b, 0x51, 0x92, 0x32, 0x4c, 0x50, 0xb9, 0xec, 0xe2, 0xe2, 0x6e, 0xc5, 0xa8, 0x6b, 0x42,
		0x8e, 0xfb, 0xb8, 0x63, 0x42, 0x4e, 0xc3, 0xd4, 0x18, 0xe5, 0x9d, 0x02, 0x96, 0xd6, 0xa5, 0x42,
		0x60, 0x94, 0x9d, 0x59, 0x45, 0x28, 0xa3, 0x4a, 0xf1, 0x4c, 0x2a, 0x39, 0xcc, 0x74, 0x6e, 0xe6,
		0x14, 0x85, 0x3e, 0xc2, 0xe8, 0x93, 0xc7, 0x24, 0xd7, 0xe2, 0x3b, 0x24, 0x64, 0xf2, 0x0f, 0x4f,
		0xab, 0xc8, 0x79, 0x34, 0xa2, 0x08, 0xaf, 0xf4, 0xa5, 0xab, 0x5d, 0x10, 0x78, 0x0f, 0xb6, 0x7b,
		0x43, 0x54, 0x26, 0x62, 0x75, 0x79, 0x45, 0x89, 0xa4, 0xf2, 0x1b, 0xf0, 0xf0, 0x45, 0xa7, 0x71,
		0xe4, 0x17, 0xc7, 0x5c, 0x3d, 0xb9, 0x15, 0x72, 0x0a, 0x29, 0x03, 0x57, 0x84, 0x1f, 0xb6, 0xc1,
		0x63, 0x94, 0xb6, 0xea, 0x6e, 0x20, 0x05, 0xc2, 0xcd, 0xaa, 0xe5, 0xb2, 0x3b, 0xcb, 0xc5, 0x86,
		0x0c, 0x69, 0x90, 0xd8, 0x5a, 0x28, 0x31, 0xeb, 0xbe, 0x8a, 0xe1, 0x0c, 0x32, 0x86, 0x7c, 0x22,
		0xcc, 0x4f, 0xd7, 0x4c, 0xd3, 0xbe, 0x6f, 0x3f, 0x6a, 0xe1, 0x4b, 0x6b, 0xf2, 0x72, 0x1e, 0xbd,
		0x74, 0x67, 0x5e, 0xea, 0xa6, 0xa9, 0x9b, 0xa6, 0xfd, 0x53, 0xe3, 0x5d, 0xfd, 0xcf, 0x87, 0x9e,
		0x69, 0xfe, 0x64, 0x9a, 0x5a, 0x7f, 0xa6, 0x44, 0xa3, 0xb6, 0xb9, 0x9c, 0x73, 0xcf, 0xb3, 0x01,
		0xcd, 0x8b, 0x6d, 0xc8, 0xdb, 0x81, 0x66, 0x84, 0x33, 0x08, 0x5a, 0x7d, 0x51, 0x52, 0x41, 0x6c,
		0x0b, 0x58, 0x7e, 0x49, 0x51, 0x31, 0xeb, 0x2f, 0x20, 0xf8, 0xaf, 0x00, 0x81, 0x28, 0x35, 0xfc,
		0x00, 0xc7, 0x89, 0x28, 0xa6, 0x00, 0xa6, 0x36, 0xa2, 0xcf, 0x6d, 0x0a, 0x8a, 0x6f, 0x32, 0x6d,
		0x77, 0x0c, 0x31, 0xc9, 0xbb, 0x3d, 0x48, 0x04, 0x48, 0x44, 0xef, 0x72, 0x11, 0xbb, 0xe3, 0x49,
		0x5c, 0x4d, 0x48, 0xde, 0xd9, 0x52, 0xf8, 0x30, 0x94, 0xfc, 0xe1, 0xa7, 0x47, 0xb1, 0xcb, 0xa9,
		0xe4, 0x1f, 0xb5, 0xd5, 0x39, 0xa8, 0xde, 0xc3, 0x16, 0xc4, 0xe7, 0x0c, 0x96, 0x5c, 0x58, 0x25,
		0xd5, 0xea, 0xf5, 0x7a, 0x0f, 0x6a, 0x7f, 0x1f, 0x6b, 0x7f, 0x1a, 0xda, 0xd1, 0x45, 0x3f, 0xf5,
		0x87, 0x69, 0x6a, 0x17, 0xfd, 0xc6, 0xbd, 0xb1, 0x77, 0xd8, 0x7c, 0x6c, 0xbc, 0x9b, 0x7e, 0xde,
		0x37, 0x4d, 0xbd, 0xf1, 0xba, 0x48, 0xad, 0x77, 0x8d, 0x07, 0xd3, 0xd4, 0x57, 0xaf, 0xd4, 0x7e,
		0x79, 0xd0, 0xf6, 0x60, 0xc6, 0x56, 0x6e, 0x1e, 0xb6, 0x79, 0x61, 0x31, 0xe0, 0x3e, 0x06, 0x91,
		0x76, 0x01, 0x61, 0x1d, 0x4c, 0x86, 0x3a, 0x38, 0x9e, 0xd8, 0x9c, 0x16, 0x24, 0xc0, 0x83, 0x3e,
		0xc3, 0x16, 0xf6, 0xf8, 0x39, 0x1a, 0x02, 0x0c, 0xad, 0x39, 0x29, 0x58, 0x7a, 0x77, 0xaf, 0x20,
		0x7d, 0xe3, 0xbb, 0xfb, 0x70, 0xaa, 0x90, 0x1d, 0x9b, 0x21, 0xe2, 0x9b, 0x98, 0xd9, 0x6a, 0x72,
		0x7b, 0x98, 0x33, 0x18, 0x25, 0x2d, 0x8d, 0xc9, 0xe8, 0xc4, 0x1e, 0x08, 0xe5, 0x6a, 0x18, 0x40,
		0xdf, 0x06, 0x3e, 0xc4, 0x0e, 0xb8, 0xc1, 0x8e, 0x03, 0x7c, 0xf4, 0x57, 0x80, 0xfd, 0x70, 0x9f,
		0x03, 0x99, 0x49, 0x78, 0x0a, 0x53, 0x7e, 0x79, 0x31, 0xc0, 0x34, 0xc9, 0x8c, 0x7c, 0x33, 0x42,
		0x11, 0xa1, 0x1d, 0x8b, 0x9d, 0xc6, 0xb3, 0x28, 0x3b, 0x98, 0x32, 0x7e, 0x70, 0x0b, 0x32, 0xe0,
		0xa0, 0x70, 0xdb, 0xd4, 0x04, 0x68, 0xe2, 0x9f, 0x50, 0xbb, 0x23, 0xb5, 0x3b, 0x7a, 0xa2, 0x9b,
		0x30, 0xe9, 0x4d, 0x37, 0xb1, 0xf1, 0xbb, 0x53, 0x9b, 0x79, 0x03, 0x84, 0x44, 0x5a, 0xfc, 0xe5,
		0x56, 0x72, 0x52, 0x4b, 0x6e, 0x21, 0x9f, 0xc7, 0x24, 0x5d, 0x08, 0xfb, 0x3c, 0x69, 0x88, 0x6b,
		0x41, 0x67, 0xb2, 0xae, 0x99, 0x0b, 0x10, 0x3f, 0x30, 0x81, 0xe9, 0x28, 0x59, 0x9d, 0xc8, 0x06,
		0x0e, 0x26, 0x57, 0x26, 0x39, 0x21, 0x60, 0x10, 0xb0, 0x80, 0xaf, 0x6c, 0xe4, 0x23, 0x30, 0x86,
		0x77, 0xe0, 0x12, 0x81, 0xb1, 0x1b, 0xad, 0x75, 0x02, 0x9a, 0x51, 0xcb, 0xcc, 0x05, 0x9e, 0xef,
		0x5e, 0x63, 0x1b, 0x01, 0x1f, 0xd9, 0x01, 0xb1, 0x21, 0xb1, 0xee, 0x74, 0x93, 0xfc, 0x12, 0x6f,
		0x1d, 0x30, 0xc1, 0x0c, 0x43, 0x07, 0x5c, 0x23, 0x9f, 0x62, 0xde, 0x0d, 0x4c, 0x43, 0x6c, 0x70,
		0xf0, 0x18, 0x33, 0x64, 0x87, 0xf5, 0x9b, 0x2a, 0x0a, 0x7a, 0xe7, 0xa3, 0xa0, 0x53, 0xf1, 0x01,
		0xf2, 0x21, 0x80, 0xe9, 0xca, 0xc5, 0xa2, 0x00, 0xcf, 0x42, 0x51, 0x0e, 0x9b, 0x99, 0xa4, 0x60,
		0x0c, 0x28, 0xb2, 0xf9, 0xf6, 0x37, 0x26, 0xec, 0x78, 0x62, 0x6c, 0x17, 0xa8, 0x10, 0x69, 0xd1,
		0x7a, 0x2a, 0x20, 0x4f, 0x52, 0xdf, 0x95, 0xd0, 0x7b, 0x45, 0xf4, 0xdf, 0x82, 0x1e, 0x4c, 0x07,
		0xe4, 0x45, 0xc7, 0x78, 0x6e, 0xba, 0xe9, 0x85, 0xf5, 0x84, 0xc1, 0xc0, 0x73, 0x01, 0x42, 0xf2,
		0x78, 0x20, 0x12, 0x60, 0x24, 0x06, 0x09, 0x51, 0x4b, 0x0b, 0xa8, 0x10, 0xef, 0xb7, 0x8e, 0x15,
		0x1e, 0x28, 0x3c, 0xd8, 0x25, 0x3c, 0x98, 0x5d, 0x58, 0x95, 0x88, 0xd3, 0x2d, 0x1a, 0x60, 0x38,
		0xe5, 0x37, 0x9f, 0xf6, 0x9e, 0xfa, 0xb5, 0x5f, 0x4a, 0xff, 0xd4, 0xe1, 0xa8, 0x29, 0x7e, 0x6a,
		0x5f, 0x62, 0x6f, 0x22, 0xe4, 0x1d, 0xe1, 0x2f, 0x67, 0x10, 0xfb, 0x17, 0x67, 0x51, 0xcb, 0x67,
		0xb9, 0xd7, 0x26, 0x55, 0xcf, 0x45, 0x94, 0xcb, 0xdf, 0xc9, 0x0d, 0x45, 0x19, 0x6f, 0xd1, 0xb5,
		0x03, 0x49, 0x3e, 0xe3, 0xc8, 0x4b, 0x89, 0x51, 0x8d, 0x30, 0xa2, 0x6d, 0xdc, 0x01, 0xf8, 0xe3,
		0xf4, 0xf8, 0xb3, 0xe2, 0x0f, 0xab, 0xcf, 0x1f, 0xda, 0x12, 0x37, 0x0f, 0x4e, 0xdd, 0x47, 0xc2,
		0x97, 0xf7, 0xcd, 0x0b, 0x88, 0xe3, 0x92, 0x21, 0x48, 0x55, 0x8f, 0xd8, 0xc0, 0x97, 0xc0, 0xe7,
		0x0d, 0xd8, 0xf6, 0xed, 0xf0, 0x07, 0x6c, 0x2b, 0x82, 0x83, 0x04, 0xca, 0x0a, 0x7a, 0x29, 0x27,
		0xff, 0xc9, 0x1d, 0xce, 0x94, 0x37, 0x77, 0x25, 0xbd, 0x97, 0xa5, 0x1d, 0x7b, 0xc5, 0x1d, 0x7c,
		0x92, 0x06, 0x2c, 0x28, 0x9a, 0x08, 0x73, 0x3a, 0x24, 0x46, 0xab, 0xfd, 0x72, 0x46, 0xa5, 0xc2,
		0x57, 0x2b, 0xda, 0x98, 0x7a, 0x0e, 0xbc, 0xd3, 0x62, 0x1b, 0x42, 0x14, 0xda, 0xd3, 0xb5, 0xe4,
		0xb0, 0x3d, 0xae, 0x0a, 0xc2, 0xaa, 0x80, 0xb9, 0xe1, 0x76, 0x18, 0x60, 0x02, 0x7e, 0xfd, 0x7e,
		0x02, 0x5c, 0x1f, 0xbc, 0x3f, 0x3d, 0x51, 0x30, 0xaf, 0x60, 0x5e, 0xc1, 0xbc, 0x82, 0xf9, 0xb0,
		0x5b, 0x6f, 0x0d, 0x05, 0xf2, 0x6b, 0x00, 0x79, 0x1a, 0x5c, 0x12, 0x24, 0xe1, 0x2d, 0x8c, 0xcb,
		0xcb, 0x01, 0xfb, 0x67, 0xc4, 0x6e, 0x5c, 0xff, 0x0a, 0x44, 0x95, 0x29, 0xa7, 0x38, 0xc3, 0xfd,
		0x9d, 0x72, 0xc3, 0x2b, 0x37, 0x7c, 0x72, 0xd3, 0x99, 0x77, 0xdd, 0xd6, 0x84, 0xc7, 0x62, 0xb3,
		0x21, 0xca, 0xf5, 0x7a, 0xcf, 0xd0, 0x8e, 0xfa, 0x0f, 0xbd, 0xa6, 0x76, 0xd4, 0x8f, 0xde, 0x36,
		0xf9, 0x4b, 0xf4, 0xbe, 0xd5, 0x33, 0xb4, 0xf6, 0xe4, 0x7d, 0xa7, 0x67, 0x68, 0x9d, 0x7e, 0xc3,
		0x34, 0xf5, 0xc6, 0xfd, 0xc1, 0xa3, 0x7c, 0xc5, 0xfd, 0xf8, 0xc7, 0x1a, 0x0f, 0xf5, 0x5e, 0x53,
		0x6b, 0xf5, 0x27, 0x7f, 0x1c, 0xf4, 0x0c, 0xad, 0xd5, 0x6f, 0x94, 0x0f, 0x71, 0xde, 0x20, 0x3d,
		0xd9, 0x94, 0xa7, 0x27, 0x0b, 0x65, 0x90, 0x91, 0x64, 0x2c, 0x0b, 0xe7, 0x6b, 0xcb, 0x0a, 0x7b,
		0x5e, 0xca, 0x6a, 0xad, 0x0e, 0x7e, 0x5e, 0x05, 0x85, 0x6c, 0x84, 0x38, 0xf4, 0x81, 0x93, 0x0f,
		0x0a, 0xfd, 0x14, 0xfa, 0x09, 0x50, 0xa4, 0xcb, 0x64, 0x42, 0x20, 0xd7, 0xab, 0xe4, 0x8d, 0x1f,
		0x4f, 0x65, 0xc9, 0x1a, 0xca, 0x92, 0x9d, 0x1f, 0x92, 0xb6, 0x71, 0x74, 0xa8, 0x6c, 0x59, 0x51,
		0x08, 0x2f, 0x92, 0x1d, 0x24, 0x1b, 0xaa, 0x55, 0x22, 0x8c, 0x45, 0x27, 0x53, 0x0e, 0x1e, 0xe5,
		0x79, 0x97, 0xfe, 0x08, 0xab, 0x8b, 0xfa, 0x95, 0x5e, 0x65, 0x3c, 0xd9, 0x64, 0x06, 0x57, 0x9d,
		0x35, 0xca, 0x9e, 0xbb, 0xfc, 0x39, 0x2b, 0x34, 0x57, 0xd9, 0x73, 0x34, 0xff, 0x04, 0x39, 0x73,
		0x92, 0x3b, 0x17, 0xb5, 0xa5, 0x67, 0xf3, 0xb3, 0x86, 0x7f, 0x76, 0xe4, 0xa7, 0xe3, 0x9b, 0xea,
		0xd9, 0x64, 0x40, 0xc7, 0xae, 0x8d, 0x9c, 0x85, 0x7e, 0xcd, 0x9f, 0x15, 0x88, 0x4a, 0xcd, 0x3d,
		0xd7, 0xc2, 0x21, 0x01, 0x5e, 0x0a, 0xb8, 0x83, 0xe5, 0xc7, 0xb9, 0x56, 0xf8, 0xec, 0x56, 0x9a,
		0x2f, 0x59, 0xe6, 0xca, 0xb4, 0x7f, 0xe3, 0x65, 0xa3, 0x93, 0x63, 0x8e, 0x08, 0x9b, 0x1f, 0xc2,
		0xe6, 0xc6, 0xac, 0x79, 0x31, 0xae, 0x49, 0xca, 0xf8, 0x2a, 0x1f, 0x5b, 0x2d, 0x49, 0x93, 0x90,
		0xef, 0x63, 0x9d, 0x16, 0x15, 0x75, 0xb4, 0x8e, 0xa1, 0x17, 0x4e, 0x16, 0xcf, 0x6d, 0x9e, 0x4a,
		0xc8, 0xd0, 0x05, 0x11, 0xb3, 0xa6, 0x65, 0x12, 0x6c, 0x4f, 0xea, 0x81, 0xcd, 0xa4, 0x54, 0x2b,
		0xea, 0x81, 0xcd, 0xa2, 0x4c, 0xd7, 0xec, 0x81, 0x4d, 0xe6, 0x4e, 0xbb, 0xe2, 0x60, 0x29, 0xb8,
		0x7f, 0x99, 0xad, 0x26, 0xbf, 0x8b, 0xb9, 0x42, 0x77, 0x00, 0x13, 0x90, 0x08, 0x52, 0x6e, 0x4e,
		0x0f, 0x45, 0xd3, 0xef, 0x20, 0x4d, 0x7f, 0x07, 0xc9, 0x50, 0x9b, 0x1e, 0xf1, 0x51, 0x7c, 0xfd,
		0xee, 0xee, 0x72, 0x76, 0x6f, 0x8f, 0xb3, 0x09, 0x6e, 0x32, 0x3e, 0x55, 0x7a, 0xd1, 0x9f, 0x3d,
		0x76, 0xaa, 0xf7, 0x5f, 0x8b, 0x62, 0x8d, 0xfe, 0xa0, 0xeb, 0x0f, 0xbd, 0x1f, 0xb7, 0xff, 0xe9,
		0xeb, 0xaf, 0x1f, 0xf4, 0xde, 0x8f, 0xf1, 0x27, 0xfe, 0x46, 0xef, 0xfd, 0x70, 0x4e, 0xfb, 0xfa,
		0xeb, 0xda, 0xb3, 0xf8, 0x21, 0xae, 0x63, 0x31, 0x11, 0x25, 0xdf, 0x78, 0x71, 0x79, 0xa5, 0x15,
		0xdd, 0x1f, 0x9c, 0xd6, 0x56, 0x22, 0xda, 0x4f, 0x29, 0xac, 0x97, 0xaa, 0xb0, 0x24, 0x6e, 0x56,
		0x53, 0x3e, 0x68, 0xa5, 0xd3, 0x24, 0x87, 0xa4, 0x65, 0x28, 0x27, 0xf4, 0x46, 0x89, 0x3b, 0x11,
		0x94, 0x56, 0xf4, 0xdd, 0x94, 0x32, 0x8a, 0x98, 0x9a, 0xfd, 0x99, 0x3f, 0xf2, 0x98, 0x81, 0x2c,
		0x42, 0xe9, 0x53, 0xd8, 0xc2, 0x45, 0xfa, 0xfd, 0x71, 0xd2, 0x5a, 0x89, 0xb0, 0x71, 0x91, 0x98,
		0x61, 0x89, 0x58, 0xe1, 0x52, 0x31, 0xc2, 0x4f, 0x9a, 0x5e, 0x68, 0xb7, 0x99, 0x0c, 0xf1, 0xf4,
		0x42, 0xb9, 0x8a, 0x55, 0x65, 0x16, 0xaa, 0x54, 0x66, 0x21, 0xf1, 0x98, 0xdb, 0x97, 0x90, 0x5a,
		0xa8, 0x0c, 0xb2, 0x89, 0xc4, 0xcc, 0xca, 0xc4, 0xca, 0xae, 0x2b, 0x46, 0x56, 0xc1, 0x9c, 0x82,
		0x39, 0x05, 0x73, 0x25, 0x61, 0x4e, 0x34, 0xe6, 0x74, 0xcb, 0x41, 0xce, 0xc3, 0x1e, 0x72, 0xa2,
		0x44, 0xe6, 0x39, 0x00, 0x97, 0x94, 0x14, 0x03, 0xb7, 0xb3, 0xb8, 0x38, 0xb0, 0x38, 0x1a, 0x05,
		0x51, 0x16, 0x7b, 0xa0, 0x01, 0x3b, 0x80, 0x4e, 0x88, 0x6f, 0x7f, 0x05, 0xb0, 0x12, 0x76, 0xdc,
		0x52, 0xbf, 0x63, 0xc5, 0x01, 0x6e, 0x99, 0x5f, 0xb2, 0x18, 0xc0, 0xed, 0xe2, 0x7d, 0x05, 0x3c,
		0xe5, 0xb2, 0xf0, 0x6d, 0x05, 0xa1, 0xbc, 0x0a, 0xdf, 0x56, 0xc0, 0x85, 0xfa, 0xa9, 0x2e, 0x2b,
		0xe0, 0x3d, 0x13, 0x8b, 0xdc, 0xe4, 0xfd, 0x12, 0xbd, 0xab, 0x20, 0x1a, 0x9f, 0xe7, 0xb9, 0xa9,
		0x20, 0x33, 0xdf, 0xd5, 0x14, 0x8b, 0x56, 0x9f, 0x21, 0x5f, 0x8c, 0x65, 0xe0, 0xb9, 0xa7, 0xb8,
		0x77, 0x53, 0x28, 0x37, 0x6d, 0x53, 0x81, 0xce, 0xa6, 0x41, 0x27, 0xff, 0x9a, 0x02, 0x89, 0x14,
		0x4f, 0x05, 0x52, 0x3b, 0xcd, 0xcb, 0x48, 0x2a, 0x8d, 0x71, 0x7c, 0x5d, 0x01, 0xcf, 0xef, 0xa4,
		0x01, 0x6f, 0x74, 0x47, 0xb1, 0x05, 0x9d, 0x24, 0x33, 0x9a, 0x58, 0x8e, 0xc4, 0x4a, 0x44, 0xfb,
		0x8e, 0xb7, 0x30, 0xda, 0x77, 0x5c, 0x3d, 0xa7, 0x78, 0x80, 0x09, 0x7b, 0x2b, 0xe1, 0x36, 0xe8,
		0xa8, 0x70, 0xdf, 0x2d, 0x72, 0x1a, 0x74, 0x3a, 0xca, 0x69, 0x20, 0x6a, 0x15, 0xec, 0xa9, 0xc4,
		0x13, 0xa5, 0x51, 0x5d, 0x79, 0x8e, 0x9f, 0x06, 0xd5, 0x95, 0x37, 0x78, 0xb7, 0x81, 0x5d, 0x25,
		0x9e, 0x58, 0x17, 0xb2, 0xab, 0xc4, 0x13, 0x0a, 0xe6, 0x15, 0xcc, 0x2b, 0x98, 0x57, 0x89, 0x27,
		0xb6, 0x17, 0xe4, 0xc7, 0xf0, 0x56, 0x8b, 0x13, 0x69, 0x8a, 0x63, 0x7c, 0xba, 0x92, 0x1c, 0xc4,
		0x1f, 0x03, 0xea, 0x39, 0x98, 0x31, 0xe4, 0xf3, 0x3b, 0x4b, 0x6c, 0xcc, 0x53, 0xca, 0x4f, 0x6e,
		0x99, 0xe4, 0x37, 0x22, 0xbb, 0x93, 0xc4, 0x9e, 0x54, 0x37, 0xc9, 0xf9, 0x08, 0x01, 0x1b, 0x0d,
		0x60, 0xe0, 0xb0, 0x38, 0x68, 0xd4, 0x00, 0x98, 0xd8, 0xd8, 0x82, 0x0c, 0xd1, 0x54, 0x3d, 0x0a,
		0x88, 0x9b, 0xe4, 0xf1, 0xc5, 0x7f, 0xc3, 0x4b, 0x47, 0x40, 0xf9, 0xf0, 0x66, 0x85, 0xd6, 0x7a,
		0xcd, 0xa8, 0x95, 0xba, 0x2c, 0x5e, 0xb1, 0x4a, 0x8a, 0x55, 0x52, 0xac, 0xd2, 0x2e, 0x6c, 0x3e,
		0xd4, 0x11, 0xf2, 0x75, 0x68, 0x25, 0xea, 0x21, 0x64, 0x53, 0x89, 0x74, 0x48, 0x51, 0x79, 0x39,
		0x5d, 0xc4, 0x35, 0x07, 0xaf, 0xa9, 0x9c, 0x02, 0x0a, 0xbe, 0x93, 0x04, 0x48, 0xdc, 0xa1, 0xc4,
		0xee, 0x24, 0xef, 0x22, 0x12, 0x41, 0xf1, 0x93, 0xb8, 0xe9, 0x9f, 0x21, 0x45, 0xf2, 0xd7, 0x1d,
		0x88, 0x48, 0xea, 0x2c, 0x1e, 0x51, 0x61, 0x8d, 0x21, 0xa7, 0x35, 0x16, 0xbb, 0xa5, 0x35, 0x0d,
		0x63, 0x58, 0xdb, 0x04, 0x1c, 0x97, 0xec, 0x55, 0x15, 0x3b, 0x55, 0xc1, 0x3e, 0xb5, 0xb4, 0x4e,
		0x15, 0x7b, 0x55, 0xc5, 0x4e, 0xb5, 0x2b, 0x29, 0xe9, 0xed, 0x2a, 0x76, 0xaa, 0x8a, 0xd3, 0x07,
		0x03, 0xe6, 0x12, 0x34, 0x5c, 0xf7, 0xbd, 0x20, 0xfd, 0x0d, 0xeb, 0xb1, 0x9d, 0x4a, 0x0f, 0x57,
		0xe4, 0x88, 0x52, 0x7e, 0x04, 0x89, 0x3a, 0xa0, 0x94, 0x7d, 0x40, 0x29, 0xe7, 0x72, 0x0f, 0xf1,
		0xb3, 0x49, 0xab, 0x2f, 0xf3, 0x90, 0xba, 0x46, 0x97, 0xf7, 0x4a, 0xe6, 0x06, 0xf4, 0xa4, 0xc2,
		0x16, 0xdd, 0x83, 0xbe, 0xd3, 0xb1, 0x66, 0xe2, 0xc1, 0xab, 0xe2, 0xe9, 0x2d, 0x54, 0x28, 0x7f,
		0xc5, 0x4e, 0x2c, 0x19, 0xea, 0x2e, 0xf4, 0x74, 0xc1, 0xc2, 0x79, 0x25, 0x8a, 0xe7, 0x93, 0xe8,
		0x6f, 0x20, 0x43, 0xdc, 0x0a, 0x2c, 0xde, 0xe6, 0x3c, 0x71, 0x4b, 0x74, 0xaa, 0x44, 0xce, 0xb8,
		0x05, 0x35, 0xba, 0x32, 0x7b, 0xdc, 0xab, 0x54, 0xaf, 0x57, 0xf5, 0xb6, 0x86, 0xe9, 0x2f, 0xf0,
		0x0a, 0x7d, 0x75, 0xdd, 0x45, 0x00, 0x9f, 0x7f, 0x82, 0x5a, 0xfa, 0xab, 0x99, 0xce, 0x7d, 0x40,
		0xd7, 0xd8, 0x8a, 0x4f, 0x18, 0x3f, 0xbe, 0x7a, 0xfc, 0x2f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x01,
		0x00, 0x00, 0xff, 0xff, 0x6f, 0xad, 0x94, 0xba, 0x41, 0x7a, 0x01, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
func initΛEnumTypes(){
  ΛEnumTypes = map[string][]reflect.Type{
	"/switch-model/pipeline": []reflect.Type{
		reflect.TypeOf((E_OnfSwitchModel_SwitchModel_Pipeline)(0)),
	},
	"/switch-model/port/speeds": []reflect.Type{
		reflect.TypeOf((E_OnfSdnFabricTypes_Speed)(0)),
	},
	"/switch/port/speed": []reflect.Type{
		reflect.TypeOf((E_OnfSdnFabricTypes_Speed)(0)),
	},
	"/switch/port/state/admin-status": []reflect.Type{
		reflect.TypeOf((E_OnfSwitch_Switch_Port_State_AdminStatus)(0)),
	},
	"/switch/port/state/oper-status": []reflect.Type{
		reflect.TypeOf((E_OnfSwitch_Switch_Port_State_OperStatus)(0)),
	},
	"/switch/role": []reflect.Type{
		reflect.TypeOf((E_OnfSwitch_Switch_Role)(0)),
	},
  }
}

