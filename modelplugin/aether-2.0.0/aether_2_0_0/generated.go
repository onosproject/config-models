// Code generated by YGOT. DO NOT EDIT.
/*
Package aether_2_0_0 is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/scondon/go/pkg/mod/github.com/openconfig/ygot@v0.12.4/genutil/names.go
using the following YANG input files:
	- onf-enterprise.yang
	- onf-connectivity-service.yang
	- onf-aether-types.yang
	- onf-application.yang
	- onf-device-group.yang
	- onf-ip-domain.yang
	- onf-site.yang
	- onf-upf.yang
	- onf-template.yang
	- onf-vcs.yang
	- onf-traffic-class.yang
Imported modules were sourced from:
	- /home/scondon/git/opencord/roc-helm-charts/config-models/aether-2.0.x/files/yang/...
*/
package aether_2_0_0

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Device{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	ConnectivityServices	*OnfConnectivityService_ConnectivityServices	`path:"connectivity-services" module:"onf-connectivity-service"`
	Enterprises	*OnfEnterprise_Enterprises	`path:"enterprises" module:"onf-enterprise"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfConnectivityService_ConnectivityServices represents the /onf-connectivity-service/connectivity-services YANG schema element.
type OnfConnectivityService_ConnectivityServices struct {
	ConnectivityService	map[string]*OnfConnectivityService_ConnectivityServices_ConnectivityService	`path:"connectivity-service" module:"onf-connectivity-service"`
}

// IsYANGGoStruct ensures that OnfConnectivityService_ConnectivityServices implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfConnectivityService_ConnectivityServices) IsYANGGoStruct() {}

// NewConnectivityService creates a new entry in the ConnectivityService list of the
// OnfConnectivityService_ConnectivityServices struct. The keys of the list are populated from the input
// arguments.
func (t *OnfConnectivityService_ConnectivityServices) NewConnectivityService(Id string) (*OnfConnectivityService_ConnectivityServices_ConnectivityService, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ConnectivityService == nil {
		t.ConnectivityService = make(map[string]*OnfConnectivityService_ConnectivityServices_ConnectivityService)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ConnectivityService[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ConnectivityService", key)
	}

	t.ConnectivityService[key] = &OnfConnectivityService_ConnectivityServices_ConnectivityService{
		Id: &Id,
	}

	return t.ConnectivityService[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfConnectivityService_ConnectivityServices) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfConnectivityService_ConnectivityServices"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfConnectivityService_ConnectivityServices) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfConnectivityService_ConnectivityServices_ConnectivityService represents the /onf-connectivity-service/connectivity-services/connectivity-service YANG schema element.
type OnfConnectivityService_ConnectivityServices_ConnectivityService struct {
	AccPrometheusUrl	*string	`path:"acc-prometheus-url" module:"onf-connectivity-service"`
	Core_5GEndpoint	*string	`path:"core-5g-endpoint" module:"onf-connectivity-service"`
	Description	*string	`path:"description" module:"onf-connectivity-service"`
	DisplayName	*string	`path:"display-name" module:"onf-connectivity-service"`
	Id	*string	`path:"id" module:"onf-connectivity-service"`
}

// IsYANGGoStruct ensures that OnfConnectivityService_ConnectivityServices_ConnectivityService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfConnectivityService_ConnectivityServices_ConnectivityService) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfConnectivityService_ConnectivityServices_ConnectivityService struct, which is a YANG list entry.
func (t *OnfConnectivityService_ConnectivityServices_ConnectivityService) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfConnectivityService_ConnectivityServices_ConnectivityService) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfConnectivityService_ConnectivityServices_ConnectivityService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfConnectivityService_ConnectivityServices_ConnectivityService) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfEnterprise_Enterprises represents the /onf-enterprise/enterprises YANG schema element.
type OnfEnterprise_Enterprises struct {
	Enterprise	map[string]*OnfEnterprise_Enterprises_Enterprise	`path:"enterprise" module:"onf-enterprise"`
}

// IsYANGGoStruct ensures that OnfEnterprise_Enterprises implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfEnterprise_Enterprises) IsYANGGoStruct() {}

// NewEnterprise creates a new entry in the Enterprise list of the
// OnfEnterprise_Enterprises struct. The keys of the list are populated from the input
// arguments.
func (t *OnfEnterprise_Enterprises) NewEnterprise(EntId string) (*OnfEnterprise_Enterprises_Enterprise, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Enterprise == nil {
		t.Enterprise = make(map[string]*OnfEnterprise_Enterprises_Enterprise)
	}

	key := EntId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Enterprise[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Enterprise", key)
	}

	t.Enterprise[key] = &OnfEnterprise_Enterprises_Enterprise{
		EntId: &EntId,
	}

	return t.Enterprise[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfEnterprise_Enterprises) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfEnterprise_Enterprises"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfEnterprise_Enterprises) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfEnterprise_Enterprises_Enterprise represents the /onf-enterprise/enterprises/enterprise YANG schema element.
type OnfEnterprise_Enterprises_Enterprise struct {
	Application	map[string]*OnfEnterprise_Enterprises_Enterprise_Application	`path:"application" module:"onf-enterprise"`
	ConnectivityService	map[string]*OnfEnterprise_Enterprises_Enterprise_ConnectivityService	`path:"connectivity-service" module:"onf-enterprise"`
	Description	*string	`path:"description" module:"onf-enterprise"`
	DisplayName	*string	`path:"display-name" module:"onf-enterprise"`
	EntId	*string	`path:"ent-id" module:"onf-enterprise"`
	Site	map[string]*OnfEnterprise_Enterprises_Enterprise_Site	`path:"site" module:"onf-enterprise"`
	Template	map[string]*OnfEnterprise_Enterprises_Enterprise_Template	`path:"template" module:"onf-enterprise"`
	TrafficClass	map[string]*OnfEnterprise_Enterprises_Enterprise_TrafficClass	`path:"traffic-class" module:"onf-enterprise"`
}

// IsYANGGoStruct ensures that OnfEnterprise_Enterprises_Enterprise implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfEnterprise_Enterprises_Enterprise) IsYANGGoStruct() {}

// NewApplication creates a new entry in the Application list of the
// OnfEnterprise_Enterprises_Enterprise struct. The keys of the list are populated from the input
// arguments.
func (t *OnfEnterprise_Enterprises_Enterprise) NewApplication(AppId string) (*OnfEnterprise_Enterprises_Enterprise_Application, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[string]*OnfEnterprise_Enterprises_Enterprise_Application)
	}

	key := AppId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Application[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Application", key)
	}

	t.Application[key] = &OnfEnterprise_Enterprises_Enterprise_Application{
		AppId: &AppId,
	}

	return t.Application[key], nil
}

// NewConnectivityService creates a new entry in the ConnectivityService list of the
// OnfEnterprise_Enterprises_Enterprise struct. The keys of the list are populated from the input
// arguments.
func (t *OnfEnterprise_Enterprises_Enterprise) NewConnectivityService(ConnectivityService string) (*OnfEnterprise_Enterprises_Enterprise_ConnectivityService, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ConnectivityService == nil {
		t.ConnectivityService = make(map[string]*OnfEnterprise_Enterprises_Enterprise_ConnectivityService)
	}

	key := ConnectivityService

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ConnectivityService[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ConnectivityService", key)
	}

	t.ConnectivityService[key] = &OnfEnterprise_Enterprises_Enterprise_ConnectivityService{
		ConnectivityService: &ConnectivityService,
	}

	return t.ConnectivityService[key], nil
}

// NewSite creates a new entry in the Site list of the
// OnfEnterprise_Enterprises_Enterprise struct. The keys of the list are populated from the input
// arguments.
func (t *OnfEnterprise_Enterprises_Enterprise) NewSite(SiteId string) (*OnfEnterprise_Enterprises_Enterprise_Site, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Site == nil {
		t.Site = make(map[string]*OnfEnterprise_Enterprises_Enterprise_Site)
	}

	key := SiteId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Site[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Site", key)
	}

	t.Site[key] = &OnfEnterprise_Enterprises_Enterprise_Site{
		SiteId: &SiteId,
	}

	return t.Site[key], nil
}

// NewTemplate creates a new entry in the Template list of the
// OnfEnterprise_Enterprises_Enterprise struct. The keys of the list are populated from the input
// arguments.
func (t *OnfEnterprise_Enterprises_Enterprise) NewTemplate(TpId string) (*OnfEnterprise_Enterprises_Enterprise_Template, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Template == nil {
		t.Template = make(map[string]*OnfEnterprise_Enterprises_Enterprise_Template)
	}

	key := TpId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Template[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Template", key)
	}

	t.Template[key] = &OnfEnterprise_Enterprises_Enterprise_Template{
		TpId: &TpId,
	}

	return t.Template[key], nil
}

// NewTrafficClass creates a new entry in the TrafficClass list of the
// OnfEnterprise_Enterprises_Enterprise struct. The keys of the list are populated from the input
// arguments.
func (t *OnfEnterprise_Enterprises_Enterprise) NewTrafficClass(TcId string) (*OnfEnterprise_Enterprises_Enterprise_TrafficClass, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrafficClass == nil {
		t.TrafficClass = make(map[string]*OnfEnterprise_Enterprises_Enterprise_TrafficClass)
	}

	key := TcId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TrafficClass[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TrafficClass", key)
	}

	t.TrafficClass[key] = &OnfEnterprise_Enterprises_Enterprise_TrafficClass{
		TcId: &TcId,
	}

	return t.TrafficClass[key], nil
}

// ΛListKeyMap returns the keys of the OnfEnterprise_Enterprises_Enterprise struct, which is a YANG list entry.
func (t *OnfEnterprise_Enterprises_Enterprise) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntId == nil {
		return nil, fmt.Errorf("nil value for key EntId")
	}

	return map[string]interface{}{
		"ent-id": *t.EntId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfEnterprise_Enterprises_Enterprise) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfEnterprise_Enterprises_Enterprise"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfEnterprise_Enterprises_Enterprise) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfEnterprise_Enterprises_Enterprise_Application represents the /onf-enterprise/enterprises/enterprise/application YANG schema element.
type OnfEnterprise_Enterprises_Enterprise_Application struct {
	Address	*string	`path:"address" module:"onf-enterprise"`
	AppId	*string	`path:"app-id" module:"onf-enterprise"`
	Description	*string	`path:"description" module:"onf-enterprise"`
	DisplayName	*string	`path:"display-name" module:"onf-enterprise"`
	Endpoint	map[string]*OnfEnterprise_Enterprises_Enterprise_Application_Endpoint	`path:"endpoint" module:"onf-enterprise"`
}

// IsYANGGoStruct ensures that OnfEnterprise_Enterprises_Enterprise_Application implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfEnterprise_Enterprises_Enterprise_Application) IsYANGGoStruct() {}

// NewEndpoint creates a new entry in the Endpoint list of the
// OnfEnterprise_Enterprises_Enterprise_Application struct. The keys of the list are populated from the input
// arguments.
func (t *OnfEnterprise_Enterprises_Enterprise_Application) NewEndpoint(EndpointId string) (*OnfEnterprise_Enterprises_Enterprise_Application_Endpoint, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Endpoint == nil {
		t.Endpoint = make(map[string]*OnfEnterprise_Enterprises_Enterprise_Application_Endpoint)
	}

	key := EndpointId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Endpoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Endpoint", key)
	}

	t.Endpoint[key] = &OnfEnterprise_Enterprises_Enterprise_Application_Endpoint{
		EndpointId: &EndpointId,
	}

	return t.Endpoint[key], nil
}

// ΛListKeyMap returns the keys of the OnfEnterprise_Enterprises_Enterprise_Application struct, which is a YANG list entry.
func (t *OnfEnterprise_Enterprises_Enterprise_Application) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AppId == nil {
		return nil, fmt.Errorf("nil value for key AppId")
	}

	return map[string]interface{}{
		"app-id": *t.AppId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfEnterprise_Enterprises_Enterprise_Application) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfEnterprise_Enterprises_Enterprise_Application"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfEnterprise_Enterprises_Enterprise_Application) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfEnterprise_Enterprises_Enterprise_Application_Endpoint represents the /onf-enterprise/enterprises/enterprise/application/endpoint YANG schema element.
type OnfEnterprise_Enterprises_Enterprise_Application_Endpoint struct {
	DisplayName	*string	`path:"display-name" module:"onf-enterprise"`
	EndpointId	*string	`path:"endpoint-id" module:"onf-enterprise"`
	Mbr	*OnfEnterprise_Enterprises_Enterprise_Application_Endpoint_Mbr	`path:"mbr" module:"onf-enterprise"`
	PortEnd	*uint16	`path:"port-end" module:"onf-enterprise"`
	PortStart	*uint16	`path:"port-start" module:"onf-enterprise"`
	Protocol	*string	`path:"protocol" module:"onf-enterprise"`
	TrafficClass	*string	`path:"traffic-class" module:"onf-enterprise"`
}

// IsYANGGoStruct ensures that OnfEnterprise_Enterprises_Enterprise_Application_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfEnterprise_Enterprises_Enterprise_Application_Endpoint) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfEnterprise_Enterprises_Enterprise_Application_Endpoint struct, which is a YANG list entry.
func (t *OnfEnterprise_Enterprises_Enterprise_Application_Endpoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EndpointId == nil {
		return nil, fmt.Errorf("nil value for key EndpointId")
	}

	return map[string]interface{}{
		"endpoint-id": *t.EndpointId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfEnterprise_Enterprises_Enterprise_Application_Endpoint) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfEnterprise_Enterprises_Enterprise_Application_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfEnterprise_Enterprises_Enterprise_Application_Endpoint) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfEnterprise_Enterprises_Enterprise_Application_Endpoint_Mbr represents the /onf-enterprise/enterprises/enterprise/application/endpoint/mbr YANG schema element.
type OnfEnterprise_Enterprises_Enterprise_Application_Endpoint_Mbr struct {
	Downlink	*uint64	`path:"downlink" module:"onf-enterprise"`
	Uplink	*uint64	`path:"uplink" module:"onf-enterprise"`
}

// IsYANGGoStruct ensures that OnfEnterprise_Enterprises_Enterprise_Application_Endpoint_Mbr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfEnterprise_Enterprises_Enterprise_Application_Endpoint_Mbr) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfEnterprise_Enterprises_Enterprise_Application_Endpoint_Mbr) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfEnterprise_Enterprises_Enterprise_Application_Endpoint_Mbr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfEnterprise_Enterprises_Enterprise_Application_Endpoint_Mbr) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfEnterprise_Enterprises_Enterprise_ConnectivityService represents the /onf-enterprise/enterprises/enterprise/connectivity-service YANG schema element.
type OnfEnterprise_Enterprises_Enterprise_ConnectivityService struct {
	ConnectivityService	*string	`path:"connectivity-service" module:"onf-enterprise"`
	Enabled	*bool	`path:"enabled" module:"onf-enterprise"`
}

// IsYANGGoStruct ensures that OnfEnterprise_Enterprises_Enterprise_ConnectivityService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfEnterprise_Enterprises_Enterprise_ConnectivityService) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfEnterprise_Enterprises_Enterprise_ConnectivityService struct, which is a YANG list entry.
func (t *OnfEnterprise_Enterprises_Enterprise_ConnectivityService) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ConnectivityService == nil {
		return nil, fmt.Errorf("nil value for key ConnectivityService")
	}

	return map[string]interface{}{
		"connectivity-service": *t.ConnectivityService,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfEnterprise_Enterprises_Enterprise_ConnectivityService) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfEnterprise_Enterprises_Enterprise_ConnectivityService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfEnterprise_Enterprises_Enterprise_ConnectivityService) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfEnterprise_Enterprises_Enterprise_Site represents the /onf-enterprise/enterprises/enterprise/site YANG schema element.
type OnfEnterprise_Enterprises_Enterprise_Site struct {
	Description	*string	`path:"description" module:"onf-enterprise"`
	DeviceGroup	map[string]*OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup	`path:"device-group" module:"onf-enterprise"`
	DisplayName	*string	`path:"display-name" module:"onf-enterprise"`
	ImsiDefinition	*OnfEnterprise_Enterprises_Enterprise_Site_ImsiDefinition	`path:"imsi-definition" module:"onf-enterprise"`
	IpDomain	map[string]*OnfEnterprise_Enterprises_Enterprise_Site_IpDomain	`path:"ip-domain" module:"onf-enterprise"`
	Monitoring	*OnfEnterprise_Enterprises_Enterprise_Site_Monitoring	`path:"monitoring" module:"onf-enterprise"`
	SiteId	*string	`path:"site-id" module:"onf-enterprise"`
	SmallCell	map[string]*OnfEnterprise_Enterprises_Enterprise_Site_SmallCell	`path:"small-cell" module:"onf-enterprise"`
	Upf	map[string]*OnfEnterprise_Enterprises_Enterprise_Site_Upf	`path:"upf" module:"onf-enterprise"`
	Vcs	map[string]*OnfEnterprise_Enterprises_Enterprise_Site_Vcs	`path:"vcs" module:"onf-enterprise"`
}

// IsYANGGoStruct ensures that OnfEnterprise_Enterprises_Enterprise_Site implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfEnterprise_Enterprises_Enterprise_Site) IsYANGGoStruct() {}

// NewDeviceGroup creates a new entry in the DeviceGroup list of the
// OnfEnterprise_Enterprises_Enterprise_Site struct. The keys of the list are populated from the input
// arguments.
func (t *OnfEnterprise_Enterprises_Enterprise_Site) NewDeviceGroup(DgId string) (*OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DeviceGroup == nil {
		t.DeviceGroup = make(map[string]*OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup)
	}

	key := DgId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DeviceGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DeviceGroup", key)
	}

	t.DeviceGroup[key] = &OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup{
		DgId: &DgId,
	}

	return t.DeviceGroup[key], nil
}

// NewIpDomain creates a new entry in the IpDomain list of the
// OnfEnterprise_Enterprises_Enterprise_Site struct. The keys of the list are populated from the input
// arguments.
func (t *OnfEnterprise_Enterprises_Enterprise_Site) NewIpDomain(IpId string) (*OnfEnterprise_Enterprises_Enterprise_Site_IpDomain, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpDomain == nil {
		t.IpDomain = make(map[string]*OnfEnterprise_Enterprises_Enterprise_Site_IpDomain)
	}

	key := IpId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IpDomain[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IpDomain", key)
	}

	t.IpDomain[key] = &OnfEnterprise_Enterprises_Enterprise_Site_IpDomain{
		IpId: &IpId,
	}

	return t.IpDomain[key], nil
}

// NewSmallCell creates a new entry in the SmallCell list of the
// OnfEnterprise_Enterprises_Enterprise_Site struct. The keys of the list are populated from the input
// arguments.
func (t *OnfEnterprise_Enterprises_Enterprise_Site) NewSmallCell(SmallCellId string) (*OnfEnterprise_Enterprises_Enterprise_Site_SmallCell, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SmallCell == nil {
		t.SmallCell = make(map[string]*OnfEnterprise_Enterprises_Enterprise_Site_SmallCell)
	}

	key := SmallCellId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SmallCell[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SmallCell", key)
	}

	t.SmallCell[key] = &OnfEnterprise_Enterprises_Enterprise_Site_SmallCell{
		SmallCellId: &SmallCellId,
	}

	return t.SmallCell[key], nil
}

// NewUpf creates a new entry in the Upf list of the
// OnfEnterprise_Enterprises_Enterprise_Site struct. The keys of the list are populated from the input
// arguments.
func (t *OnfEnterprise_Enterprises_Enterprise_Site) NewUpf(UpfId string) (*OnfEnterprise_Enterprises_Enterprise_Site_Upf, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Upf == nil {
		t.Upf = make(map[string]*OnfEnterprise_Enterprises_Enterprise_Site_Upf)
	}

	key := UpfId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Upf[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Upf", key)
	}

	t.Upf[key] = &OnfEnterprise_Enterprises_Enterprise_Site_Upf{
		UpfId: &UpfId,
	}

	return t.Upf[key], nil
}

// NewVcs creates a new entry in the Vcs list of the
// OnfEnterprise_Enterprises_Enterprise_Site struct. The keys of the list are populated from the input
// arguments.
func (t *OnfEnterprise_Enterprises_Enterprise_Site) NewVcs(VcsId string) (*OnfEnterprise_Enterprises_Enterprise_Site_Vcs, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vcs == nil {
		t.Vcs = make(map[string]*OnfEnterprise_Enterprises_Enterprise_Site_Vcs)
	}

	key := VcsId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vcs[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vcs", key)
	}

	t.Vcs[key] = &OnfEnterprise_Enterprises_Enterprise_Site_Vcs{
		VcsId: &VcsId,
	}

	return t.Vcs[key], nil
}

// ΛListKeyMap returns the keys of the OnfEnterprise_Enterprises_Enterprise_Site struct, which is a YANG list entry.
func (t *OnfEnterprise_Enterprises_Enterprise_Site) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SiteId == nil {
		return nil, fmt.Errorf("nil value for key SiteId")
	}

	return map[string]interface{}{
		"site-id": *t.SiteId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfEnterprise_Enterprises_Enterprise_Site) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfEnterprise_Enterprises_Enterprise_Site"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfEnterprise_Enterprises_Enterprise_Site) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup represents the /onf-enterprise/enterprises/enterprise/site/device-group YANG schema element.
type OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup struct {
	Description	*string	`path:"description" module:"onf-enterprise"`
	Device	*OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup_Device	`path:"device" module:"onf-enterprise"`
	DgId	*string	`path:"dg-id" module:"onf-enterprise"`
	DisplayName	*string	`path:"display-name" module:"onf-enterprise"`
	Imsis	map[string]*OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup_Imsis	`path:"imsis" module:"onf-enterprise"`
	IpDomain	*string	`path:"ip-domain" module:"onf-enterprise"`
}

// IsYANGGoStruct ensures that OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup) IsYANGGoStruct() {}

// NewImsis creates a new entry in the Imsis list of the
// OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup struct. The keys of the list are populated from the input
// arguments.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup) NewImsis(ImsiId string) (*OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup_Imsis, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Imsis == nil {
		t.Imsis = make(map[string]*OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup_Imsis)
	}

	key := ImsiId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Imsis[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Imsis", key)
	}

	t.Imsis[key] = &OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup_Imsis{
		ImsiId: &ImsiId,
	}

	return t.Imsis[key], nil
}

// ΛListKeyMap returns the keys of the OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup struct, which is a YANG list entry.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DgId == nil {
		return nil, fmt.Errorf("nil value for key DgId")
	}

	return map[string]interface{}{
		"dg-id": *t.DgId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup_Device represents the /onf-enterprise/enterprises/enterprise/site/device-group/device YANG schema element.
type OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup_Device struct {
	Mbr	*OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup_Device_Mbr	`path:"mbr" module:"onf-enterprise"`
	TrafficClass	*string	`path:"traffic-class" module:"onf-enterprise"`
}

// IsYANGGoStruct ensures that OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup_Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup_Device) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup_Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup_Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup_Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup_Device_Mbr represents the /onf-enterprise/enterprises/enterprise/site/device-group/device/mbr YANG schema element.
type OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup_Device_Mbr struct {
	Downlink	*uint64	`path:"downlink" module:"onf-enterprise"`
	Uplink	*uint64	`path:"uplink" module:"onf-enterprise"`
}

// IsYANGGoStruct ensures that OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup_Device_Mbr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup_Device_Mbr) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup_Device_Mbr) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup_Device_Mbr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup_Device_Mbr) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup_Imsis represents the /onf-enterprise/enterprises/enterprise/site/device-group/imsis YANG schema element.
type OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup_Imsis struct {
	DisplayName	*string	`path:"display-name" module:"onf-enterprise"`
	ImsiId	*string	`path:"imsi-id" module:"onf-enterprise"`
	ImsiRangeFrom	*uint64	`path:"imsi-range-from" module:"onf-enterprise"`
	ImsiRangeTo	*uint64	`path:"imsi-range-to" module:"onf-enterprise"`
}

// IsYANGGoStruct ensures that OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup_Imsis implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup_Imsis) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup_Imsis struct, which is a YANG list entry.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup_Imsis) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ImsiId == nil {
		return nil, fmt.Errorf("nil value for key ImsiId")
	}

	return map[string]interface{}{
		"imsi-id": *t.ImsiId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup_Imsis) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup_Imsis"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_DeviceGroup_Imsis) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfEnterprise_Enterprises_Enterprise_Site_ImsiDefinition represents the /onf-enterprise/enterprises/enterprise/site/imsi-definition YANG schema element.
type OnfEnterprise_Enterprises_Enterprise_Site_ImsiDefinition struct {
	Enterprise	*uint32	`path:"enterprise" module:"onf-enterprise"`
	Format	*string	`path:"format" module:"onf-enterprise"`
	Mcc	*string	`path:"mcc" module:"onf-enterprise"`
	Mnc	*string	`path:"mnc" module:"onf-enterprise"`
}

// IsYANGGoStruct ensures that OnfEnterprise_Enterprises_Enterprise_Site_ImsiDefinition implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfEnterprise_Enterprises_Enterprise_Site_ImsiDefinition) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_ImsiDefinition) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfEnterprise_Enterprises_Enterprise_Site_ImsiDefinition"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_ImsiDefinition) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfEnterprise_Enterprises_Enterprise_Site_IpDomain represents the /onf-enterprise/enterprises/enterprise/site/ip-domain YANG schema element.
type OnfEnterprise_Enterprises_Enterprise_Site_IpDomain struct {
	AdminStatus	*string	`path:"admin-status" module:"onf-enterprise"`
	Description	*string	`path:"description" module:"onf-enterprise"`
	DisplayName	*string	`path:"display-name" module:"onf-enterprise"`
	Dnn	*string	`path:"dnn" module:"onf-enterprise"`
	DnsPrimary	*string	`path:"dns-primary" module:"onf-enterprise"`
	DnsSecondary	*string	`path:"dns-secondary" module:"onf-enterprise"`
	IpId	*string	`path:"ip-id" module:"onf-enterprise"`
	Mtu	*uint16	`path:"mtu" module:"onf-enterprise"`
	Subnet	*string	`path:"subnet" module:"onf-enterprise"`
}

// IsYANGGoStruct ensures that OnfEnterprise_Enterprises_Enterprise_Site_IpDomain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfEnterprise_Enterprises_Enterprise_Site_IpDomain) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfEnterprise_Enterprises_Enterprise_Site_IpDomain struct, which is a YANG list entry.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_IpDomain) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpId == nil {
		return nil, fmt.Errorf("nil value for key IpId")
	}

	return map[string]interface{}{
		"ip-id": *t.IpId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_IpDomain) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfEnterprise_Enterprises_Enterprise_Site_IpDomain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_IpDomain) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfEnterprise_Enterprises_Enterprise_Site_Monitoring represents the /onf-enterprise/enterprises/enterprise/site/monitoring YANG schema element.
type OnfEnterprise_Enterprises_Enterprise_Site_Monitoring struct {
	EdgeClusterPrometheusUrl	*string	`path:"edge-cluster-prometheus-url" module:"onf-enterprise"`
	EdgeDevice	map[string]*OnfEnterprise_Enterprises_Enterprise_Site_Monitoring_EdgeDevice	`path:"edge-device" module:"onf-enterprise"`
	EdgeMonitoringPrometheusUrl	*string	`path:"edge-monitoring-prometheus-url" module:"onf-enterprise"`
}

// IsYANGGoStruct ensures that OnfEnterprise_Enterprises_Enterprise_Site_Monitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfEnterprise_Enterprises_Enterprise_Site_Monitoring) IsYANGGoStruct() {}

// NewEdgeDevice creates a new entry in the EdgeDevice list of the
// OnfEnterprise_Enterprises_Enterprise_Site_Monitoring struct. The keys of the list are populated from the input
// arguments.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_Monitoring) NewEdgeDevice(EdgeDeviceId string) (*OnfEnterprise_Enterprises_Enterprise_Site_Monitoring_EdgeDevice, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EdgeDevice == nil {
		t.EdgeDevice = make(map[string]*OnfEnterprise_Enterprises_Enterprise_Site_Monitoring_EdgeDevice)
	}

	key := EdgeDeviceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EdgeDevice[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EdgeDevice", key)
	}

	t.EdgeDevice[key] = &OnfEnterprise_Enterprises_Enterprise_Site_Monitoring_EdgeDevice{
		EdgeDeviceId: &EdgeDeviceId,
	}

	return t.EdgeDevice[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_Monitoring) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfEnterprise_Enterprises_Enterprise_Site_Monitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_Monitoring) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfEnterprise_Enterprises_Enterprise_Site_Monitoring_EdgeDevice represents the /onf-enterprise/enterprises/enterprise/site/monitoring/edge-device YANG schema element.
type OnfEnterprise_Enterprises_Enterprise_Site_Monitoring_EdgeDevice struct {
	Description	*string	`path:"description" module:"onf-enterprise"`
	DisplayName	*string	`path:"display-name" module:"onf-enterprise"`
	EdgeDeviceId	*string	`path:"edge-device-id" module:"onf-enterprise"`
}

// IsYANGGoStruct ensures that OnfEnterprise_Enterprises_Enterprise_Site_Monitoring_EdgeDevice implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfEnterprise_Enterprises_Enterprise_Site_Monitoring_EdgeDevice) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfEnterprise_Enterprises_Enterprise_Site_Monitoring_EdgeDevice struct, which is a YANG list entry.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_Monitoring_EdgeDevice) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EdgeDeviceId == nil {
		return nil, fmt.Errorf("nil value for key EdgeDeviceId")
	}

	return map[string]interface{}{
		"edge-device-id": *t.EdgeDeviceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_Monitoring_EdgeDevice) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfEnterprise_Enterprises_Enterprise_Site_Monitoring_EdgeDevice"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_Monitoring_EdgeDevice) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfEnterprise_Enterprises_Enterprise_Site_SmallCell represents the /onf-enterprise/enterprises/enterprise/site/small-cell YANG schema element.
type OnfEnterprise_Enterprises_Enterprise_Site_SmallCell struct {
	Address	*string	`path:"address" module:"onf-enterprise"`
	DisplayName	*string	`path:"display-name" module:"onf-enterprise"`
	Enable	*bool	`path:"enable" module:"onf-enterprise"`
	SmallCellId	*string	`path:"small-cell-id" module:"onf-enterprise"`
	Tac	*string	`path:"tac" module:"onf-enterprise"`
}

// IsYANGGoStruct ensures that OnfEnterprise_Enterprises_Enterprise_Site_SmallCell implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfEnterprise_Enterprises_Enterprise_Site_SmallCell) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfEnterprise_Enterprises_Enterprise_Site_SmallCell struct, which is a YANG list entry.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_SmallCell) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SmallCellId == nil {
		return nil, fmt.Errorf("nil value for key SmallCellId")
	}

	return map[string]interface{}{
		"small-cell-id": *t.SmallCellId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_SmallCell) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfEnterprise_Enterprises_Enterprise_Site_SmallCell"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_SmallCell) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfEnterprise_Enterprises_Enterprise_Site_Upf represents the /onf-enterprise/enterprises/enterprise/site/upf YANG schema element.
type OnfEnterprise_Enterprises_Enterprise_Site_Upf struct {
	Address	*string	`path:"address" module:"onf-enterprise"`
	ConfigEndpoint	*string	`path:"config-endpoint" module:"onf-enterprise"`
	Description	*string	`path:"description" module:"onf-enterprise"`
	DisplayName	*string	`path:"display-name" module:"onf-enterprise"`
	Port	*uint16	`path:"port" module:"onf-enterprise"`
	UpfId	*string	`path:"upf-id" module:"onf-enterprise"`
}

// IsYANGGoStruct ensures that OnfEnterprise_Enterprises_Enterprise_Site_Upf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfEnterprise_Enterprises_Enterprise_Site_Upf) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfEnterprise_Enterprises_Enterprise_Site_Upf struct, which is a YANG list entry.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_Upf) ΛListKeyMap() (map[string]interface{}, error) {
	if t.UpfId == nil {
		return nil, fmt.Errorf("nil value for key UpfId")
	}

	return map[string]interface{}{
		"upf-id": *t.UpfId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_Upf) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfEnterprise_Enterprises_Enterprise_Site_Upf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_Upf) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfEnterprise_Enterprises_Enterprise_Site_Vcs represents the /onf-enterprise/enterprises/enterprise/site/vcs YANG schema element.
type OnfEnterprise_Enterprises_Enterprise_Site_Vcs struct {
	DefaultBehavior	*string	`path:"default-behavior" module:"onf-enterprise"`
	Description	*string	`path:"description" module:"onf-enterprise"`
	DeviceGroup	map[string]*OnfEnterprise_Enterprises_Enterprise_Site_Vcs_DeviceGroup	`path:"device-group" module:"onf-enterprise"`
	DisplayName	*string	`path:"display-name" module:"onf-enterprise"`
	Filter	map[string]*OnfEnterprise_Enterprises_Enterprise_Site_Vcs_Filter	`path:"filter" module:"onf-enterprise"`
	Sd	*uint32	`path:"sd" module:"onf-enterprise"`
	Slice	*OnfEnterprise_Enterprises_Enterprise_Site_Vcs_Slice	`path:"slice" module:"onf-enterprise"`
	Sst	*uint8	`path:"sst" module:"onf-enterprise"`
	Upf	*string	`path:"upf" module:"onf-enterprise"`
	VcsId	*string	`path:"vcs-id" module:"onf-enterprise"`
}

// IsYANGGoStruct ensures that OnfEnterprise_Enterprises_Enterprise_Site_Vcs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfEnterprise_Enterprises_Enterprise_Site_Vcs) IsYANGGoStruct() {}

// NewDeviceGroup creates a new entry in the DeviceGroup list of the
// OnfEnterprise_Enterprises_Enterprise_Site_Vcs struct. The keys of the list are populated from the input
// arguments.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_Vcs) NewDeviceGroup(DeviceGroup string) (*OnfEnterprise_Enterprises_Enterprise_Site_Vcs_DeviceGroup, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DeviceGroup == nil {
		t.DeviceGroup = make(map[string]*OnfEnterprise_Enterprises_Enterprise_Site_Vcs_DeviceGroup)
	}

	key := DeviceGroup

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DeviceGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DeviceGroup", key)
	}

	t.DeviceGroup[key] = &OnfEnterprise_Enterprises_Enterprise_Site_Vcs_DeviceGroup{
		DeviceGroup: &DeviceGroup,
	}

	return t.DeviceGroup[key], nil
}

// NewFilter creates a new entry in the Filter list of the
// OnfEnterprise_Enterprises_Enterprise_Site_Vcs struct. The keys of the list are populated from the input
// arguments.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_Vcs) NewFilter(Application string) (*OnfEnterprise_Enterprises_Enterprise_Site_Vcs_Filter, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Filter == nil {
		t.Filter = make(map[string]*OnfEnterprise_Enterprises_Enterprise_Site_Vcs_Filter)
	}

	key := Application

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Filter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Filter", key)
	}

	t.Filter[key] = &OnfEnterprise_Enterprises_Enterprise_Site_Vcs_Filter{
		Application: &Application,
	}

	return t.Filter[key], nil
}

// ΛListKeyMap returns the keys of the OnfEnterprise_Enterprises_Enterprise_Site_Vcs struct, which is a YANG list entry.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_Vcs) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VcsId == nil {
		return nil, fmt.Errorf("nil value for key VcsId")
	}

	return map[string]interface{}{
		"vcs-id": *t.VcsId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_Vcs) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfEnterprise_Enterprises_Enterprise_Site_Vcs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_Vcs) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfEnterprise_Enterprises_Enterprise_Site_Vcs_DeviceGroup represents the /onf-enterprise/enterprises/enterprise/site/vcs/device-group YANG schema element.
type OnfEnterprise_Enterprises_Enterprise_Site_Vcs_DeviceGroup struct {
	DeviceGroup	*string	`path:"device-group" module:"onf-enterprise"`
	Enable	*bool	`path:"enable" module:"onf-enterprise"`
}

// IsYANGGoStruct ensures that OnfEnterprise_Enterprises_Enterprise_Site_Vcs_DeviceGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfEnterprise_Enterprises_Enterprise_Site_Vcs_DeviceGroup) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfEnterprise_Enterprises_Enterprise_Site_Vcs_DeviceGroup struct, which is a YANG list entry.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_Vcs_DeviceGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DeviceGroup == nil {
		return nil, fmt.Errorf("nil value for key DeviceGroup")
	}

	return map[string]interface{}{
		"device-group": *t.DeviceGroup,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_Vcs_DeviceGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfEnterprise_Enterprises_Enterprise_Site_Vcs_DeviceGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_Vcs_DeviceGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfEnterprise_Enterprises_Enterprise_Site_Vcs_Filter represents the /onf-enterprise/enterprises/enterprise/site/vcs/filter YANG schema element.
type OnfEnterprise_Enterprises_Enterprise_Site_Vcs_Filter struct {
	Allow	*bool	`path:"allow" module:"onf-enterprise"`
	Application	*string	`path:"application" module:"onf-enterprise"`
	Priority	*uint8	`path:"priority" module:"onf-enterprise"`
}

// IsYANGGoStruct ensures that OnfEnterprise_Enterprises_Enterprise_Site_Vcs_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfEnterprise_Enterprises_Enterprise_Site_Vcs_Filter) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfEnterprise_Enterprises_Enterprise_Site_Vcs_Filter struct, which is a YANG list entry.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_Vcs_Filter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Application == nil {
		return nil, fmt.Errorf("nil value for key Application")
	}

	return map[string]interface{}{
		"application": *t.Application,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_Vcs_Filter) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfEnterprise_Enterprises_Enterprise_Site_Vcs_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_Vcs_Filter) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfEnterprise_Enterprises_Enterprise_Site_Vcs_Slice represents the /onf-enterprise/enterprises/enterprise/site/vcs/slice YANG schema element.
type OnfEnterprise_Enterprises_Enterprise_Site_Vcs_Slice struct {
	Mbr	*OnfEnterprise_Enterprises_Enterprise_Site_Vcs_Slice_Mbr	`path:"mbr" module:"onf-enterprise"`
}

// IsYANGGoStruct ensures that OnfEnterprise_Enterprises_Enterprise_Site_Vcs_Slice implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfEnterprise_Enterprises_Enterprise_Site_Vcs_Slice) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_Vcs_Slice) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfEnterprise_Enterprises_Enterprise_Site_Vcs_Slice"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_Vcs_Slice) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfEnterprise_Enterprises_Enterprise_Site_Vcs_Slice_Mbr represents the /onf-enterprise/enterprises/enterprise/site/vcs/slice/mbr YANG schema element.
type OnfEnterprise_Enterprises_Enterprise_Site_Vcs_Slice_Mbr struct {
	Downlink	*uint64	`path:"downlink" module:"onf-enterprise"`
	DownlinkBurstSize	*uint32	`path:"downlink-burst-size" module:"onf-enterprise"`
	Uplink	*uint64	`path:"uplink" module:"onf-enterprise"`
	UplinkBurstSize	*uint32	`path:"uplink-burst-size" module:"onf-enterprise"`
}

// IsYANGGoStruct ensures that OnfEnterprise_Enterprises_Enterprise_Site_Vcs_Slice_Mbr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfEnterprise_Enterprises_Enterprise_Site_Vcs_Slice_Mbr) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_Vcs_Slice_Mbr) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfEnterprise_Enterprises_Enterprise_Site_Vcs_Slice_Mbr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfEnterprise_Enterprises_Enterprise_Site_Vcs_Slice_Mbr) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfEnterprise_Enterprises_Enterprise_Template represents the /onf-enterprise/enterprises/enterprise/template YANG schema element.
type OnfEnterprise_Enterprises_Enterprise_Template struct {
	DefaultBehavior	*string	`path:"default-behavior" module:"onf-enterprise"`
	Description	*string	`path:"description" module:"onf-enterprise"`
	DisplayName	*string	`path:"display-name" module:"onf-enterprise"`
	Sd	*uint32	`path:"sd" module:"onf-enterprise"`
	Slice	*OnfEnterprise_Enterprises_Enterprise_Template_Slice	`path:"slice" module:"onf-enterprise"`
	Sst	*uint8	`path:"sst" module:"onf-enterprise"`
	TpId	*string	`path:"tp-id" module:"onf-enterprise"`
}

// IsYANGGoStruct ensures that OnfEnterprise_Enterprises_Enterprise_Template implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfEnterprise_Enterprises_Enterprise_Template) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfEnterprise_Enterprises_Enterprise_Template struct, which is a YANG list entry.
func (t *OnfEnterprise_Enterprises_Enterprise_Template) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TpId == nil {
		return nil, fmt.Errorf("nil value for key TpId")
	}

	return map[string]interface{}{
		"tp-id": *t.TpId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfEnterprise_Enterprises_Enterprise_Template) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfEnterprise_Enterprises_Enterprise_Template"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfEnterprise_Enterprises_Enterprise_Template) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfEnterprise_Enterprises_Enterprise_Template_Slice represents the /onf-enterprise/enterprises/enterprise/template/slice YANG schema element.
type OnfEnterprise_Enterprises_Enterprise_Template_Slice struct {
	Mbr	*OnfEnterprise_Enterprises_Enterprise_Template_Slice_Mbr	`path:"mbr" module:"onf-enterprise"`
}

// IsYANGGoStruct ensures that OnfEnterprise_Enterprises_Enterprise_Template_Slice implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfEnterprise_Enterprises_Enterprise_Template_Slice) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfEnterprise_Enterprises_Enterprise_Template_Slice) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfEnterprise_Enterprises_Enterprise_Template_Slice"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfEnterprise_Enterprises_Enterprise_Template_Slice) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfEnterprise_Enterprises_Enterprise_Template_Slice_Mbr represents the /onf-enterprise/enterprises/enterprise/template/slice/mbr YANG schema element.
type OnfEnterprise_Enterprises_Enterprise_Template_Slice_Mbr struct {
	Downlink	*uint64	`path:"downlink" module:"onf-enterprise"`
	DownlinkBurstSize	*uint32	`path:"downlink-burst-size" module:"onf-enterprise"`
	Uplink	*uint64	`path:"uplink" module:"onf-enterprise"`
	UplinkBurstSize	*uint32	`path:"uplink-burst-size" module:"onf-enterprise"`
}

// IsYANGGoStruct ensures that OnfEnterprise_Enterprises_Enterprise_Template_Slice_Mbr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfEnterprise_Enterprises_Enterprise_Template_Slice_Mbr) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfEnterprise_Enterprises_Enterprise_Template_Slice_Mbr) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfEnterprise_Enterprises_Enterprise_Template_Slice_Mbr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfEnterprise_Enterprises_Enterprise_Template_Slice_Mbr) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfEnterprise_Enterprises_Enterprise_TrafficClass represents the /onf-enterprise/enterprises/enterprise/traffic-class YANG schema element.
type OnfEnterprise_Enterprises_Enterprise_TrafficClass struct {
	Arp	*uint8	`path:"arp" module:"onf-enterprise"`
	Description	*string	`path:"description" module:"onf-enterprise"`
	DisplayName	*string	`path:"display-name" module:"onf-enterprise"`
	Pdb	*uint16	`path:"pdb" module:"onf-enterprise"`
	Pelr	*int8	`path:"pelr" module:"onf-enterprise"`
	Qci	*uint8	`path:"qci" module:"onf-enterprise"`
	TcId	*string	`path:"tc-id" module:"onf-enterprise"`
}

// IsYANGGoStruct ensures that OnfEnterprise_Enterprises_Enterprise_TrafficClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfEnterprise_Enterprises_Enterprise_TrafficClass) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfEnterprise_Enterprises_Enterprise_TrafficClass struct, which is a YANG list entry.
func (t *OnfEnterprise_Enterprises_Enterprise_TrafficClass) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TcId == nil {
		return nil, fmt.Errorf("nil value for key TcId")
	}

	return map[string]interface{}{
		"tc-id": *t.TcId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfEnterprise_Enterprises_Enterprise_TrafficClass) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfEnterprise_Enterprises_Enterprise_TrafficClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfEnterprise_Enterprises_Enterprise_TrafficClass) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }



var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7d, 0x6b, 0x53, 0xdb, 0xca,
		0xb2, 0xf6, 0xf7, 0xfc, 0x8a, 0x29, 0x57, 0xad, 0x3a, 0x98, 0x85, 0x84, 0xcd, 0x2d, 0x81, 0x2f,
		0x29, 0x02, 0x64, 0xbd, 0xd4, 0x86, 0x84, 0x1d, 0x92, 0x7d, 0xf6, 0xde, 0xe0, 0x50, 0xc2, 0x1a,
		0x9b, 0xa9, 0xc8, 0x92, 0x5e, 0x69, 0x4c, 0xc2, 0x0a, 0xfc, 0xf7, 0x53, 0xba, 0xd8, 0x96, 0x6f,
		0x58, 0xd3, 0x3d, 0x92, 0x6f, 0x9d, 0x5a, 0x8b, 0x38, 0xc6, 0x33, 0xb2, 0x46, 0xdd, 0xfd, 0x3c,
		0xdd, 0xd3, 0xd3, 0xfd, 0xfb, 0x0d, 0x63, 0x8c, 0x55, 0x3e, 0x59, 0x1d, 0x5e, 0x39, 0x62, 0x15,
		0x9b, 0x3f, 0x8a, 0x26, 0xaf, 0x6c, 0x25, 0xef, 0xfe, 0x43, 0xb8, 0x76, 0xe5, 0x88, 0xd5, 0xd3,
		0x7f, 0x9e, 0x78, 0x6e, 0x4b, 0xb4, 0x2b, 0x47, 0xac, 0x96, 0xbe, 0x71, 0x2a, 0x82, 0xca, 0x11,
		0x4b, 0xa6, 0x88, 0xdf, 0x68, 0x7a, 0xae, 0xcb, 0x9b, 0x52, 0x3c, 0x0a, 0xf9, 0x64, 0x84, 0x3c,
		0x88, 0x26, 0x0b, 0x87, 0x3e, 0x32, 0x74, 0xb5, 0xc9, 0x1f, 0xdf, 0x1a, 0xfe, 0xf0, 0x29, 0x0f,
		0x9b, 0x81, 0xf0, 0xa5, 0xf0, 0xdc, 0x68, 0xcc, 0xd7, 0x07, 0xce, 0x26, 0x8e, 0x63, 0xd2, 0xf3,
		0x99, 0xc3, 0x1f, 0xb9, 0x13, 0xfd, 0x5e, 0x5a, 0xc2, 0xe5, 0xc1, 0xe8, 0x5c, 0xc3, 0x37, 0xd4,
		0x7f, 0x7b, 0xf4, 0xc6, 0xfa, 0xbf, 0xb8, 0x0a, 0x78, 0x4b, 0xfc, 0x1a, 0xbb, 0x81, 0xe1, 0x9b,
		0x18, 0xfd, 0xc6, 0xf1, 0x6f, 0xaf, 0xbd, 0x6e, 0xd0, 0xe4, 0x13, 0x47, 0x26, 0xdf, 0x84, 0x3f,
		0xfd, 0xf4, 0x82, 0xe8, 0xcb, 0x54, 0xfc, 0xe4, 0x22, 0x5b, 0x93, 0x3f, 0xf8, 0xff, 0xac, 0xf0,
		0x38, 0x68, 0x77, 0x3b, 0xdc, 0x95, 0x95, 0x23, 0x26, 0x83, 0x2e, 0x9f, 0xf2, 0xc1, 0xcc, 0xa7,
		0xa2, 0xef, 0x34, 0xf6, 0xa1, 0x97, 0xa1, 0x77, 0x5e, 0x46, 0x57, 0x79, 0xe4, 0x51, 0xbe, 0xfa,
		0x48, 0xa7, 0xdf, 0xd6, 0x6b, 0x4f, 0x76, 0xda, 0x1d, 0x8e, 0x3c, 0xe0, 0x0b, 0x11, 0x4a, 0xe6,
		0xb5, 0x86, 0x1e, 0x32, 0x9b, 0x22, 0x1c, 0x33, 0x1e, 0xec, 0xcc, 0x07, 0x9c, 0xe7, 0x41, 0xe7,
		0x7b, 0xe0, 0x79, 0x1f, 0xbc, 0xb2, 0x00, 0x28, 0x0b, 0x42, 0x6e, 0x81, 0x98, 0x2c, 0x18, 0x53,
		0x04, 0x64, 0xa6, 0xa0, 0xf4, 0x3f, 0x60, 0x35, 0x9b, 0x86, 0x1f, 0x78, 0x1d, 0x2e, 0x1f, 0x78,
		0x37, 0x34, 0xba, 0x81, 0x33, 0x7b, 0x31, 0x7a, 0x4b, 0x3b, 0x61, 0xec, 0x8c, 0x9b, 0x1c, 0x11,
		0x9e, 0x6f, 0x5f, 0x2e, 0x22, 0xd9, 0x39, 0x3e, 0x39, 0x61, 0x83, 0x79, 0x66, 0xcd, 0x91, 0x0a,
		0x4f, 0x6d, 0xc6, 0xc7, 0x66, 0x09, 0x91, 0x8a, 0x30, 0xa9, 0x09, 0x95, 0xaa, 0x70, 0x81, 0x85,
		0x0c, 0x2c, 0x6c, 0xca, 0x42, 0xf7, 0xba, 0xf0, 0xcd, 0x10, 0xc2, 0xfe, 0xd5, 0xbe, 0x3e, 0xf9,
		0x5c, 0x6d, 0x9d, 0xbb, 0x81, 0xc8, 0xb3, 0xd0, 0x3d, 0x7b, 0xf2, 0xee, 0x0d, 0xec, 0xcb, 0xbf,
		0xf2, 0xc5, 0x2b, 0x4d, 0x2f, 0xe0, 0xc6, 0x7e, 0xdb, 0xe0, 0xae, 0xed, 0x7b, 0x22, 0x5e, 0xaa,
		0x9c, 0xea, 0x31, 0x36, 0x52, 0x4d, 0x39, 0xba, 0x81, 0x13, 0x29, 0x87, 0x7c, 0xe0, 0x6c, 0xbf,
		0xcd, 0xa2, 0xc9, 0x48, 0x33, 0x48, 0x33, 0x16, 0x48, 0x33, 0xec, 0x21, 0x79, 0xcd, 0xa9, 0x14,
		0xd9, 0x41, 0x6a, 0xfa, 0x90, 0x19, 0x99, 0xe8, 0x85, 0x08, 0x27, 0xb2, 0x0e, 0xd2, 0x12, 0xd2,
		0x12, 0x75, 0x69, 0x1b, 0xd6, 0x96, 0x1c, 0x9f, 0xbd, 0xe0, 0x6e, 0x5b, 0x3e, 0x54, 0x8e, 0xd8,
		0x4d, 0xae, 0xa5, 0xca, 0xf7, 0x08, 0xe3, 0x99, 0x2f, 0x85, 0x9b, 0xfb, 0x99, 0x2b, 0x4a, 0xf5,
		0xd8, 0xb0, 0x7f, 0x59, 0x4e, 0x97, 0x4f, 0xa7, 0xe2, 0x53, 0xc7, 0x7d, 0x0c, 0xac, 0x66, 0xb4,
		0xaa, 0xa7, 0xa2, 0x2d, 0x64, 0xe4, 0x33, 0xd6, 0x72, 0x8f, 0x7f, 0xd9, 0x52, 0x58, 0x0a, 0xeb,
		0x57, 0xf9, 0x4b, 0x51, 0xdb, 0xd9, 0x2b, 0x71, 0x35, 0xde, 0xe8, 0xf9, 0x54, 0xa3, 0x08, 0x03,
		0x2f, 0x42, 0xdf, 0xb1, 0x9e, 0x0c, 0x37, 0xd1, 0xa6, 0xbc, 0x16, 0x3e, 0x3b, 0x4a, 0xd1, 0xc4,
		0x27, 0x43, 0x59, 0x34, 0x94, 0x49, 0x8f, 0x75, 0x43, 0xce, 0x84, 0xcb, 0xfe, 0xfa, 0x76, 0xce,
		0xbc, 0x80, 0x9d, 0x5c, 0x9c, 0x93, 0x6d, 0x27, 0xdb, 0xde, 0x5b, 0xe7, 0x50, 0x06, 0xc2, 0x6d,
		0x93, 0x59, 0x27, 0xb3, 0x9e, 0x6b, 0x29, 0xde, 0xd5, 0xc8, 0xa8, 0x47, 0xb7, 0x25, 0xec, 0xfc,
		0xa6, 0x5c, 0xd8, 0x8a, 0x06, 0xfc, 0xfc, 0x94, 0xb5, 0xbc, 0x60, 0x3a, 0x37, 0x37, 0xc9, 0x80,
		0x93, 0x01, 0x7f, 0x2d, 0xea, 0x6c, 0xcc, 0x14, 0x39, 0xb2, 0xe8, 0x64, 0xd1, 0x93, 0xa5, 0xd8,
		0xdd, 0x59, 0x42, 0x8b, 0x9e, 0x43, 0x60, 0xaf, 0x2c, 0x29, 0x79, 0xe0, 0xe6, 0x96, 0xd8, 0xca,
		0x8d, 0x65, 0xfc, 0x7d, 0x6c, 0xfc, 0xf7, 0xae, 0x91, 0xbe, 0xa8, 0x19, 0x87, 0xb7, 0xb7, 0xc6,
		0x9d, 0xd9, 0xd8, 0xcc, 0x6b, 0x63, 0xcc, 0x67, 0xd3, 0x7c, 0xbe, 0xf9, 0xfe, 0xeb, 0xdf, 0x0d,
		0x73, 0xf3, 0xd9, 0xbc, 0xf9, 0xde, 0xb9, 0x8c, 0x5f, 0x98, 0x37, 0xdf, 0x9d, 0x8b, 0x86, 0xb9,
		0x59, 0x29, 0x0e, 0xa9, 0x94, 0x76, 0x33, 0xfe, 0xc1, 0x9f, 0x5e, 0x85, 0xa5, 0x78, 0x37, 0xea,
		0x58, 0xca, 0x19, 0x7b, 0x1e, 0x97, 0xc2, 0x3d, 0x73, 0x78, 0x64, 0x1a, 0xc3, 0xd7, 0xc5, 0x2f,
		0x12, 0xeb, 0xcc, 0x27, 0xeb, 0xef, 0xf6, 0xf6, 0x0e, 0xde, 0xee, 0xed, 0xd5, 0xde, 0xee, 0xbe,
		0xad, 0x1d, 0xee, 0xef, 0xd7, 0x0f, 0xea, 0xfb, 0xaf, 0x0c, 0xfe, 0x1c, 0xd8, 0x3c, 0xe0, 0xf6,
		0x87, 0xe8, 0x3b, 0xbb, 0x5d, 0xc7, 0x51, 0xba, 0xd5, 0x63, 0xd7, 0xf5, 0xa4, 0x35, 0x33, 0xb6,
		0x56, 0x09, 0x9b, 0x0f, 0xbc, 0x63, 0xf9, 0x56, 0x6c, 0xe1, 0x2a, 0xdb, 0x9e, 0xdb, 0x32, 0x26,
		0xd9, 0xd5, 0xed, 0x89, 0x9b, 0xb0, 0xdb, 0x0a, 0x1b, 0x7f, 0xc9, 0xd5, 0x64, 0xd0, 0x6d, 0xca,
		0xd4, 0x1f, 0xac, 0x7c, 0x76, 0x5b, 0x27, 0x99, 0x09, 0xae, 0x93, 0xf1, 0x77, 0x13, 0xde, 0x0b,
		0x27, 0xbd, 0x39, 0x59, 0xaa, 0x5e, 0x14, 0xb7, 0x42, 0x67, 0x2c, 0x14, 0x6e, 0x81, 0x26, 0xed,
		0x15, 0x83, 0xd7, 0x60, 0xf8, 0x7e, 0x07, 0x77, 0x95, 0xb9, 0xa3, 0x0a, 0x77, 0x25, 0x0f, 0xfc,
		0x40, 0x84, 0xaf, 0x6d, 0xc4, 0x67, 0x3f, 0x34, 0x7b, 0xfb, 0x7d, 0xb0, 0xd1, 0x9e, 0x19, 0x57,
		0xee, 0xa6, 0x3b, 0x9f, 0xb8, 0xf9, 0x31, 0xe7, 0x5d, 0xf7, 0xe8, 0x2f, 0x5d, 0xdb, 0xee, 0x83,
		0x95, 0x9d, 0xbd, 0xd9, 0x9e, 0xf9, 0xac, 0xda, 0x16, 0xfb, 0xf4, 0xc7, 0x3e, 0xe3, 0xe1, 0xe5,
		0xa6, 0xcd, 0x4a, 0x1b, 0xeb, 0xfc, 0xd5, 0x1d, 0xad, 0x05, 0xdd, 0x59, 0x9f, 0xf8, 0xd0, 0x61,
		0x60, 0x34, 0x7b, 0x6b, 0xdd, 0xf7, 0x1d, 0xd1, 0xb4, 0xd4, 0xf6, 0x47, 0xb2, 0x83, 0xd4, 0x7c,
		0xaf, 0x9e, 0x98, 0x64, 0x66, 0xc8, 0xbb, 0x97, 0x5e, 0x9f, 0xa7, 0xbb, 0xc5, 0x67, 0xee, 0x8c,
		0x2e, 0xa1, 0xbf, 0xf5, 0xaa, 0x9c, 0xe9, 0x71, 0xb8, 0x66, 0xc9, 0xdf, 0x40, 0x0e, 0x6d, 0x3b,
		0xe0, 0x61, 0x98, 0x7f, 0xe9, 0xfa, 0xb2, 0x98, 0x0e, 0xcc, 0x79, 0xff, 0x23, 0xf2, 0x78, 0x9c,
		0x8c, 0xee, 0xef, 0xd5, 0x65, 0xe4, 0xd2, 0x64, 0x67, 0x42, 0x3e, 0xf0, 0x80, 0x59, 0xec, 0xc1,
		0x0b, 0x63, 0x2c, 0xdd, 0x62, 0x96, 0xcb, 0xce, 0xaf, 0xb6, 0x98, 0x17, 0xbd, 0x1b, 0x76, 0xef,
		0x5d, 0x2e, 0xcd, 0xbc, 0x57, 0x56, 0x73, 0x24, 0x72, 0x8b, 0x33, 0x44, 0xac, 0x81, 0xe2, 0x0d,
		0x15, 0x73, 0xb4, 0xb8, 0xa3, 0xc5, 0x1e, 0x2e, 0xfe, 0x8a, 0xbe, 0x55, 0xce, 0x67, 0x75, 0x69,
		0xb9, 0xb6, 0x25, 0xbd, 0xe0, 0x29, 0xbf, 0xb3, 0x9c, 0x3f, 0x76, 0x31, 0xf6, 0x74, 0x23, 0xf1,
		0x55, 0x79, 0xbc, 0x3d, 0x83, 0x7b, 0xa8, 0x30, 0x26, 0xfd, 0x76, 0x37, 0x4a, 0x8f, 0x43, 0x4d,
		0x7c, 0x86, 0xa3, 0x7e, 0xbe, 0xa1, 0xa6, 0xf9, 0xd8, 0x3b, 0xc4, 0xdd, 0x29, 0xfc, 0x8e, 0x27,
		0xdc, 0xf9, 0xe3, 0x1e, 0xe2, 0xde, 0x21, 0xe1, 0x29, 0x6d, 0x51, 0x80, 0xa9, 0x13, 0x6d, 0x6c,
		0xdc, 0xd4, 0x8c, 0xc3, 0xc6, 0xf3, 0x4d, 0xdd, 0x38, 0x6c, 0x24, 0x2f, 0xeb, 0xf1, 0x5f, 0xc9,
		0xeb, 0x9d, 0x9b, 0x9a, 0xb1, 0xd7, 0x7b, 0xbd, 0x7f, 0x53, 0x33, 0xf6, 0x1b, 0xd5, 0xdb, 0x5b,
		0xb3, 0xfa, 0x7b, 0xf7, 0x45, 0x7d, 0xe0, 0xc6, 0x1f, 0x37, 0xb7, 0xb7, 0xfe, 0xef, 0x4f, 0x2f,
		0xd1, 0xcf, 0x8b, 0x97, 0xc6, 0x9f, 0xd5, 0xf7, 0x15, 0xf0, 0xb7, 0x6f, 0x80, 0x46, 0xbe, 0x6c,
		0xcd, 0x51, 0x7a, 0x0e, 0x56, 0x50, 0x7a, 0x8e, 0x9e, 0xa3, 0x67, 0x6c, 0x19, 0xad, 0x63, 0xe3,
		0x63, 0xe3, 0x77, 0x6d, 0x6b, 0xef, 0xa5, 0x7a, 0x54, 0xdd, 0x18, 0x7d, 0xef, 0xa8, 0xfa, 0xbb,
		0xb6, 0xb5, 0xff, 0xb2, 0xb1, 0x31, 0xe1, 0x37, 0xef, 0x27, 0xcd, 0x51, 0x7d, 0xde, 0xd8, 0xd8,
		0x48, 0xe5, 0x66, 0x48, 0x96, 0x6e, 0x6a, 0xf5, 0xc6, 0xfb, 0xf8, 0x65, 0xf2, 0xb3, 0x2f, 0x8d,
		0xb9, 0x3e, 0x5c, 0x9d, 0x28, 0x83, 0x5b, 0x68, 0x15, 0xfa, 0x7e, 0xd4, 0xf8, 0xf3, 0xa8, 0xfa,
		0xfb, 0xe0, 0xa5, 0xf7, 0x3a, 0xfe, 0x59, 0x7d, 0xde, 0x30, 0x37, 0x6f, 0x6f, 0x4d, 0x73, 0xb3,
		0x9a, 0xdc, 0x50, 0xfa, 0xb9, 0xcd, 0xe4, 0xb7, 0xef, 0x8f, 0x8e, 0xc6, 0xde, 0xaa, 0x6e, 0xfc,
		0x61, 0xce, 0x43, 0x2d, 0xde, 0x14, 0x7b, 0x1d, 0x45, 0xb5, 0x43, 0xc0, 0x93, 0xed, 0x75, 0x2c,
		0xe1, 0xe6, 0x49, 0x2f, 0xd0, 0xad, 0x5d, 0xaa, 0x5b, 0x09, 0x1a, 0x6d, 0x0c, 0x64, 0xab, 0x41,
		0x53, 0xbc, 0x5d, 0xd7, 0x56, 0x84, 0xce, 0x70, 0xbc, 0x26, 0xa3, 0x0f, 0xde, 0xba, 0x28, 0x7a,
		0x69, 0x77, 0xf6, 0x77, 0x17, 0x68, 0x71, 0xcb, 0x32, 0x38, 0x00, 0x8d, 0xc4, 0xe2, 0x5c, 0x25,
		0xb2, 0xd9, 0xfd, 0x5d, 0x93, 0xbb, 0xc6, 0xc6, 0xf0, 0x16, 0x4a, 0x23, 0x42, 0xb5, 0x83, 0xfa,
		0x4b, 0xf5, 0xfd, 0xe0, 0xfd, 0x46, 0x84, 0x47, 0x9b, 0x90, 0x51, 0xef, 0xab, 0xcf, 0xb7, 0xb7,
		0x66, 0xa5, 0x68, 0x4b, 0xfc, 0x46, 0xef, 0xbc, 0xb3, 0xe7, 0xcb, 0xa1, 0x7d, 0x15, 0xcb, 0xf7,
		0x8d, 0x1c, 0xa9, 0x07, 0x93, 0xe2, 0x61, 0xf9, 0xf6, 0x84, 0xd9, 0x8c, 0x74, 0x84, 0x6c, 0xf8,
		0x81, 0xe2, 0x0a, 0x14, 0x57, 0x50, 0x8d, 0x2b, 0xc0, 0x63, 0x04, 0x19, 0xc9, 0xcb, 0x2f, 0xca,
		0x50, 0xae, 0x02, 0xe5, 0x28, 0x00, 0x42, 0x86, 0xe1, 0x24, 0x48, 0xc0, 0xc4, 0x72, 0x10, 0x1d,
		0xf0, 0x08, 0xe0, 0x1c, 0x28, 0xae, 0xa1, 0x6b, 0xc9, 0x54, 0xd3, 0x26, 0xb4, 0xae, 0x59, 0x51,
		0x48, 0xa6, 0xa0, 0x20, 0x50, 0xca, 0x80, 0x4f, 0xb3, 0xe8, 0xcf, 0x84, 0x4e, 0xb7, 0x98, 0x07,
		0x82, 0xab, 0x1c, 0xf7, 0x19, 0x77, 0xda, 0x94, 0x0e, 0x62, 0xb0, 0x9c, 0xc7, 0x7f, 0xf2, 0x6f,
		0x96, 0x11, 0xa4, 0x13, 0xa4, 0x6b, 0x84, 0x74, 0x75, 0x71, 0x26, 0x3c, 0x27, 0x3c, 0x2f, 0x68,
		0xc9, 0x94, 0xcf, 0x2b, 0x2d, 0x05, 0xa2, 0x97, 0x89, 0x6c, 0x2a, 0xe7, 0x9c, 0xc6, 0x6d, 0x41,
		0xfe, 0xf3, 0x4e, 0x53, 0xb1, 0x0d, 0x79, 0xee, 0x89, 0xd0, 0x8d, 0xd0, 0x4d, 0x23, 0xba, 0xe5,
		0x3e, 0x59, 0x45, 0xc0, 0x46, 0xc0, 0x56, 0xdc, 0x92, 0xbd, 0xab, 0x11, 0xac, 0x61, 0x60, 0x2d,
		0x77, 0xc5, 0x92, 0x09, 0xa6, 0x3a, 0x57, 0xc5, 0x92, 0x69, 0x70, 0xe6, 0x88, 0x50, 0xc6, 0x81,
		0x57, 0xd5, 0x79, 0xf2, 0xa5, 0x23, 0x12, 0x7c, 0xad, 0x03, 0x7c, 0xe5, 0x4d, 0x6f, 0xc4, 0xb1,
		0x38, 0x1d, 0x6c, 0xae, 0x68, 0x56, 0x87, 0xb4, 0xab, 0xca, 0x6a, 0x82, 0x51, 0x17, 0xa4, 0xda,
		0x60, 0xd5, 0x47, 0x9b, 0x1a, 0x69, 0x53, 0x27, 0xbc, 0x5a, 0x01, 0x21, 0x49, 0xf1, 0x59, 0x2b,
		0xb3, 0x45, 0x3c, 0x6b, 0xc4, 0xb0, 0x47, 0x2c, 0x8b, 0x84, 0xb3, 0x49, 0x2d, 0xac, 0x52, 0x13,
		0x55, 0xd2, 0xc5, 0x32, 0x75, 0x32, 0x27, 0x04, 0xeb, 0xd4, 0xc2, 0x3e, 0x8b, 0x5a, 0xda, 0x77,
		0xb5, 0x35, 0xcc, 0xc8, 0x28, 0x88, 0x05, 0xab, 0x9c, 0x2c, 0xee, 0x71, 0x48, 0x95, 0xec, 0x81,
		0xa9, 0x84, 0x56, 0x6d, 0xff, 0x75, 0x12, 0xa8, 0x9f, 0xdb, 0xfd, 0xdd, 0x07, 0x45, 0x76, 0x4b,
		0x30, 0x4e, 0x30, 0xbe, 0x04, 0x30, 0xfe, 0x64, 0xb9, 0x6d, 0x43, 0xd8, 0xdc, 0x95, 0xa2, 0x25,
		0xc6, 0x8e, 0x87, 0x12, 0x9e, 0x13, 0x9e, 0xcf, 0x17, 0xcf, 0x77, 0x35, 0x2d, 0x6d, 0x8d, 0x12,
		0x2c, 0x73, 0x81, 0x07, 0x36, 0xc1, 0x52, 0x5b, 0xd6, 0x44, 0x7f, 0x46, 0x6d, 0xd9, 0x13, 0x8b,
		0x44, 0x73, 0x3a, 0xf7, 0x01, 0x9c, 0xde, 0x44, 0x83, 0x71, 0xb4, 0xe6, 0xd2, 0xfa, 0x25, 0x3a,
		0xdd, 0x0e, 0xbb, 0x17, 0x32, 0xb0, 0x24, 0x07, 0x52, 0x9a, 0x3a, 0x51, 0x1a, 0xa2, 0x34, 0xba,
		0x29, 0x8d, 0x6a, 0x20, 0x70, 0x10, 0x10, 0xf4, 0x7e, 0xba, 0x8e, 0x70, 0x7f, 0xc0, 0x9f, 0xd5,
		0xe0, 0xc8, 0x49, 0x3a, 0x13, 0x70, 0x85, 0x47, 0x94, 0xed, 0x8a, 0x07, 0xc6, 0x69, 0xdc, 0xba,
		0x83, 0xf9, 0x3c, 0xc8, 0x66, 0x31, 0xb1, 0xcb, 0x0f, 0x5f, 0x58, 0xef, 0x6a, 0xcc, 0xb6, 0xa4,
		0xc5, 0x22, 0x75, 0x64, 0xc2, 0x65, 0xf7, 0x3e, 0xf4, 0x50, 0x19, 0x76, 0x3f, 0x06, 0xaa, 0xa5,
		0x3a, 0xb4, 0x55, 0x93, 0xd6, 0xea, 0xd2, 0x5e, 0xed, 0x5a, 0xac, 0x5d, 0x9b, 0xf5, 0x69, 0x35,
		0x92, 0x9d, 0x00, 0x65, 0x05, 0xec, 0xc0, 0x8c, 0x49, 0x0a, 0x0c, 0xca, 0x26, 0x29, 0x0e, 0xe6,
		0x20, 0xe6, 0x17, 0xcb, 0x6d, 0x73, 0xf4, 0x31, 0x4c, 0x9c, 0xb4, 0x6a, 0x73, 0x6f, 0x34, 0xbb,
		0x39, 0xba, 0x39, 0x79, 0x11, 0xdc, 0x5c, 0x83, 0xfb, 0xa3, 0xd5, 0x0d, 0x2a, 0xfa, 0x11, 0xa8,
		0xd5, 0x38, 0x9b, 0xfb, 0x53, 0x79, 0x33, 0x9f, 0xd1, 0x65, 0x9d, 0xc1, 0x85, 0xa4, 0x6e, 0x74,
		0x7d, 0x3d, 0xa4, 0x27, 0x9d, 0xa7, 0x08, 0xca, 0x63, 0x1c, 0x8f, 0x50, 0x9e, 0xe4, 0x5a, 0x44,
		0x78, 0x88, 0xf0, 0x10, 0xe1, 0x21, 0xc2, 0x43, 0x84, 0x87, 0x08, 0x0f, 0x11, 0x9e, 0xf5, 0x24,
		0x3c, 0x85, 0x86, 0x92, 0x72, 0x16, 0xd5, 0x9d, 0x3a, 0x7e, 0x42, 0x2d, 0xd9, 0x41, 0x51, 0xce,
		0xed, 0x4c, 0x7d, 0xce, 0xcc, 0xeb, 0xed, 0x4c, 0x78, 0x67, 0xbb, 0xb7, 0x65, 0xbc, 0xad, 0x1e,
		0xb1, 0x65, 0x13, 0x6b, 0xcf, 0x9e, 0xf5, 0xaf, 0x73, 0x37, 0x78, 0x19, 0x66, 0x5e, 0xdf, 0x65,
		0xa8, 0xd6, 0xdd, 0x59, 0x7a, 0xf9, 0xbb, 0xcb, 0xfb, 0xa0, 0xb2, 0x00, 0x41, 0x6f, 0xdf, 0x0b,
		0xa4, 0xc1, 0x5d, 0xc4, 0xc6, 0x7e, 0x7f, 0x06, 0x5c, 0xf8, 0xfb, 0xc2, 0x0a, 0x25, 0x8b, 0xe6,
		0x8a, 0x88, 0x67, 0x10, 0x23, 0x18, 0x6d, 0xea, 0x17, 0x44, 0x29, 0x29, 0x02, 0x5e, 0xfe, 0xa6,
		0x7e, 0xac, 0x26, 0x6e, 0xb7, 0x73, 0x8f, 0xda, 0xd0, 0x3f, 0x00, 0x0c, 0xc5, 0xd1, 0xc1, 0x15,
		0xdb, 0xce, 0xaf, 0xd1, 0x76, 0x7e, 0x51, 0x4b, 0x7b, 0xb0, 0xbf, 0xbf, 0xbb, 0x4f, 0x19, 0x7a,
		0x73, 0x43, 0xf1, 0x50, 0x5a, 0x81, 0x44, 0xe2, 0x78, 0x32, 0x07, 0x0e, 0xc9, 0x3f, 0x8a, 0x80,
		0xa0, 0x9c, 0xa0, 0x9c, 0xa0, 0x9c, 0xa0, 0x9c, 0xa0, 0x9c, 0xa0, 0x9c, 0xa0, 0x5c, 0x0d, 0xca,
		0x03, 0x4f, 0x7a, 0x4d, 0xcf, 0x41, 0x00, 0x79, 0x6f, 0x06, 0x1c, 0x8c, 0x5f, 0xa5, 0xd3, 0x50,
		0xb2, 0x3d, 0x81, 0xf9, 0x2a, 0x83, 0x39, 0x4c, 0x5b, 0x18, 0x36, 0xcb, 0xfe, 0x94, 0xb7, 0xac,
		0xae, 0x13, 0xaf, 0xeb, 0xd7, 0x93, 0xab, 0x0a, 0xe5, 0xe9, 0x23, 0x21, 0x6b, 0x97, 0xd8, 0xc0,
		0x3a, 0x2c, 0xed, 0x2a, 0xe7, 0xe9, 0x7f, 0x3d, 0xb9, 0x7a, 0xfe, 0x76, 0x7a, 0xb5, 0x9c, 0xd9,
		0xf3, 0x32, 0xb0, 0x5a, 0x2d, 0xd1, 0x34, 0x9a, 0x8e, 0xa5, 0xd0, 0xe8, 0x68, 0xcc, 0x1c, 0x0f,
		0x4f, 0x83, 0xdc, 0x52, 0x10, 0xee, 0x0f, 0x26, 0x3d, 0x96, 0xce, 0xc9, 0x40, 0x73, 0x12, 0x7b,
		0x21, 0xf6, 0xb2, 0xb8, 0xec, 0xc5, 0xe1, 0x56, 0x2b, 0xe0, 0x2d, 0x0c, 0x79, 0x79, 0x0b, 0x33,
		0x75, 0xf1, 0xfe, 0xab, 0x69, 0x6e, 0x27, 0xff, 0x0d, 0xa9, 0xed, 0xb6, 0x6c, 0x1a, 0xc2, 0x2e,
		0x6c, 0x77, 0x53, 0x6b, 0x8d, 0x93, 0xb4, 0x9f, 0xad, 0xfa, 0xe9, 0xe4, 0x7c, 0x8d, 0x6e, 0x27,
		0x51, 0xa7, 0x7c, 0x8d, 0x6f, 0x27, 0x31, 0x03, 0x70, 0x23, 0xdc, 0xb1, 0xc9, 0x72, 0x35, 0xc6,
		0x85, 0xae, 0x29, 0x70, 0x8f, 0x5f, 0xdf, 0xde, 0xbe, 0x4a, 0x95, 0x20, 0x4d, 0xfb, 0xf9, 0x15,
		0x5d, 0x55, 0xa5, 0x50, 0x0d, 0x09, 0x53, 0x69, 0xce, 0x55, 0xb1, 0x5f, 0x4d, 0x80, 0xd5, 0x05,
		0x57, 0x8b, 0xc0, 0xaa, 0x09, 0xea, 0xac, 0xe5, 0x51, 0x14, 0x4c, 0xb4, 0x40, 0xe6, 0x69, 0xaa,
		0x89, 0x93, 0xbf, 0x0a, 0xb4, 0xe9, 0xf7, 0x2b, 0x6d, 0x63, 0x27, 0x76, 0xa4, 0xce, 0xdd, 0x3d,
		0x55, 0xb1, 0x9f, 0x35, 0x9b, 0xd2, 0x32, 0xb9, 0x5f, 0xc0, 0x0c, 0x32, 0x1f, 0xf5, 0x54, 0xd5,
		0xc7, 0xa9, 0x16, 0xb6, 0xa7, 0x2a, 0x48, 0x4c, 0x75, 0x88, 0xeb, 0x2c, 0x77, 0x23, 0x3b, 0x25,
		0xeb, 0xb5, 0x31, 0x67, 0x3f, 0x1f, 0x78, 0xc0, 0xa3, 0xdf, 0xb5, 0x44, 0xbb, 0x1b, 0x24, 0x79,
		0xf7, 0xe1, 0x83, 0xd7, 0x75, 0x6c, 0x76, 0xcf, 0x99, 0xdf, 0x0d, 0x1f, 0xb8, 0x3d, 0x68, 0x95,
		0x32, 0xb0, 0x27, 0xff, 0x13, 0x32, 0x9b, 0x4f, 0xeb, 0x84, 0xae, 0xc1, 0x63, 0xa1, 0x12, 0x7e,
		0x45, 0x78, 0x20, 0xcb, 0x5f, 0x81, 0x56, 0xdd, 0xb3, 0x80, 0x78, 0x14, 0x7d, 0x4f, 0x62, 0xbb,
		0x19, 0x1e, 0x4d, 0xec, 0xff, 0x3f, 0xed, 0x17, 0xd1, 0xfb, 0x79, 0x9d, 0x0c, 0x5d, 0xc5, 0x3c,
		0xad, 0x7b, 0x87, 0xdb, 0x90, 0x5a, 0x9e, 0xc9, 0x40, 0x60, 0x13, 0x67, 0xc7, 0xf1, 0x7e, 0x32,
		0x2f, 0x60, 0xb6, 0x08, 0xad, 0xf8, 0x75, 0x6c, 0x2c, 0xc2, 0x38, 0xb2, 0x11, 0xd9, 0x8a, 0x49,
		0xf6, 0x26, 0xff, 0xb5, 0xfa, 0x51, 0xe8, 0x48, 0xc8, 0xc9, 0xc4, 0x90, 0x89, 0x29, 0xcf, 0xc4,
		0xdc, 0x7b, 0x9e, 0xc3, 0x2d, 0x50, 0xfb, 0x86, 0xfa, 0x22, 0xb9, 0x5b, 0x10, 0x8a, 0x4a, 0xce,
		0x57, 0x21, 0xce, 0x17, 0x90, 0xce, 0x41, 0xbc, 0xb0, 0x93, 0xcc, 0xa5, 0xae, 0xd3, 0x2b, 0x15,
		0xe0, 0x8d, 0xa9, 0xf4, 0xfc, 0x01, 0x34, 0x47, 0xc9, 0xd3, 0xe3, 0x67, 0xb0, 0xbe, 0x39, 0x1d,
		0xaf, 0x1a, 0x39, 0x5e, 0xcb, 0xe7, 0x78, 0xe5, 0xb6, 0xe3, 0xc0, 0x16, 0x3c, 0x2a, 0xbb, 0xe5,
		0xaa, 0x7b, 0xdb, 0x6a, 0x01, 0x58, 0x00, 0xd8, 0xc3, 0x36, 0x81, 0x80, 0x35, 0xe4, 0x30, 0x1b,
		0xa6, 0x2f, 0x6a, 0x11, 0xe5, 0xf2, 0x97, 0x42, 0xb9, 0x55, 0x0e, 0x6a, 0x35, 0x34, 0xd1, 0x84,
		0x46, 0x11, 0x86, 0x5d, 0xa5, 0x58, 0x3a, 0xa4, 0x38, 0xba, 0xee, 0x62, 0xe8, 0x64, 0xdd, 0xd7,
		0xca, 0xba, 0xe7, 0x2e, 0x26, 0x4e, 0x86, 0x9d, 0x0c, 0xbb, 0x7a, 0x71, 0xee, 0x55, 0x35, 0xeb,
		0x3c, 0x5f, 0x9d, 0xec, 0xac, 0x41, 0xcb, 0xb1, 0x57, 0xf7, 0x4a, 0x57, 0xed, 0x01, 0x3b, 0x37,
		0xc9, 0x80, 0x93, 0x01, 0x1f, 0x5a, 0xe9, 0x54, 0x30, 0xf2, 0x65, 0x35, 0x90, 0x1d, 0x27, 0x3b,
		0xae, 0xde, 0x9b, 0x7a, 0x21, 0xec, 0x78, 0x0e, 0x81, 0x55, 0xcd, 0xce, 0xc4, 0x57, 0x4d, 0xc6,
		0x57, 0x49, 0x2e, 0x02, 0x9f, 0x42, 0x21, 0x15, 0xdc, 0x8d, 0xf8, 0xd3, 0x6a, 0xd8, 0x74, 0x21,
		0x42, 0xc9, 0xbc, 0x16, 0xcb, 0x33, 0x94, 0x36, 0xea, 0x97, 0x17, 0x90, 0x72, 0x6f, 0xd4, 0x2f,
		0x60, 0xd7, 0xf2, 0x1c, 0xb2, 0x09, 0xb4, 0xa7, 0xb4, 0xd7, 0xa5, 0x53, 0xa6, 0xe1, 0xb2, 0xad,
		0x08, 0x31, 0xd4, 0xae, 0x9c, 0xba, 0xba, 0x52, 0xbb, 0xf2, 0x72, 0x56, 0x6d, 0x15, 0xda, 0x95,
		0xc7, 0x19, 0x59, 0x46, 0x3b, 0xf0, 0xba, 0x3e, 0x04, 0xd3, 0x32, 0xa3, 0xa1, 0xb9, 0x66, 0x09,
		0xc9, 0x4a, 0xa6, 0x62, 0xf1, 0x54, 0x21, 0xf5, 0x78, 0x25, 0x44, 0x53, 0x45, 0x34, 0xf5, 0x1e,
		0xaf, 0x00, 0x36, 0xa7, 0x09, 0x0d, 0xf3, 0xb2, 0xbb, 0xac, 0x52, 0xd0, 0x71, 0x2f, 0xdd, 0xba,
		0xa3, 0x4d, 0x87, 0xb4, 0xe9, 0x12, 0x5e, 0xa7, 0x80, 0xd8, 0x54, 0xfa, 0x71, 0x2f, 0xb8, 0xde,
		0x30, 0xea, 0x0a, 0x47, 0x5d, 0xe1, 0xb4, 0xb2, 0xd1, 0xc2, 0x96, 0x16, 0xcc, 0x4e, 0x0b, 0x59,
		0xdd, 0x35, 0x2a, 0x3d, 0x93, 0xe0, 0x26, 0x06, 0xd5, 0x15, 0x52, 0x8f, 0xa7, 0x01, 0xfa, 0x15,
		0x0f, 0x8c, 0x14, 0xc0, 0xff, 0xf9, 0xf9, 0x9a, 0x5d, 0x73, 0x29, 0x85, 0xdb, 0x0e, 0xa9, 0x1d,
		0x1a, 0xe1, 0xf8, 0xa2, 0xe0, 0x38, 0xb8, 0x1d, 0x1a, 0xa4, 0xc3, 0xe0, 0x98, 0x94, 0xc0, 0xea,
		0x56, 0x33, 0xed, 0x1d, 0x07, 0x91, 0xaa, 0x86, 0x56, 0x39, 0x1d, 0xaa, 0xa7, 0x49, 0x05, 0x75,
		0xa9, 0xa2, 0x76, 0x95, 0xd4, 0xae, 0x9a, 0xfa, 0x54, 0x14, 0x09, 0xb0, 0x50, 0x0d, 0x10, 0x01,
		0x4e, 0x50, 0xd0, 0x1d, 0x0d, 0xc7, 0x51, 0x13, 0xd7, 0xd9, 0x30, 0x07, 0x8e, 0x16, 0xd1, 0xd1,
		0x50, 0x37, 0xfb, 0xc3, 0x5a, 0x01, 0x9d, 0xd6, 0x40, 0xb3, 0x55, 0xd0, 0x6d, 0x1d, 0x0a, 0xb3,
		0x12, 0x85, 0x59, 0x0b, 0xfd, 0x56, 0x03, 0x67, 0x3d, 0x34, 0xb8, 0x4e, 0xa9, 0xfb, 0xe4, 0xda,
		0x96, 0xf4, 0x82, 0x27, 0x0d, 0x1e, 0x21, 0xba, 0x09, 0xd1, 0x98, 0xd4, 0xe2, 0x9b, 0x11, 0x8d,
		0x2a, 0xf9, 0x3b, 0x0d, 0x53, 0xe9, 0x69, 0x4e, 0x84, 0x0f, 0x2b, 0x14, 0x12, 0x66, 0x28, 0xc8,
		0x3a, 0x4e, 0xf5, 0x95, 0x75, 0xcf, 0x5b, 0x40, 0xbb, 0x1c, 0x4d, 0xba, 0xa6, 0x3d, 0x6c, 0x51,
		0xf6, 0xa3, 0x2a, 0xae, 0xc9, 0x51, 0x29, 0x4f, 0xef, 0xcd, 0x62, 0xcc, 0xd2, 0x98, 0x53, 0xf3,
		0x25, 0x4c, 0x90, 0x0d, 0xd9, 0x0d, 0x72, 0xcc, 0xae, 0xa3, 0xba, 0x42, 0xe6, 0xa4, 0x8b, 0x7a,
		0xbb, 0x41, 0x12, 0x59, 0x24, 0xb2, 0x48, 0x64, 0x91, 0xc8, 0x22, 0x91, 0x45, 0x22, 0x8b, 0x44,
		0x16, 0x89, 0x2c, 0xae, 0x3a, 0x59, 0x2c, 0x35, 0xa4, 0x89, 0xec, 0xa8, 0xd9, 0x9f, 0x07, 0x54,
		0x6f, 0x23, 0x14, 0x92, 0x6f, 0x67, 0xf3, 0xd9, 0xd2, 0x7f, 0x6c, 0xc3, 0x77, 0x29, 0x18, 0xb0,
		0x1e, 0xc7, 0xb5, 0x90, 0xfc, 0x2e, 0x69, 0x70, 0xfe, 0x57, 0xf4, 0x4d, 0xd2, 0xd7, 0xea, 0x8d,
		0x36, 0xe1, 0x8f, 0x11, 0x92, 0x10, 0x8a, 0xab, 0x9b, 0x3d, 0x86, 0xe3, 0x98, 0xfa, 0xd9, 0xd3,
		0x7c, 0x03, 0x1d, 0x75, 0xb4, 0x35, 0x59, 0x4e, 0xda, 0x2d, 0x2a, 0x81, 0xda, 0xd3, 0x6e, 0x91,
		0x3e, 0xca, 0xae, 0xb1, 0xb9, 0x3c, 0xbc, 0xd6, 0xf7, 0xa8, 0xf2, 0x41, 0x6a, 0x7e, 0x0f, 0x14,
		0x68, 0xb4, 0xf6, 0xb7, 0x8e, 0xf2, 0xdf, 0x08, 0x9b, 0xbb, 0x7a, 0xed, 0xaa, 0xa7, 0x81, 0x6a,
		0x49, 0xed, 0xaa, 0xa7, 0x00, 0xe9, 0x22, 0x74, 0xab, 0xb6, 0xdb, 0x79, 0xce, 0xd6, 0x4f, 0xd5,
		0xa0, 0x64, 0x38, 0x2e, 0x3f, 0x29, 0x7b, 0xf4, 0x3e, 0x9b, 0x68, 0x6c, 0x52, 0xa6, 0x71, 0x51,
		0x40, 0x47, 0x19, 0x4a, 0xf3, 0xc8, 0x34, 0x1e, 0x98, 0x1f, 0x75, 0xa5, 0x61, 0x94, 0x6d, 0x4c,
		0xd9, 0xc6, 0x85, 0x44, 0x62, 0xb4, 0xf7, 0xb6, 0xda, 0xa1, 0xe6, 0x56, 0x39, 0x59, 0x1f, 0xae,
		0xb9, 0x15, 0xba, 0x9c, 0xc2, 0xd8, 0x8c, 0xe8, 0xf2, 0x0a, 0xb8, 0x78, 0x51, 0x41, 0x0c, 0x47,
		0xa5, 0x2a, 0xdc, 0x74, 0xeb, 0x9d, 0xbf, 0x4a, 0xdc, 0x2c, 0xbe, 0x83, 0xad, 0x1a, 0x47, 0xbc,
		0x87, 0x78, 0xcf, 0x12, 0xf1, 0x9e, 0xdc, 0x55, 0xef, 0x88, 0xee, 0x10, 0xdd, 0x59, 0x3e, 0xba,
		0xf3, 0xae, 0x46, 0x47, 0xab, 0xe6, 0x01, 0xeb, 0xa2, 0x13, 0x0a, 0x44, 0x57, 0xcc, 0x64, 0x38,
		0xb6, 0x1b, 0x66, 0x52, 0x32, 0x20, 0x9a, 0x8b, 0x05, 0x96, 0xdb, 0xe6, 0x21, 0x93, 0x0f, 0x96,
		0x64, 0x4d, 0xaf, 0x13, 0x07, 0x7e, 0x92, 0x98, 0x46, 0x12, 0xcc, 0x60, 0xe7, 0xf2, 0x7f, 0x42,
		0x66, 0x35, 0x9b, 0xdc, 0x97, 0xd6, 0xbd, 0xc3, 0x59, 0xcb, 0x0b, 0x6e, 0x5d, 0x2b, 0x19, 0x17,
		0xd1, 0x00, 0x9b, 0xb7, 0xb9, 0xcb, 0xe3, 0xd4, 0x20, 0xe9, 0xb1, 0x7b, 0x2e, 0xdc, 0x36, 0xb3,
		0x58, 0x28, 0xdc, 0xb6, 0xc3, 0xa5, 0xfa, 0xa9, 0x6e, 0x3a, 0xae, 0x45, 0xa4, 0xa0, 0x28, 0x52,
		0x00, 0x3e, 0xae, 0x85, 0xe2, 0xe2, 0x3a, 0x39, 0x79, 0x59, 0xdc, 0x5c, 0x13, 0xea, 0xd0, 0x26,
		0x5d, 0x81, 0x6a, 0xab, 0x5d, 0x7d, 0xf5, 0xa9, 0x31, 0x12, 0xd8, 0xe7, 0xbe, 0xc1, 0x06, 0xe6,
		0xfe, 0x3a, 0x7c, 0x00, 0x5d, 0xbe, 0x00, 0xde, 0x27, 0xd0, 0xea, 0x1b, 0x68, 0x26, 0xb2, 0xba,
		0x7d, 0x85, 0x22, 0x78, 0xad, 0x06, 0xdf, 0x41, 0xab, 0x0f, 0x51, 0xf4, 0x23, 0x78, 0x57, 0x5b,
		0xe0, 0x67, 0x30, 0xa7, 0x14, 0xb0, 0xc6, 0x02, 0x67, 0x1c, 0x45, 0x0e, 0x00, 0x64, 0x1b, 0x75,
		0xa2, 0x57, 0x02, 0xdb, 0x1b, 0x9a, 0x44, 0x66, 0xce, 0xed, 0x7e, 0x01, 0xa7, 0x78, 0xe2, 0xd8,
		0xd5, 0x20, 0x02, 0x43, 0x04, 0x86, 0x08, 0x4c, 0x5e, 0x49, 0x79, 0xb2, 0xdc, 0xb6, 0x21, 0x6c,
		0xee, 0x4a, 0xd1, 0x12, 0x3c, 0x20, 0x26, 0x43, 0x4c, 0x66, 0xa5, 0x99, 0xcc, 0xae, 0xe6, 0x47,
		0x40, 0x44, 0x66, 0x9c, 0xc8, 0xe0, 0x32, 0x05, 0x51, 0x7b, 0xc6, 0xfd, 0x89, 0xb4, 0xef, 0x1d,
		0xf7, 0x67, 0xd6, 0xbe, 0x87, 0xbc, 0x34, 0x04, 0x30, 0xa6, 0x57, 0x46, 0x2b, 0xf0, 0x3a, 0x9a,
		0x88, 0x60, 0x66, 0x42, 0x3d, 0x84, 0xf0, 0x31, 0xd2, 0xca, 0x5e, 0xc4, 0x5a, 0xc3, 0xf4, 0xc4,
		0x09, 0x89, 0x13, 0xae, 0x1f, 0x27, 0xec, 0x0a, 0x57, 0x1e, 0xec, 0x69, 0xa0, 0x82, 0x18, 0x26,
		0xa8, 0xe7, 0x1c, 0xe7, 0x9a, 0x10, 0xc1, 0x1a, 0x11, 0xc1, 0xb9, 0x73, 0xf1, 0xc2, 0xce, 0x5f,
		0x52, 0x90, 0xab, 0x74, 0x8e, 0x23, 0x3d, 0xad, 0x0c, 0x47, 0x7a, 0x05, 0xf2, 0x1b, 0xf8, 0xe4,
		0xc4, 0x6e, 0x88, 0xdd, 0x10, 0xbb, 0x21, 0x76, 0x43, 0xec, 0x86, 0xd8, 0x0d, 0xb1, 0x9b, 0x65,
		0x62, 0x37, 0x85, 0x26, 0x3f, 0xfd, 0x83, 0x3f, 0xc1, 0xb7, 0xea, 0xe2, 0x9c, 0xc1, 0x63, 0x29,
		0x81, 0xf9, 0x53, 0x97, 0xc2, 0x3d, 0x73, 0x78, 0x84, 0x4f, 0x21, 0x4c, 0x8a, 0x23, 0x6d, 0xca,
		0xcc, 0xa0, 0x47, 0x6e, 0x2b, 0x9f, 0x03, 0x9b, 0x07, 0xdc, 0xfe, 0x10, 0x2d, 0x8c, 0xdb, 0x75,
		0x9c, 0x75, 0x38, 0x40, 0x0c, 0x49, 0x20, 0x65, 0xba, 0xce, 0x0f, 0x9f, 0xc7, 0x17, 0x5f, 0x84,
		0x2c, 0x5c, 0xdf, 0xb0, 0xbd, 0x8e, 0x25, 0x10, 0x9d, 0x8b, 0x06, 0x53, 0x60, 0xb3, 0x71, 0x93,
		0x9a, 0x1a, 0xfd, 0xf9, 0x58, 0x98, 0x76, 0x3a, 0x48, 0x92, 0x72, 0x6d, 0x2e, 0x79, 0xd0, 0x11,
		0x2e, 0x67, 0xf2, 0x81, 0x33, 0xdf, 0xf3, 0x9c, 0xc8, 0x53, 0x38, 0xbf, 0x62, 0x96, 0x6d, 0x07,
		0x3c, 0x0c, 0x79, 0xb8, 0x75, 0xeb, 0x5a, 0x21, 0xfb, 0xc9, 0x1d, 0x87, 0x59, 0x61, 0xfc, 0xa9,
		0x74, 0xa2, 0x80, 0x87, 0x9e, 0xf3, 0xc8, 0x83, 0xcc, 0x8c, 0x71, 0x6a, 0x20, 0x1d, 0xd4, 0x29,
		0xca, 0x63, 0xa0, 0x9c, 0xdc, 0xf2, 0x0f, 0xea, 0xc0, 0xab, 0x61, 0x60, 0xaa, 0x60, 0x8c, 0x54,
		0xbf, 0xe8, 0x6b, 0x6f, 0xf4, 0x4a, 0xb5, 0xe6, 0xc5, 0xcb, 0x9c, 0x5a, 0xbe, 0xa5, 0x94, 0x40,
		0xa5, 0x18, 0x02, 0x8c, 0x08, 0xc0, 0x09, 0x80, 0x56, 0xe0, 0x87, 0x01, 0x7e, 0xde, 0xd5, 0x04,
		0x02, 0xbc, 0x26, 0x60, 0x57, 0xe9, 0x95, 0xa8, 0x01, 0xca, 0x2b, 0x65, 0xf6, 0xd8, 0x84, 0x64,
		0xdf, 0x63, 0xb2, 0xed, 0x8b, 0xca, 0xae, 0xa7, 0x0e, 0xd2, 0xd4, 0x6f, 0x13, 0x0e, 0x7c, 0xf0,
		0xec, 0x74, 0x6a, 0x1e, 0x3d, 0x3b, 0x12, 0x42, 0xcd, 0xa3, 0x55, 0x97, 0x0c, 0x9a, 0xed, 0x4d,
		0xad, 0xa3, 0x53, 0x1f, 0xb4, 0x13, 0x0a, 0xc3, 0xe6, 0x2d, 0xe1, 0x0a, 0x25, 0xd2, 0x30, 0xbc,
		0x15, 0x95, 0x99, 0x00, 0x06, 0x6e, 0x4d, 0xcf, 0x95, 0x96, 0x70, 0x79, 0x10, 0x57, 0xb3, 0x1a,
		0xcc, 0x69, 0xa9, 0xcc, 0x49, 0x8d, 0xa4, 0x09, 0xd8, 0xfa, 0xf2, 0xa5, 0xda, 0x48, 0x7a, 0x40,
		0x6b, 0xe1, 0xd1, 0x98, 0xcc, 0x1c, 0xb8, 0x70, 0xcc, 0x60, 0x22, 0x23, 0xf4, 0x79, 0x53, 0xb4,
		0x44, 0x93, 0x81, 0x13, 0xa9, 0x29, 0x72, 0x42, 0x91, 0x93, 0xc2, 0x22, 0x27, 0x88, 0x9a, 0xa4,
		0x1a, 0xa2, 0x2e, 0x40, 0x29, 0x49, 0x15, 0x02, 0x12, 0x70, 0xc1, 0x6d, 0xae, 0xae, 0x58, 0x65,
		0x94, 0x1a, 0x55, 0x46, 0x29, 0x6a, 0x69, 0x0f, 0x0f, 0x0f, 0xa9, 0x34, 0x8a, 0xb6, 0x80, 0xa5,
		0x02, 0xf3, 0x6a, 0x79, 0x41, 0xc7, 0x92, 0x70, 0x0e, 0x90, 0x8e, 0x47, 0x56, 0x75, 0xbd, 0xbc,
		0x3e, 0x67, 0xc9, 0x4c, 0x2c, 0x25, 0x00, 0x3c, 0xd8, 0x62, 0x49, 0xbf, 0xfd, 0x7b, 0x1e, 0xb2,
		0x07, 0xef, 0x27, 0x6b, 0x09, 0xee, 0xd8, 0x21, 0xb3, 0x02, 0xce, 0x7c, 0xab, 0xf9, 0x83, 0xdb,
		0x4c, 0xb8, 0xd2, 0x63, 0x96, 0xcb, 0xa2, 0xe1, 0x26, 0xbb, 0xec, 0x86, 0x92, 0xdd, 0x73, 0xc6,
		0x7f, 0x59, 0x4d, 0xe9, 0x3c, 0xb1, 0xfa, 0x3e, 0x6b, 0x3e, 0x58, 0x91, 0x54, 0xf0, 0x20, 0x64,
		0x8e, 0xe7, 0xb6, 0x4d, 0xf6, 0xd1, 0x0b, 0xa2, 0xdf, 0x77, 0x7c, 0x87, 0x6f, 0xb1, 0x93, 0x93,
		0x93, 0x4f, 0x9f, 0x3e, 0x9d, 0x9d, 0x9d, 0x5d, 0xc7, 0x7f, 0xa8, 0x84, 0x2c, 0xf1, 0x0c, 0xe2,
		0x19, 0x54, 0x86, 0x6d, 0x41, 0x10, 0x11, 0x9b, 0x14, 0x44, 0x6c, 0x63, 0x49, 0xd6, 0x76, 0x8d,
		0xc8, 0x46, 0xa7, 0xd9, 0x84, 0x33, 0x8d, 0x68, 0x30, 0x8e, 0x66, 0x74, 0xbc, 0x7b, 0xe1, 0x70,
		0xd6, 0xf4, 0xba, 0xae, 0x0c, 0x9e, 0x58, 0xd3, 0xb3, 0x29, 0x2b, 0x83, 0x30, 0x9f, 0x30, 0x1f,
		0xa8, 0x5e, 0x68, 0xc0, 0xc7, 0x57, 0xb5, 0xae, 0x19, 0x87, 0x8d, 0xdf, 0xbb, 0x2f, 0xcb, 0x59,
		0x6c, 0xba, 0xe3, 0x62, 0xac, 0xa1, 0xab, 0xc9, 0x1a, 0xba, 0x5c, 0xfe, 0xf4, 0x82, 0x1f, 0x64,
		0x0d, 0xc9, 0x1a, 0x92, 0x35, 0x44, 0xa8, 0xd7, 0xa2, 0x58, 0xc3, 0x9d, 0xad, 0x85, 0xb2, 0x87,
		0x4b, 0x9e, 0xed, 0x05, 0xdb, 0xee, 0x65, 0x98, 0x84, 0xaf, 0xf3, 0x4e, 0x28, 0x4e, 0x07, 0x57,
		0x2c, 0x73, 0x73, 0x5c, 0x39, 0x41, 0x1b, 0x9c, 0x98, 0x3d, 0xb5, 0x3c, 0xb2, 0x9f, 0xe6, 0x51,
		0x87, 0xb4, 0x0b, 0x5e, 0x1a, 0xb6, 0xac, 0xef, 0x2e, 0xb8, 0x65, 0x77, 0x84, 0x6b, 0x84, 0xd2,
		0x92, 0x5d, 0x44, 0x7d, 0xf0, 0xa1, 0x59, 0x70, 0xa4, 0x2c, 0x9e, 0x4a, 0x84, 0x32, 0xb0, 0xa4,
		0x78, 0xe4, 0x0c, 0x36, 0x27, 0xd1, 0x32, 0xa2, 0x65, 0x45, 0xd1, 0x32, 0x3c, 0xb5, 0x42, 0x68,
		0x0b, 0x9a, 0x63, 0x9d, 0xf2, 0x96, 0xd5, 0x75, 0xe2, 0xb5, 0x3d, 0xfb, 0x74, 0xfc, 0xe1, 0xe2,
		0xac, 0x42, 0x71, 0x6a, 0x64, 0x2c, 0x95, 0x36, 0xc5, 0x0b, 0x5b, 0xda, 0xfa, 0x01, 0x75, 0x47,
		0x2b, 0xc5, 0x73, 0x4a, 0x6c, 0xc1, 0xf3, 0xe5, 0xf1, 0xf9, 0xa7, 0xaf, 0x67, 0x9f, 0x8e, 0x3f,
		0x9d, 0x9c, 0x3d, 0x9f, 0x9e, 0x5f, 0xc7, 0xf6, 0x61, 0x39, 0xdb, 0x98, 0x0d, 0x91, 0x0a, 0x68,
		0x17, 0xb3, 0xcc, 0x24, 0xc8, 0x26, 0x66, 0x83, 0x7f, 0x0e, 0x8a, 0x0c, 0xf7, 0x88, 0x3e, 0x91,
		0x1b, 0x22, 0x37, 0xab, 0x43, 0x6e, 0xe0, 0x4a, 0xc3, 0x68, 0xfb, 0x9c, 0xba, 0x98, 0x2d, 0x07,
		0x2d, 0xa9, 0xed, 0xec, 0xd1, 0xfe, 0xf9, 0x5c, 0x70, 0x9d, 0xda, 0x93, 0x12, 0xba, 0x13, 0xba,
		0xcf, 0x0d, 0xdd, 0x29, 0x2f, 0x8e, 0x80, 0x7d, 0x85, 0x81, 0x9d, 0xda, 0x93, 0xce, 0x09, 0xd6,
		0x5d, 0x8c, 0x9b, 0xee, 0x62, 0xdd, 0xf3, 0xd3, 0x4f, 0x9f, 0xb6, 0x8f, 0xaf, 0x3e, 0x11, 0x54,
		0x13, 0x54, 0x2f, 0x0a, 0x54, 0xcf, 0x37, 0xf9, 0x43, 0x5d, 0xa5, 0x08, 0xe3, 0x09, 0xe3, 0x97,
		0x03, 0xe3, 0x77, 0x77, 0x08, 0xe3, 0xe7, 0x83, 0xf1, 0xa1, 0xe1, 0x07, 0xa2, 0x63, 0xc5, 0x36,
		0x0d, 0x8c, 0xf5, 0x83, 0x49, 0x70, 0x98, 0x9f, 0xce, 0xc2, 0x6c, 0x37, 0x64, 0x21, 0x0f, 0x1e,
		0x79, 0xc0, 0x20, 0xe1, 0x00, 0xe2, 0x00, 0xc4, 0x01, 0x16, 0xd7, 0x5d, 0x17, 0xbe, 0x91, 0xd6,
		0xeb, 0xc4, 0xc0, 0x39, 0xe0, 0x60, 0x72, 0xef, 0xbb, 0x97, 0x0e, 0xe6, 0x83, 0x3b, 0x7f, 0xdc,
		0x43, 0xdc, 0xbb, 0x0e, 0x4a, 0x33, 0xd0, 0x59, 0x5d, 0x7d, 0xc8, 0x36, 0x36, 0xe2, 0x0c, 0xd7,
		0xe7, 0x9b, 0xba, 0x71, 0xd8, 0x48, 0x5e, 0xd6, 0xe3, 0xbf, 0x92, 0xd7, 0x3b, 0x37, 0x35, 0x63,
		0xaf, 0xf7, 0x7a, 0xff, 0xa6, 0x66, 0xec, 0x37, 0xaa, 0xb7, 0xb7, 0x66, 0xf5, 0xf7, 0xee, 0x8b,
		0xfa, 0xc0, 0x8d, 0x3f, 0x6e, 0x6e, 0x6f, 0xfd, 0xdf, 0x9f, 0x5e, 0xa2, 0x9f, 0x17, 0x2f, 0x8d,
		0x3f, 0xab, 0xef, 0x4b, 0xef, 0x46, 0xb6, 0x35, 0x47, 0xe9, 0x39, 0x58, 0x41, 0xe9, 0x39, 0x7a,
		0x8e, 0x9e, 0xb1, 0x65, 0xb4, 0x8e, 0x8d, 0x8f, 0x8d, 0xdf, 0xb5, 0xad, 0xbd, 0x97, 0xea, 0x51,
		0x75, 0x63, 0xf4, 0xbd, 0xa3, 0xea, 0xef, 0xda, 0xd6, 0xfe, 0xcb, 0xc6, 0xc6, 0x84, 0xdf, 0xbc,
		0x9f, 0x34, 0x47, 0xf5, 0x79, 0x63, 0x63, 0x23, 0x95, 0x9b, 0x21, 0x59, 0xba, 0xa9, 0xd5, 0x1b,
		0xef, 0xe3, 0x97, 0xc9, 0xcf, 0xbe, 0x34, 0xe6, 0xfa, 0x70, 0x75, 0xa2, 0x0c, 0x6e, 0xa1, 0x55,
		0xe8, 0xfb, 0x51, 0xe3, 0xcf, 0xa3, 0xea, 0xef, 0x83, 0x97, 0xde, 0xeb, 0xf8, 0x67, 0xf5, 0x79,
		0xc3, 0xdc, 0xbc, 0xbd, 0x35, 0xcd, 0xcd, 0x6a, 0x72, 0x43, 0xe9, 0xe7, 0x36, 0x93, 0xdf, 0xbe,
		0x3f, 0x3a, 0x1a, 0x7b, 0xab, 0xba, 0xf1, 0x87, 0x39, 0x0f, 0xb5, 0x58, 0x5a, 0xfa, 0x17, 0xf2,
		0xa6, 0xe7, 0xda, 0x68, 0x02, 0x38, 0x98, 0x06, 0x47, 0x01, 0xfb, 0xf3, 0x10, 0x09, 0x24, 0x12,
		0x48, 0x24, 0x90, 0x48, 0x20, 0x91, 0x40, 0x22, 0x81, 0x44, 0x02, 0x89, 0x04, 0x12, 0x09, 0x2c,
		0xae, 0x01, 0x8a, 0xb0, 0x51, 0xcd, 0x4f, 0xd4, 0x7b, 0x08, 0x8d, 0x56, 0xda, 0x3a, 0x8d, 0x2b,
		0xce, 0x0e, 0xa7, 0xe0, 0x52, 0xe5, 0x2b, 0x62, 0x7c, 0xab, 0xc5, 0xf8, 0x12, 0xb9, 0x56, 0x57,
		0x17, 0x46, 0xfb, 0x78, 0xb4, 0x8f, 0x37, 0xbe, 0xb4, 0xb4, 0x8f, 0xa7, 0x19, 0x8d, 0xd9, 0xf2,
		0x9c, 0x0d, 0xba, 0xb1, 0x8c, 0xbf, 0x8f, 0x8d, 0xff, 0xde, 0x35, 0xd2, 0x17, 0x35, 0xe3, 0xf0,
		0xf6, 0xd6, 0xb8, 0x33, 0x1b, 0x9b, 0x50, 0x4b, 0x6e, 0x3e, 0x9b, 0xe6, 0xf3, 0xcd, 0xf7, 0x5f,
		0xff, 0x6e, 0x98, 0x9b, 0xcf, 0xe6, 0xcd, 0xf7, 0xce, 0x65, 0xfc, 0xc2, 0xbc, 0xf9, 0xee, 0x5c,
		0x34, 0xcc, 0xcd, 0x25, 0x2d, 0x66, 0x23, 0xbb, 0x88, 0x62, 0x36, 0xb2, 0x8b, 0x2d, 0x66, 0x63,
		0xfd, 0x12, 0x9d, 0x6e, 0x87, 0xc9, 0xc0, 0x72, 0xc3, 0x8e, 0x08, 0x43, 0xe1, 0xb9, 0xac, 0xeb,
		0x0a, 0x49, 0xd4, 0x86, 0xa8, 0xcd, 0xea, 0x50, 0x1b, 0x75, 0x45, 0xc9, 0x0a, 0xf5, 0x01, 0xee,
		0xc4, 0x74, 0x7d, 0xef, 0x70, 0xa7, 0x42, 0x35, 0xc4, 0x71, 0xb8, 0x4d, 0xc7, 0xa5, 0x0b, 0x5b,
		0xda, 0x83, 0xfd, 0xfd, 0x5d, 0x2a, 0xec, 0x39, 0x17, 0xf4, 0x0f, 0xbb, 0xf7, 0x2e, 0x47, 0x54,
		0x11, 0x4f, 0xc7, 0x23, 0x37, 0xb4, 0xe2, 0x49, 0x98, 0xf4, 0x98, 0xe5, 0x38, 0x5e, 0xd3, 0x92,
		0x9c, 0x09, 0x7f, 0xd0, 0xb1, 0x95, 0xb5, 0x02, 0xaf, 0x43, 0x74, 0x80, 0xe8, 0xc0, 0xa2, 0xd0,
		0x81, 0xf9, 0x26, 0x39, 0xc7, 0xbb, 0x43, 0xe0, 0x07, 0x35, 0xdf, 0x4a, 0x77, 0x65, 0x6e, 0x02,
		0x6d, 0xa7, 0x17, 0xab, 0x3e, 0x6f, 0xdc, 0xd4, 0x8d, 0x9d, 0x46, 0xef, 0x1f, 0xbb, 0x37, 0x35,
		0x63, 0xa7, 0x51, 0xad, 0xae, 0x6a, 0xad, 0xbd, 0x5e, 0xeb, 0x7a, 0x9f, 0xfa, 0xd4, 0x6a, 0x58,
		0xcd, 0x39, 0x54, 0x2e, 0x04, 0xb4, 0x4a, 0x87, 0xd7, 0x2c, 0xf4, 0x4f, 0x93, 0x6b, 0x95, 0x58,
		0xad, 0xb0, 0xe3, 0xb9, 0x42, 0x7a, 0xf1, 0x81, 0x4c, 0xe5, 0x72, 0x85, 0x99, 0xb1, 0x3a, 0x1a,
		0xf8, 0xa9, 0x4f, 0x47, 0x55, 0x0b, 0xa9, 0x6a, 0x61, 0x5f, 0xb4, 0x94, 0x7b, 0xf7, 0xd9, 0x6d,
		0x6e, 0x34, 0x9d, 0x6e, 0x28, 0x79, 0x60, 0xf8, 0x81, 0xd7, 0xe1, 0xf2, 0x81, 0x77, 0x43, 0xa3,
		0x1b, 0x38, 0x88, 0x66, 0x7e, 0xaf, 0x4c, 0x8a, 0xe3, 0xe5, 0xdf, 0xbe, 0x5c, 0x30, 0xaf, 0xc5,
		0xa2, 0x0b, 0xb0, 0xf4, 0x02, 0x6c, 0x70, 0x01, 0x62, 0xe4, 0xc4, 0xc8, 0x57, 0x27, 0x40, 0xd7,
		0x0d, 0x04, 0x8a, 0x4d, 0x2f, 0x80, 0x2f, 0x1f, 0x1b, 0x82, 0xa4, 0xcb, 0x3d, 0xd2, 0x9a, 0xa4,
		0x93, 0xe0, 0xac, 0x47, 0xaf, 0x32, 0x70, 0x6c, 0x3e, 0x06, 0x40, 0xcb, 0x92, 0xc9, 0xa1, 0xe6,
		0xa3, 0x4e, 0xe6, 0x83, 0xcc, 0x87, 0x6e, 0xf3, 0xa1, 0x0a, 0xe4, 0xfd, 0x81, 0x98, 0x7a, 0x7d,
		0x63, 0xd2, 0x82, 0x2b, 0x41, 0xc6, 0x72, 0xd6, 0xef, 0x8b, 0x7c, 0x0c, 0xe8, 0xf4, 0xc8, 0x5e,
		0xe8, 0x50, 0x5d, 0xd4, 0xa1, 0x93, 0x9a, 0x74, 0x53, 0x97, 0x8e, 0x6a, 0xd7, 0x55, 0xed, 0x3a,
		0xab, 0x4f, 0x77, 0x91, 0x71, 0x75, 0xa0, 0xac, 0x80, 0x29, 0x41, 0x01, 0x7a, 0xc9, 0x74, 0xe5,
		0xd3, 0x22, 0xb3, 0x94, 0x7a, 0x7f, 0x70, 0x32, 0xcb, 0x74, 0x6d, 0xd1, 0x69, 0xb2, 0x2b, 0x63,
		0xd3, 0x69, 0xca, 0x62, 0xea, 0xcf, 0xa7, 0x71, 0x6f, 0x09, 0x29, 0xd5, 0xa3, 0x41, 0xb4, 0xc5,
		0x7f, 0x04, 0xe8, 0x92, 0x83, 0x85, 0x3e, 0x85, 0x37, 0xf3, 0x19, 0x5d, 0x56, 0xee, 0x34, 0x40,
		0xca, 0x70, 0xa5, 0x0a, 0xc7, 0x6d, 0x27, 0xbc, 0x64, 0xe1, 0x54, 0x52, 0xa3, 0xb9, 0x74, 0x21,
		0xb1, 0x1b, 0x62, 0x37, 0x6b, 0xcc, 0x6e, 0xc0, 0xa5, 0x11, 0x89, 0xd8, 0x10, 0xb1, 0x59, 0x5f,
		0x62, 0xf3, 0xae, 0x46, 0xb4, 0x66, 0x99, 0x68, 0x4d, 0x26, 0xae, 0x09, 0x39, 0xcb, 0x35, 0x0e,
		0xb0, 0xc3, 0xf3, 0xe9, 0xa1, 0x36, 0xe7, 0xf6, 0xf4, 0x80, 0x29, 0xb1, 0x1a, 0x62, 0x35, 0xc4,
		0x6a, 0xf2, 0x4a, 0xca, 0x93, 0xe5, 0xb6, 0x0d, 0x61, 0x73, 0x57, 0x8a, 0x96, 0xe0, 0x01, 0xd1,
		0x1b, 0xa2, 0x37, 0x2b, 0x4d, 0x6f, 0x76, 0x35, 0x3f, 0x02, 0x62, 0x37, 0xe3, 0xec, 0x66, 0x11,
		0xea, 0x20, 0x68, 0x3f, 0xd4, 0xd6, 0x9f, 0x59, 0xfb, 0xe1, 0xb6, 0xd2, 0x59, 0x61, 0xa1, 0x5b,
		0x84, 0x69, 0x56, 0x25, 0x8a, 0xf6, 0xc1, 0xd2, 0x2c, 0xb3, 0xa6, 0x1b, 0x96, 0x6e, 0x99, 0xb5,
		0x3c, 0xda, 0xd2, 0x2e, 0xfb, 0x93, 0x82, 0xd2, 0x2f, 0xa1, 0x8f, 0x01, 0x98, 0x8e, 0xd9, 0x1f,
		0x0f, 0x4f, 0xcb, 0x1c, 0x10, 0xf2, 0x6d, 0x78, 0x8e, 0x04, 0xc3, 0xe4, 0x6a, 0x5e, 0xf6, 0xbf,
		0xc1, 0xdd, 0x99, 0xdd, 0xe6, 0xa7, 0xc9, 0x17, 0x58, 0x94, 0xc4, 0x93, 0xc1, 0xfa, 0xe8, 0xcd,
		0x6c, 0x9b, 0x3e, 0xaf, 0x96, 0xe4, 0xb6, 0x8c, 0x9f, 0x45, 0xa9, 0x6d, 0xc5, 0xfb, 0x50, 0x94,
		0x9b, 0x42, 0xa9, 0x6d, 0x4a, 0x9f, 0x5c, 0xdc, 0x3c, 0x7d, 0xe5, 0xdc, 0x71, 0x4d, 0xc6, 0xbf,
		0xcc, 0x54, 0xfd, 0xe8, 0x46, 0x55, 0xc2, 0x65, 0x83, 0x5d, 0x85, 0x74, 0x20, 0x2c, 0x49, 0x3f,
		0x5b, 0xec, 0x28, 0x9a, 0xc9, 0x54, 0xcc, 0xce, 0xaf, 0x51, 0x76, 0x3e, 0x65, 0xe7, 0x2b, 0x1b,
		0x4e, 0xa0, 0xf0, 0x42, 0x83, 0x44, 0xd0, 0xa0, 0x10, 0xcc, 0x73, 0x40, 0x20, 0x36, 0x2e, 0x80,
		0x8c, 0x0c, 0xea, 0xe8, 0x88, 0x20, 0xbc, 0xc0, 0x5c, 0xa5, 0xb9, 0x2f, 0x19, 0xb4, 0x54, 0x90,
		0x96, 0x35, 0x2b, 0x08, 0xf5, 0x15, 0xa2, 0x28, 0xe0, 0xa8, 0x89, 0xbe, 0x28, 0x89, 0xbe, 0xa8,
		0x48, 0xa3, 0x4c, 0xd4, 0xee, 0x58, 0x8e, 0x63, 0x34, 0xb9, 0xe3, 0x00, 0x80, 0x7b, 0x30, 0x16,
		0x86, 0xdd, 0xbd, 0xb4, 0xff, 0x78, 0x22, 0x16, 0x4d, 0x34, 0x38, 0xc9, 0x4f, 0x87, 0xec, 0x08,
		0xc6, 0x55, 0x61, 0x5c, 0xf9, 0x90, 0x5d, 0xaf, 0xf4, 0x2d, 0x38, 0xec, 0x00, 0xab, 0x9d, 0x3b,
		0xaa, 0x07, 0xc7, 0xc9, 0x2c, 0xc3, 0xaa, 0x40, 0x81, 0x05, 0x0a, 0x2c, 0xac, 0x4e, 0x60, 0xe1,
		0xc1, 0x0b, 0xe5, 0xfa, 0xd5, 0x66, 0xd7, 0x59, 0x5b, 0xfb, 0x10, 0x31, 0x07, 0x6a, 0x25, 0xf0,
		0x2b, 0x32, 0x61, 0x65, 0xb4, 0x54, 0xad, 0xc7, 0xb8, 0x54, 0xda, 0x99, 0xe4, 0xd4, 0x09, 0x97,
		0xb6, 0x9a, 0xbd, 0x1a, 0x1f, 0xd5, 0xe8, 0x51, 0x15, 0x27, 0x75, 0x07, 0x6b, 0x24, 0x75, 0x54,
		0x05, 0x3f, 0xab, 0x82, 0x8b, 0x53, 0x0d, 0x5f, 0x93, 0x5a, 0xad, 0x4d, 0x93, 0x8a, 0xb4, 0xce,
		0x37, 0xe2, 0x58, 0x08, 0xa3, 0xdc, 0xac, 0x02, 0x63, 0x50, 0xba, 0xc3, 0x78, 0x45, 0x84, 0xa8,
		0x34, 0x83, 0x12, 0x5b, 0x96, 0xd4, 0xf3, 0x9d, 0xfd, 0x5d, 0xca, 0xce, 0x42, 0xc4, 0x15, 0x0b,
		0xc3, 0xe9, 0x4a, 0x84, 0x35, 0xfd, 0x88, 0xe3, 0x5d, 0x63, 0x63, 0x38, 0xfc, 0xd8, 0x88, 0x50,
		0xf9, 0xa0, 0xfe, 0x52, 0x7d, 0x3f, 0x78, 0xbf, 0x11, 0xe1, 0xe9, 0x26, 0x64, 0xd4, 0xfb, 0xea,
		0xf3, 0xed, 0xad, 0x49, 0xfd, 0x5b, 0xf2, 0x3c, 0x17, 0xd4, 0x99, 0x46, 0x1d, 0x67, 0x19, 0x8b,
		0x3e, 0xc3, 0x48, 0x81, 0x22, 0x0a, 0x14, 0x2d, 0x70, 0xa0, 0x08, 0x7c, 0xc6, 0x90, 0x5a, 0xba,
		0x50, 0x4b, 0x17, 0xfd, 0x04, 0x4d, 0xf7, 0xd2, 0xbe, 0xab, 0x51, 0xf1, 0xf2, 0x79, 0xc0, 0x3a,
		0x77, 0xad, 0x7b, 0x07, 0x53, 0xeb, 0x2c, 0x19, 0x8f, 0x83, 0xf2, 0xb3, 0x78, 0x92, 0x34, 0x57,
		0x09, 0xbc, 0xd1, 0x93, 0xe9, 0xd6, 0x10, 0x01, 0x09, 0xc1, 0x3f, 0xc1, 0xff, 0xea, 0xc0, 0xff,
		0xbd, 0xe7, 0x39, 0xdc, 0x72, 0x31, 0xf8, 0x5f, 0x5f, 0x84, 0x5e, 0x09, 0xfd, 0xd4, 0x08, 0x54,
		0x37, 0xc8, 0xe1, 0x69, 0x90, 0x5d, 0x21, 0x6d, 0xda, 0x5f, 0x26, 0xbb, 0xb1, 0xaa, 0x76, 0x03,
		0x7f, 0x88, 0x97, 0xfc, 0x07, 0xf2, 0x1f, 0x8a, 0xf3, 0x1f, 0x76, 0x57, 0xb0, 0xb5, 0x14, 0x75,
		0x84, 0x54, 0x99, 0x71, 0x25, 0x3b, 0x42, 0x4a, 0xab, 0x09, 0x67, 0x37, 0xd1, 0x60, 0x1c, 0xa7,
		0x89, 0x70, 0x83, 0x1d, 0x27, 0x8d, 0xa0, 0x84, 0xe7, 0xb2, 0x13, 0xcf, 0x26, 0x7f, 0x88, 0x78,
		0xcd, 0xc2, 0xf0, 0x9a, 0xf9, 0x76, 0x7f, 0x52, 0xd7, 0x2f, 0xe2, 0x41, 0x5a, 0x79, 0xd0, 0x1e,
		0xf1, 0xa0, 0xc2, 0xe2, 0xa8, 0xc4, 0x83, 0xca, 0xe1, 0x41, 0x35, 0xe3, 0xf0, 0xd8, 0xf8, 0x78,
		0x7b, 0x1b, 0x31, 0x9f, 0xd5, 0xee, 0x82, 0x06, 0x09, 0xb6, 0x50, 0x37, 0xb4, 0xe9, 0xd0, 0x5c,
		0xfa, 0x29, 0x6b, 0xe5, 0xf3, 0x48, 0x0c, 0x73, 0xca, 0xfa, 0x3a, 0xba, 0xda, 0x49, 0x74, 0xb1,
		0x12, 0x8f, 0x6b, 0x75, 0xfd, 0x96, 0xfa, 0x39, 0xad, 0x68, 0x10, 0xec, 0x80, 0xd6, 0x31, 0x73,
		0xd2, 0x23, 0x5a, 0xd1, 0xfa, 0xd8, 0xac, 0xeb, 0xb7, 0x42, 0x93, 0x4e, 0x66, 0x95, 0x46, 0x98,
		0xe9, 0x64, 0xd6, 0xe2, 0x9c, 0xcc, 0xfa, 0x76, 0xf5, 0x91, 0x5c, 0x4b, 0x72, 0x2d, 0xc9, 0xb5,
		0xa4, 0xe3, 0x5c, 0x74, 0x9c, 0x6b, 0x74, 0x65, 0xe8, 0x38, 0x17, 0x1d, 0xe7, 0x9a, 0x83, 0xd4,
		0xd1, 0x71, 0x2e, 0x3a, 0xce, 0x45, 0xc7, 0xb9, 0x4a, 0x54, 0x63, 0x3a, 0xce, 0x55, 0x8c, 0x4d,
		0xa3, 0xe3, 0x5c, 0x6c, 0x8e, 0xa0, 0xc4, 0xe8, 0x38, 0x17, 0x1d, 0xe7, 0xa2, 0xe3, 0x5c, 0xba,
		0x1f, 0xd0, 0x22, 0x24, 0x28, 0x34, 0xe3, 0x58, 0x8a, 0xc1, 0x5d, 0xdb, 0xf7, 0x44, 0xec, 0xcc,
		0x03, 0xe3, 0x49, 0xa3, 0x13, 0xe1, 0xe2, 0x4a, 0xdd, 0xc0, 0x89, 0xcb, 0x56, 0x26, 0xb3, 0x76,
		0xe3, 0x9a, 0xc2, 0xf2, 0x81, 0x53, 0x90, 0x89, 0x82, 0x4c, 0x8b, 0x14, 0x64, 0xa2, 0x5e, 0xf9,
		0xc8, 0xc6, 0xdd, 0x1a, 0x1a, 0x03, 0xe7, 0x69, 0xd4, 0x4d, 0x66, 0x83, 0xcc, 0xc6, 0x4a, 0x99,
		0x0d, 0x5c, 0x1f, 0x6d, 0x4a, 0x61, 0xa2, 0x54, 0x6e, 0xfd, 0xce, 0x9d, 0xf6, 0xa5, 0x45, 0xf7,
		0xbb, 0xa6, 0xc3, 0xa0, 0x40, 0x44, 0xa7, 0x1a, 0x0f, 0x84, 0xee, 0x84, 0xee, 0x73, 0x43, 0x77,
		0xaa, 0xf1, 0x40, 0xc0, 0xbe, 0xc2, 0xc0, 0x4e, 0x35, 0x1e, 0xe6, 0x03, 0xeb, 0xbe, 0x17, 0x20,
		0x02, 0x7c, 0xf1, 0x68, 0x1c, 0x8c, 0x5f, 0x79, 0x81, 0x8c, 0xc3, 0x7a, 0xe4, 0x8f, 0x13, 0x62,
		0x2f, 0x10, 0x62, 0xcf, 0x37, 0x57, 0x2c, 0x52, 0x2c, 0xc3, 0xed, 0x76, 0xee, 0x51, 0xc7, 0xb2,
		0x0f, 0x00, 0x43, 0xbf, 0x58, 0x6e, 0x9b, 0x13, 0xe0, 0x2f, 0xde, 0xc9, 0xe1, 0x15, 0x03, 0xfc,
		0x83, 0xfd, 0xfd, 0xdd, 0x7d, 0xc2, 0xfc, 0x79, 0x60, 0x7e, 0xd7, 0x6f, 0xa1, 0x2a, 0xac, 0xa4,
		0xe3, 0x91, 0xa5, 0x55, 0x32, 0x3d, 0xe8, 0xba, 0x7e, 0xcb, 0x24, 0xec, 0x27, 0xec, 0x5f, 0x1d,
		0x6f, 0x1d, 0xa4, 0x22, 0xe4, 0xad, 0x93, 0xb7, 0xbe, 0x1c, 0xe0, 0x0d, 0xed, 0x9c, 0xb7, 0xd4,
		0xc8, 0x4d, 0x25, 0x55, 0xca, 0x65, 0x34, 0x45, 0x9c, 0x57, 0x56, 0xb2, 0xcb, 0x74, 0x50, 0x79,
		0x3a, 0x80, 0x97, 0x7e, 0x50, 0x39, 0xff, 0x81, 0x5c, 0x86, 0x39, 0xa1, 0xfc, 0xcd, 0x6f, 0x95,
		0x79, 0x36, 0xf9, 0xb1, 0x19, 0xaa, 0x9f, 0x4d, 0x8e, 0x06, 0xe1, 0x9a, 0x47, 0x3e, 0x8a, 0x40,
		0x76, 0xad, 0xa4, 0xa6, 0x61, 0xd7, 0xb1, 0x02, 0x16, 0xf2, 0xe0, 0x51, 0x34, 0xa9, 0x83, 0x64,
		0x89, 0xac, 0x7a, 0x7d, 0xcf, 0x29, 0xdb, 0x49, 0x31, 0x5e, 0xe3, 0x9e, 0x3f, 0x58, 0x8f, 0xc2,
		0x0b, 0x30, 0x19, 0x62, 0x23, 0x33, 0xe1, 0x7c, 0xd2, 0xb4, 0x4a, 0x30, 0xeb, 0x4d, 0xc7, 0x44,
		0x8b, 0xb9, 0x1e, 0x6b, 0x09, 0x47, 0xf2, 0x80, 0x05, 0x5d, 0x87, 0x87, 0xac, 0x63, 0xc9, 0xe6,
		0x03, 0x39, 0xab, 0xe4, 0xac, 0x2e, 0x8a, 0xb3, 0x3a, 0xdf, 0x40, 0x35, 0x50, 0xf3, 0xc8, 0xd5,
		0xa5, 0x38, 0xf5, 0x72, 0xb8, 0xba, 0x3b, 0x54, 0x3d, 0xb4, 0x1c, 0x57, 0xf7, 0xf4, 0xec, 0xd3,
		0x7f, 0x8c, 0xe3, 0x8b, 0x8b, 0xe7, 0xe3, 0x8b, 0x8b, 0xcf, 0xff, 0x9b, 0x79, 0x75, 0xf5, 0xed,
		0xc3, 0xc5, 0xf9, 0xc9, 0x72, 0xd6, 0xfa, 0x5c, 0x82, 0x3c, 0xf8, 0xfc, 0xde, 0x04, 0xd1, 0x19,
		0xa2, 0x33, 0x94, 0x07, 0x4f, 0xac, 0x24, 0x2f, 0x74, 0x52, 0x00, 0xbe, 0xb8, 0xa5, 0xa5, 0x3c,
		0xf8, 0xb9, 0x21, 0xfa, 0xa3, 0x68, 0x72, 0xa3, 0x1d, 0x78, 0x5d, 0x1f, 0x03, 0xe9, 0x99, 0x59,
		0x90, 0xe5, 0xd6, 0xfa, 0xf5, 0x06, 0x93, 0x49, 0x59, 0x3c, 0x69, 0x68, 0xb2, 0xbf, 0xe2, 0xbf,
		0xd9, 0x4f, 0xe1, 0x38, 0xcc, 0x73, 0x9d, 0x27, 0xe6, 0x5b, 0x81, 0x14, 0x4d, 0xe1, 0x5b, 0x92,
		0x33, 0xe1, 0xde, 0xba, 0xf2, 0x81, 0xb3, 0x7f, 0x9d, 0x5c, 0x33, 0xd1, 0x8a, 0xcf, 0xd1, 0x26,
		0xed, 0x9a, 0x58, 0x4b, 0x70, 0xc7, 0x66, 0x22, 0x64, 0x21, 0x97, 0x4c, 0x7a, 0xec, 0x2b, 0xbc,
		0x5f, 0x52, 0x9d, 0x08, 0x02, 0x11, 0x04, 0xdd, 0x04, 0x41, 0x35, 0xdc, 0xa8, 0x47, 0x73, 0x75,
		0x6a, 0xf0, 0x34, 0x4d, 0xbe, 0x10, 0xee, 0x8f, 0x48, 0xe3, 0xb2, 0x7a, 0x0c, 0x9d, 0x1a, 0x87,
		0x37, 0x60, 0x4d, 0xd4, 0xa1, 0x91, 0x9a, 0x34, 0x53, 0x97, 0x86, 0x6a, 0xd7, 0x54, 0xed, 0x1a,
		0xab, 0x4f, 0x73, 0x91, 0x80, 0x0e, 0x94, 0x15, 0x30, 0xe5, 0x1f, 0x93, 0x14, 0x87, 0x5b, 0xad,
		0x80, 0xb7, 0x74, 0xd4, 0x48, 0x7a, 0x8b, 0xab, 0x90, 0x12, 0xef, 0x6f, 0x9a, 0xe6, 0x76, 0xf2,
		0x5f, 0xd6, 0x58, 0x6c, 0xdb, 0x6d, 0x43, 0xd8, 0x95, 0x92, 0x28, 0x13, 0xe0, 0x99, 0x40, 0xfb,
		0x3e, 0x4e, 0xd0, 0x5b, 0x40, 0xff, 0xc7, 0x69, 0xc6, 0x31, 0xdb, 0x07, 0x52, 0x87, 0x81, 0xc4,
		0x75, 0x84, 0x24, 0x3b, 0x4b, 0x76, 0x76, 0x8d, 0xed, 0x2c, 0xbc, 0xe3, 0xe4, 0x98, 0x9d, 0xad,
		0x97, 0x65, 0x08, 0x0b, 0x25, 0xa5, 0x69, 0x7a, 0x11, 0xc6, 0xad, 0x03, 0x25, 0x1b, 0x65, 0xe3,
		0x3f, 0xb0, 0xa4, 0xa3, 0x6c, 0x98, 0x43, 0x5b, 0xf2, 0x51, 0x7f, 0x52, 0x50, 0x12, 0x12, 0xf4,
		0x21, 0x00, 0x93, 0x92, 0xfa, 0xe3, 0xe1, 0xc9, 0x49, 0x8f, 0xcd, 0x70, 0x1b, 0xe9, 0x10, 0x80,
		0x33, 0x96, 0xfe, 0xd5, 0x0c, 0xef, 0x4e, 0xe3, 0x6b, 0xc7, 0x0e, 0x7f, 0x85, 0x6a, 0x05, 0x50,
		0xad, 0x00, 0x0a, 0x70, 0x2c, 0x71, 0x80, 0x83, 0x6a, 0x05, 0x00, 0xc0, 0x8f, 0x36, 0x3f, 0xb4,
		0xf3, 0x45, 0x46, 0xb5, 0x02, 0x0a, 0x63, 0xf0, 0x4b, 0xb9, 0xf5, 0x91, 0xe4, 0x41, 0xc2, 0x01,
		0x3d, 0x1d, 0xaf, 0x6b, 0xbb, 0xc3, 0xf2, 0x7d, 0x47, 0x24, 0x4d, 0x4c, 0xc3, 0x08, 0xd4, 0x2d,
		0xc7, 0xf1, 0x7e, 0x32, 0xcb, 0xb5, 0xb7, 0xbd, 0x80, 0xd9, 0xdc, 0x7d, 0x32, 0xd9, 0x97, 0x38,
		0x65, 0xd3, 0x0a, 0x38, 0xe3, 0xbf, 0x78, 0xb3, 0x2b, 0xb9, 0x1d, 0x6f, 0x7c, 0xf8, 0x81, 0xf0,
		0x02, 0x21, 0x9f, 0x98, 0x17, 0xd1, 0x53, 0x93, 0x7d, 0x7d, 0xe0, 0xac, 0x25, 0x82, 0x50, 0xc6,
		0x39, 0x9e, 0xd1, 0x5c, 0x71, 0x96, 0x67, 0xb2, 0x75, 0x62, 0x73, 0xc9, 0x83, 0x8e, 0x70, 0x79,
		0xbc, 0x49, 0xd2, 0xb2, 0x24, 0xbf, 0x75, 0xbd, 0x64, 0xc7, 0xc4, 0xb7, 0x9a, 0x3f, 0xb8, 0x34,
		0x69, 0x77, 0x84, 0xc8, 0xc3, 0xa2, 0x90, 0x07, 0xf0, 0xee, 0x48, 0xac, 0x3d, 0xf8, 0x98, 0x5f,
		0x32, 0x8d, 0x9e, 0x90, 0xdf, 0x71, 0xac, 0xd0, 0xa9, 0x32, 0x27, 0x91, 0xbf, 0x8c, 0xce, 0x53,
		0xe0, 0x8f, 0x02, 0x7f, 0x14, 0xf8, 0xa3, 0xc0, 0x5f, 0x01, 0x8b, 0x56, 0xc9, 0x9a, 0x19, 0xbc,
		0x49, 0xd4, 0x61, 0xb3, 0x26, 0x6e, 0x14, 0x6b, 0x98, 0x99, 0xcc, 0x18, 0x99, 0xb1, 0x65, 0x31,
		0x63, 0x88, 0x93, 0x2e, 0x05, 0x98, 0xc2, 0x45, 0xdd, 0x6b, 0x36, 0xcd, 0xed, 0x8c, 0x5d, 0x88,
		0x5e, 0x2f, 0xf8, 0x76, 0x73, 0xcf, 0x1b, 0xc3, 0x5b, 0xda, 0xfe, 0x4c, 0x7a, 0xcc, 0xec, 0x55,
		0xdf, 0x4d, 0x6c, 0x15, 0xc1, 0x3e, 0x6b, 0x64, 0xb3, 0xc9, 0x66, 0x13, 0xf5, 0x2c, 0x49, 0xb9,
		0xb3, 0x9a, 0x83, 0xa8, 0x3b, 0x86, 0xac, 0x8f, 0xd7, 0xfb, 0xb3, 0x26, 0xed, 0xcf, 0x6a, 0xd4,
		0xfe, 0x6c, 0xde, 0x8f, 0x60, 0xa7, 0x56, 0xa3, 0xf6, 0x67, 0xa3, 0x7f, 0x1a, 0xab, 0x94, 0x74,
		0x02, 0x67, 0x25, 0x94, 0x73, 0x82, 0x7e, 0x06, 0xf3, 0xcd, 0x39, 0x01, 0xed, 0xa8, 0x30, 0x6c,
		0xb6, 0xc9, 0xc7, 0xe4, 0xaa, 0x0b, 0xb0, 0x23, 0x15, 0x22, 0xaa, 0x58, 0x86, 0xd8, 0x0a, 0x96,
		0xd7, 0x8e, 0x68, 0x72, 0x66, 0x8b, 0x56, 0x8b, 0x07, 0xdc, 0x95, 0x22, 0x72, 0x4d, 0x4d, 0x76,
		0xde, 0xe9, 0x74, 0xa5, 0x75, 0xef, 0x70, 0xaa, 0x68, 0x59, 0x18, 0x6d, 0xa7, 0x6d, 0xa1, 0xe5,
		0x2a, 0x12, 0x12, 0x62, 0x2a, 0x61, 0xbe, 0xa5, 0x22, 0xd6, 0x73, 0x25, 0xe1, 0x94, 0x89, 0x32,
		0x7d, 0x69, 0xeb, 0x07, 0x6f, 0xdf, 0xbe, 0xdd, 0xa9, 0x53, 0x1d, 0xeb, 0xf9, 0xa0, 0x7f, 0x04,
		0xc0, 0x08, 0x02, 0x10, 0x0f, 0x47, 0x76, 0xaf, 0xe0, 0x81, 0x91, 0xf0, 0x80, 0x7f, 0x7e, 0xbe,
		0x66, 0xd7, 0x5c, 0x4a, 0xe1, 0xb6, 0x43, 0x4a, 0x08, 0x21, 0xe4, 0x5f, 0x14, 0xe4, 0x07, 0x27,
		0x84, 0x74, 0xee, 0x03, 0x7c, 0x44, 0x3e, 0x9a, 0x44, 0x4f, 0x30, 0xfe, 0xd2, 0xfa, 0x25, 0x3a,
		0xdd, 0x0e, 0xbb, 0x17, 0x32, 0xb0, 0x24, 0x36, 0x6d, 0xa3, 0x4e, 0xb1, 0x73, 0x8a, 0x9d, 0x97,
		0x86, 0xae, 0x50, 0x0d, 0x10, 0x01, 0x4e, 0x50, 0x6c, 0xef, 0xa7, 0xeb, 0x08, 0xf7, 0x07, 0xfe,
		0x19, 0xf7, 0xcf, 0x64, 0xf4, 0x66, 0x44, 0x3e, 0x91, 0xa9, 0x30, 0x7a, 0xf9, 0xe1, 0x0b, 0xeb,
		0x5d, 0x84, 0xd9, 0x96, 0xb4, 0x58, 0x90, 0x94, 0xab, 0x60, 0xf7, 0x7e, 0x88, 0xbd, 0xaa, 0x26,
		0xf6, 0x87, 0x35, 0x02, 0x3a, 0x8d, 0x81, 0x66, 0xa3, 0xa0, 0xdb, 0x38, 0x14, 0x66, 0x24, 0x0a,
		0x33, 0x16, 0xfa, 0x8d, 0x06, 0xce, 0x78, 0x68, 0x70, 0x9d, 0x98, 0x96, 0x8d, 0xb8, 0x31, 0x49,
		0xc3, 0x21, 0xf1, 0x24, 0xc5, 0x7c, 0xa7, 0x61, 0x2a, 0x3d, 0xfb, 0x73, 0xf8, 0x50, 0x40, 0x21,
		0xa1, 0x81, 0x82, 0x2c, 0x5a, 0x51, 0xa1, 0x83, 0x22, 0x1d, 0x5d, 0xcd, 0xfa, 0xa1, 0x3d, 0xd4,
		0x50, 0xf6, 0xa3, 0xd2, 0xb3, 0x79, 0x32, 0xb7, 0xa7, 0xf7, 0x66, 0x31, 0x66, 0x69, 0xcc, 0x69,
		0x43, 0x12, 0x13, 0x18, 0xeb, 0xd1, 0x25, 0xe3, 0xbe, 0x1b, 0x84, 0xd2, 0x08, 0xc5, 0xdf, 0x5c,
		0x3f, 0xe1, 0xcb, 0x4e, 0x5e, 0x14, 0xf7, 0x3b, 0xed, 0xf1, 0xbe, 0xf8, 0x5a, 0x4c, 0xc7, 0xb5,
		0x88, 0xf1, 0x11, 0xe3, 0x23, 0xc6, 0xa7, 0x8d, 0xf1, 0x45, 0x7a, 0xa9, 0x91, 0xef, 0xbd, 0xd5,
		0x30, 0x55, 0x26, 0xa1, 0xf2, 0x60, 0x67, 0xbf, 0x56, 0xab, 0x55, 0x88, 0x44, 0x12, 0x89, 0x24,
		0x12, 0x09, 0x7a, 0x54, 0x7b, 0x3b, 0x87, 0x7b, 0x87, 0x07, 0x6f, 0x77, 0x0e, 0x89, 0x3a, 0xae,
		0x05, 0x75, 0xec, 0xfa, 0x7a, 0xc3, 0x83, 0xe9, 0x7c, 0x45, 0x06, 0x07, 0x93, 0x4b, 0x50, 0x68,
		0x90, 0x88, 0x22, 0x11, 0xc5, 0xc5, 0x25, 0x8a, 0x14, 0x1a, 0x24, 0x56, 0x47, 0xac, 0x6e, 0x41,
		0x1e, 0x15, 0x85, 0x06, 0xd7, 0x9b, 0xdf, 0x15, 0x12, 0x18, 0x1c, 0x9f, 0xba, 0x28, 0xd6, 0xf7,
		0xcd, 0xa7, 0xa0, 0x20, 0x71, 0x3d, 0xe2, 0x7a, 0x8b, 0xca, 0xf5, 0x28, 0x28, 0x48, 0xf4, 0x91,
		0xe8, 0xe3, 0xea, 0xd2, 0x47, 0x0a, 0x0a, 0x2e, 0x21, 0x69, 0x2c, 0x35, 0x51, 0x11, 0x79, 0x08,
		0xb2, 0x3f, 0x0f, 0xee, 0x30, 0x64, 0x9c, 0xcf, 0xbf, 0x0d, 0xcf, 0x38, 0x66, 0xd8, 0x73, 0x91,
		0x31, 0x5d, 0xbd, 0xbb, 0xbc, 0x0f, 0x2a, 0x2b, 0x71, 0xbc, 0x78, 0xbe, 0x47, 0x5b, 0x21, 0xa7,
		0x33, 0xf4, 0x3c, 0xc1, 0x85, 0x38, 0xd8, 0x1a, 0x4a, 0xc4, 0xc1, 0x16, 0x65, 0x3e, 0x36, 0xf1,
		0x68, 0xeb, 0xf6, 0x35, 0x0f, 0xe2, 0x3e, 0x2b, 0xf2, 0xc9, 0xe7, 0x74, 0xb0, 0xb5, 0x0c, 0x7f,
		0x89, 0x8e, 0xb7, 0x2c, 0xd9, 0xc1, 0x56, 0x90, 0xe7, 0x83, 0x28, 0x43, 0x43, 0x27, 0x5b, 0xa9,
		0xc6, 0x7a, 0x29, 0x4b, 0xbb, 0xb3, 0x4f, 0x87, 0x5a, 0xe7, 0x82, 0xfc, 0x5d, 0xbf, 0x05, 0x47,
		0xfe, 0x68, 0x30, 0x0e, 0xf9, 0x7b, 0xa5, 0x45, 0xbb, 0x21, 0x0f, 0x98, 0xef, 0x58, 0x71, 0xd9,
		0x73, 0x4b, 0x32, 0xd1, 0xf1, 0xd3, 0x42, 0x2d, 0xbd, 0xae, 0xf1, 0x2d, 0xa2, 0x01, 0x44, 0x03,
		0x16, 0x85, 0x06, 0xe0, 0xa1, 0x1c, 0x5e, 0xce, 0x13, 0x53, 0xc6, 0x73, 0xa4, 0x7c, 0x67, 0xd7,
		0x6f, 0x45, 0xff, 0x2b, 0x17, 0xec, 0x2c, 0xc6, 0x14, 0x3d, 0x36, 0xc3, 0xe8, 0x9b, 0x80, 0xad,
		0x51, 0x3a, 0x1e, 0x67, 0x90, 0xce, 0x4f, 0x59, 0xcb, 0x0b, 0x7a, 0x46, 0x27, 0x24, 0xe7, 0x83,
		0xac, 0xce, 0x0a, 0x59, 0x1d, 0x90, 0x8a, 0x30, 0xea, 0xd4, 0x44, 0x5e, 0xc4, 0x52, 0x78, 0x11,
		0xbb, 0x3b, 0x6b, 0xe8, 0x44, 0xc0, 0x58, 0x80, 0xe4, 0x81, 0x0b, 0xd6, 0xc8, 0xca, 0x8d, 0x65,
		0xfc, 0x7d, 0x6c, 0xfc, 0xf7, 0xae, 0x91, 0xbe, 0xa8, 0x19, 0x87, 0xb7, 0xb7, 0xc6, 0x9d, 0xd9,
		0xd8, 0x84, 0xda, 0x70, 0xf3, 0xd9, 0x34, 0x9f, 0x6f, 0xbe, 0xff, 0xfa, 0x77, 0xc3, 0xdc, 0x7c,
		0x36, 0x6f, 0xbe, 0x77, 0x2e, 0xe3, 0x17, 0xe6, 0xcd, 0x77, 0xe7, 0xa2, 0x61, 0x6e, 0x56, 0x16,
		0xc7, 0xb9, 0x7a, 0xa3, 0x51, 0xb3, 0x7a, 0x35, 0x35, 0x95, 0xec, 0x32, 0xac, 0x8c, 0x26, 0xbc,
		0x7c, 0xa6, 0xd6, 0xb2, 0x99, 0xb0, 0x72, 0x99, 0x79, 0x97, 0x13, 0xb8, 0x87, 0x80, 0xdb, 0x3b,
		0xa8, 0xa8, 0x04, 0xda, 0xe1, 0xbb, 0x05, 0xf9, 0x54, 0x60, 0xb6, 0x78, 0xbe, 0xfe, 0x89, 0x19,
		0x2b, 0xdd, 0x13, 0xd8, 0xe8, 0xde, 0x67, 0x4b, 0xac, 0x9a, 0xa4, 0xaa, 0x4b, 0xa8, 0x16, 0xc9,
		0x54, 0x93, 0xc8, 0x59, 0xeb, 0xa3, 0x28, 0x81, 0x70, 0xc9, 0xcb, 0x21, 0x75, 0x50, 0x69, 0x7b,
		0x5d, 0xd2, 0xa6, 0xcb, 0xcf, 0x2b, 0x6b, 0x53, 0x91, 0xbc, 0xe3, 0x3b, 0x96, 0x9c, 0xcd, 0x5f,
		0xfb, 0x5c, 0xb5, 0x3f, 0x62, 0xc6, 0x8a, 0x8f, 0x45, 0x94, 0x92, 0x76, 0x7d, 0x8f, 0xcd, 0x90,
		0xf5, 0xa6, 0x98, 0xa5, 0xa2, 0x39, 0xcb, 0x34, 0xe5, 0xf6, 0xd2, 0x54, 0xbc, 0x32, 0x45, 0x2f,
		0x4c, 0xd5, 0xeb, 0x02, 0x7b, 0x59, 0x60, 0xaf, 0x4a, 0xdd, 0x8b, 0xc2, 0x59, 0xa4, 0xbc, 0x65,
		0x8b, 0x2a, 0x76, 0x92, 0xa5, 0x65, 0xdc, 0xf3, 0x07, 0xeb, 0x51, 0x78, 0xf9, 0xe1, 0x73, 0x70,
		0x3a, 0x7d, 0x74, 0x86, 0x9c, 0x2b, 0x32, 0x22, 0xa2, 0x69, 0xba, 0x18, 0xeb, 0x4d, 0xc3, 0x44,
		0x8b, 0xb9, 0x1e, 0x4b, 0xaa, 0x2b, 0xc7, 0x3d, 0x21, 0xc3, 0xa4, 0x23, 0x64, 0xde, 0xf9, 0xd5,
		0x68, 0xb4, 0x72, 0xb0, 0x01, 0x12, 0x64, 0x00, 0x06, 0x17, 0xa0, 0x41, 0x05, 0x74, 0x30, 0x01,
		0x1d, 0x44, 0x80, 0x07, 0x0f, 0xf4, 0x32, 0x4a, 0xc0, 0x0e, 0xa5, 0x7a, 0x60, 0x61, 0x90, 0x8d,
		0xa9, 0xa6, 0x09, 0xd0, 0x50, 0x02, 0x34, 0x84, 0x00, 0xab, 0x32, 0x8f, 0x08, 0x69, 0xe1, 0x5a,
		0xe5, 0x20, 0xb3, 0x15, 0x75, 0xb8, 0xaf, 0x2f, 0xb0, 0xb2, 0xfa, 0x73, 0x5f, 0xb2, 0x9d, 0x79,
		0xae, 0x59, 0x41, 0xae, 0xa6, 0x82, 0x6b, 0x0f, 0x76, 0xe9, 0x2b, 0xa7, 0x67, 0x9f, 0xfe, 0x63,
		0x1c, 0x5f, 0x5c, 0x3c, 0x1f, 0x5f, 0x5c, 0x7c, 0xfe, 0xdf, 0xcc, 0xab, 0xab, 0x6f, 0x1f, 0x2e,
		0xce, 0x4f, 0xf2, 0x9b, 0xb1, 0x86, 0x2e, 0xff, 0x64, 0x2b, 0x0f, 0x94, 0x67, 0x01, 0x55, 0x19,
		0xc5, 0x07, 0x83, 0x61, 0x00, 0x9e, 0x99, 0xa1, 0xdf, 0xac, 0x2b, 0xcb, 0x37, 0x09, 0xb7, 0x09,
		0xb7, 0x55, 0x71, 0x1b, 0x8e, 0xc1, 0xea, 0xf2, 0x4c, 0x30, 0x5c, 0x64, 0xa4, 0x7e, 0x9d, 0x61,
		0xb8, 0x5e, 0xdb, 0xd9, 0x5b, 0x41, 0x20, 0x2e, 0x13, 0xda, 0x44, 0xe8, 0x3b, 0xd6, 0x93, 0x91,
		0x46, 0x6d, 0x54, 0xb1, 0x2d, 0x3b, 0x1a, 0x08, 0x6e, 0xc9, 0x14, 0x2c, 0x9a, 0x22, 0x4d, 0xcd,
		0x61, 0xc2, 0x65, 0x7f, 0x7d, 0x3b, 0x67, 0x5e, 0xc0, 0x4e, 0x2e, 0xce, 0x09, 0xdd, 0x08, 0xdd,
		0xca, 0x43, 0xb7, 0x50, 0x06, 0xc2, 0x6d, 0x13, 0xb0, 0x11, 0xb0, 0xcd, 0x75, 0xc9, 0xde, 0xd5,
		0x08, 0xd6, 0x30, 0xb0, 0xa6, 0xd0, 0x3a, 0x4d, 0xbd, 0x8f, 0x53, 0x9e, 0x56, 0x69, 0x84, 0x5a,
		0x84, 0x5a, 0x25, 0xa2, 0x96, 0x0d, 0x40, 0x2c, 0x85, 0x84, 0x4e, 0xe0, 0xc1, 0x0c, 0x8a, 0x87,
		0xae, 0x8d, 0x23, 0x86, 0x6a, 0x15, 0x46, 0xa8, 0x95, 0xa2, 0x96, 0x52, 0xcb, 0x2f, 0x50, 0xab,
		0x2f, 0xad, 0x2d, 0xbe, 0x14, 0xfb, 0x0d, 0x11, 0x7a, 0xad, 0x32, 0x7a, 0xa9, 0xf6, 0xf3, 0x01,
		0xb5, 0xe0, 0x42, 0xb4, 0xde, 0xd2, 0xdb, 0x72, 0x8b, 0xba, 0xda, 0x95, 0xa7, 0x22, 0xda, 0x54,
		0x05, 0xaf, 0x32, 0x40, 0xb4, 0x29, 0xab, 0xab, 0x1d, 0xba, 0x25, 0x96, 0xae, 0x56, 0x58, 0xe5,
		0xb6, 0xc0, 0xc2, 0xb2, 0x18, 0xea, 0x7b, 0x57, 0x9c, 0xd2, 0x6a, 0x57, 0x5e, 0x7d, 0x4a, 0x0c,
		0x53, 0x66, 0x04, 0x55, 0x67, 0x5a, 0x6a, 0x94, 0x69, 0xac, 0x43, 0xab, 0xa1, 0xfe, 0xac, 0xa6,
		0xc2, 0x61, 0x1a, 0x4a, 0xb6, 0xe9, 0x2c, 0x14, 0xa6, 0xb9, 0xea, 0x94, 0xee, 0xc2, 0x60, 0x45,
		0x14, 0x97, 0xd2, 0x50, 0x08, 0x4c, 0x6b, 0x01, 0xb0, 0xa2, 0x1e, 0x41, 0x71, 0xf5, 0x62, 0x0b,
		0x79, 0x2a, 0x73, 0x2a, 0xb1, 0xd5, 0x28, 0xab, 0xc8, 0xd3, 0x16, 0x9c, 0xe5, 0xe8, 0xa8, 0xfc,
		0x5a, 0x40, 0x2b, 0xa8, 0x32, 0x5a, 0x40, 0x11, 0xe3, 0x21, 0xc6, 0xb3, 0x8e, 0x8c, 0x07, 0x59,
		0x8d, 0x55, 0x43, 0x15, 0x56, 0xad, 0xd5, 0x57, 0x89, 0x3c, 0x11, 0x79, 0x5a, 0x2a, 0xf2, 0xa4,
		0xbb, 0x5a, 0x2a, 0x51, 0xa6, 0x72, 0x28, 0x13, 0xb2, 0x15, 0x92, 0x9e, 0x16, 0x48, 0x65, 0xb6,
		0x3e, 0x22, 0x82, 0x44, 0x04, 0x89, 0x42, 0x42, 0x14, 0x12, 0x22, 0x56, 0x43, 0xac, 0x86, 0x42,
		0x42, 0x6b, 0xc2, 0x6f, 0xb4, 0x06, 0x84, 0x74, 0xb5, 0x00, 0x2a, 0xbe, 0xf5, 0x0f, 0x71, 0x1d,
		0xe2, 0x3a, 0x14, 0x0c, 0xa2, 0x60, 0x10, 0xd1, 0x26, 0xa2, 0x4d, 0x14, 0x0c, 0x5a, 0x33, 0xb2,
		0xb4, 0x7a, 0x4d, 0x52, 0x7a, 0xc7, 0xda, 0x51, 0x2d, 0x6f, 0x20, 0xc5, 0xa8, 0xbe, 0xa6, 0x17,
		0x86, 0xb6, 0xba, 0x99, 0x57, 0x55, 0xbf, 0x52, 0xcb, 0xd0, 0x0d, 0x3f, 0x9d, 0x82, 0x8b, 0xd1,
		0x0d, 0x3f, 0x91, 0x4a, 0x99, 0xa9, 0xd8, 0x0a, 0x2d, 0x6a, 0x00, 0x0d, 0x33, 0x66, 0xb7, 0xa4,
		0xa1, 0x03, 0x44, 0xa5, 0x71, 0x75, 0x3a, 0x40, 0xa4, 0xd8, 0xea, 0x05, 0xd0, 0xe2, 0x65, 0xbd,
		0x4e, 0x10, 0xd1, 0x89, 0x57, 0xe5, 0x25, 0x03, 0xb7, 0x64, 0xa1, 0xc3, 0x43, 0xc9, 0x32, 0x48,
		0x5f, 0xa5, 0x9d, 0xc1, 0xa0, 0xee, 0xa5, 0xaf, 0x50, 0x0a, 0xf8, 0xf5, 0xee, 0x05, 0xfd, 0x82,
		0x44, 0x26, 0x81, 0x17, 0x81, 0x57, 0x79, 0xe0, 0xd5, 0x13, 0x3b, 0xb5, 0x5e, 0x03, 0x54, 0xb8,
		0x81, 0x60, 0x4c, 0xff, 0x92, 0x41, 0x7b, 0x02, 0xac, 0x7d, 0x61, 0x40, 0x6d, 0x35, 0xfe, 0xf5,
		0xd5, 0xf6, 0x6f, 0x2c, 0x52, 0x09, 0xf4, 0x3c, 0x38, 0x4d, 0x05, 0xd0, 0x8b, 0x8d, 0x79, 0x14,
		0x54, 0x04, 0xbd, 0x17, 0xe5, 0x28, 0xa4, 0x10, 0x7a, 0x60, 0xb5, 0x5a, 0xa2, 0x69, 0x34, 0x1d,
		0x2b, 0x0c, 0x15, 0xaa, 0xa1, 0x0f, 0x0d, 0x83, 0x95, 0x44, 0x4f, 0xe7, 0x60, 0xb9, 0xe6, 0xa0,
		0x92, 0xe8, 0xfa, 0x98, 0xdd, 0xc2, 0x96, 0x44, 0xb7, 0x02, 0x5f, 0xdd, 0x41, 0x89, 0x06, 0xc1,
		0xdc, 0x93, 0x63, 0xc7, 0xf1, 0x9a, 0xb1, 0x6d, 0x60, 0x96, 0x6b, 0xb3, 0x2f, 0x5c, 0x72, 0x37,
		0xfe, 0xd7, 0x55, 0x20, 0xbc, 0x40, 0xc8, 0x27, 0x93, 0xd5, 0x99, 0x08, 0x99, 0x7c, 0xe0, 0xec,
		0x41, 0xb4, 0x1f, 0x78, 0x28, 0x4d, 0x56, 0xdf, 0xef, 0xbd, 0xe5, 0x78, 0x3f, 0xa3, 0x77, 0xc8,
		0x97, 0x21, 0x5f, 0xa6, 0x3c, 0x5f, 0x26, 0xbf, 0xb4, 0x53, 0x20, 0x8e, 0x3c, 0x98, 0x42, 0x96,
		0x8c, 0xe2, 0x70, 0xa8, 0x38, 0xdc, 0x02, 0x16, 0x0b, 0x57, 0x61, 0x62, 0x84, 0x67, 0x84, 0x67,
		0x1a, 0xf1, 0x8c, 0xaa, 0x85, 0x13, 0xb2, 0x51, 0xb5, 0x70, 0x46, 0xd5, 0xc2, 0xa9, 0x5a, 0x38,
		0xa1, 0xdb, 0xca, 0xa1, 0x1b, 0x55, 0x0b, 0x27, 0x60, 0xa3, 0x6a, 0xe1, 0x4b, 0x0f, 0x6b, 0xbe,
		0x7d, 0xaf, 0x8e, 0x66, 0xd1, 0x20, 0x60, 0xcd, 0xd5, 0xd3, 0x0f, 0x04, 0x53, 0x04, 0x53, 0xe5,
		0xc1, 0x54, 0x7e, 0x51, 0xcd, 0x0a, 0xdd, 0x01, 0x05, 0x15, 0x27, 0x9b, 0x5b, 0xaa, 0x0f, 0x0e,
		0x70, 0xbd, 0x6a, 0x84, 0x51, 0x38, 0x8c, 0xe2, 0x0e, 0xa0, 0x85, 0x70, 0x3c, 0x0a, 0x88, 0x52,
		0x67, 0x17, 0x5f, 0x18, 0xff, 0xe5, 0x7b, 0x6e, 0x7e, 0x43, 0x4f, 0x78, 0x45, 0x78, 0xa5, 0x03,
		0xaf, 0xf2, 0x4b, 0x2d, 0x83, 0xd5, 0xe2, 0x26, 0xc0, 0x22, 0xc0, 0x9a, 0x01, 0x58, 0x04, 0x57,
		0x18, 0xb8, 0xfa, 0xff, 0x4d, 0xa1, 0x8e, 0x56, 0xd1, 0x20, 0x18, 0x58, 0xfd, 0xf3, 0xf3, 0x35,
		0x3b, 0x71, 0xac, 0x30, 0x64, 0xe7, 0x36, 0x77, 0xa5, 0x68, 0x09, 0x4e, 0x2d, 0x98, 0x08, 0xb3,
		0x4a, 0xc4, 0xac, 0xfc, 0xb2, 0xcb, 0x28, 0x71, 0x83, 0xa2, 0x80, 0x05, 0x2c, 0xd9, 0x4a, 0xa6,
		0x9e, 0x97, 0x79, 0x80, 0xaa, 0x09, 0x3b, 0x40, 0xd5, 0xd4, 0x73, 0x80, 0x6a, 0x28, 0x49, 0x83,
		0xb2, 0x0e, 0x09, 0xbc, 0x4a, 0x04, 0xaf, 0xa1, 0x74, 0x6f, 0x3a, 0x46, 0x45, 0x58, 0x46, 0x58,
		0x56, 0x00, 0x96, 0xd1, 0x31, 0x2a, 0x1c, 0x86, 0x6b, 0x39, 0x46, 0xd5, 0xa4, 0x63, 0x54, 0x93,
		0x10, 0xac, 0x94, 0x63, 0x54, 0x0a, 0x87, 0x8a, 0x18, 0xf4, 0x2c, 0x55, 0x72, 0x8d, 0x38, 0x16,
		0x00, 0x3e, 0x4f, 0xf5, 0x46, 0x61, 0x09, 0x7b, 0x82, 0xc5, 0x5d, 0x39, 0x5d, 0xb2, 0xf2, 0x49,
		0x54, 0x7e, 0x49, 0x42, 0x49, 0x50, 0x3e, 0xc9, 0x99, 0x76, 0xbb, 0x39, 0x25, 0x05, 0x24, 0x21,
		0xaf, 0xc8, 0x04, 0x40, 0x16, 0x26, 0x3f, 0xfe, 0xf1, 0x87, 0x3b, 0xfc, 0xce, 0xc8, 0x7d, 0xcf,
		0xba, 0xdf, 0xfc, 0xf7, 0x39, 0xe1, 0xe6, 0xf2, 0xde, 0xd4, 0xf0, 0x9d, 0x0c, 0xbe, 0x6f, 0xf2,
		0x2a, 0xfd, 0xc6, 0xd3, 0xbe, 0x69, 0x45, 0x84, 0x1f, 0xad, 0x1f, 0xfc, 0x8b, 0xe7, 0x8d, 0xb3,
		0xdb, 0xd1, 0x6f, 0x5f, 0xc9, 0xfe, 0x6a, 0xe8, 0xbb, 0x9d, 0xf2, 0xc7, 0x7e, 0x05, 0xa6, 0x97,
		0x37, 0x2f, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x85, 0xb7, 0x2f,
		0x62, 0x91, 0x87, 0x03, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
}

