// Code generated by YGOT. DO NOT EDIT.
/*
Package aether_3_0_0 is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/smbaker/gopath/pkg/mod/github.com/openconfig/ygot@v0.10.5/genutil/names.go
using the following YANG input files:
	- enterprise.yang
	- connectivity-service.yang
	- aether-types.yang
	- application.yang
	- device-group.yang
	- ip-domain.yang
	- network.yang
	- site.yang
	- device-model-list.yang
	- upf.yang
	- ap-list.yang
	- template.yang
	- vcs.yang
	- traffic-class.yang
Imported modules were sourced from:
	- ../../../sdran-helm-charts/config-models/aether-3.x/files/yang/...
*/
package aether_3_0_0

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Device{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// ApList_ApList represents the /ap-list/ap-list YANG schema element.
type ApList_ApList struct {
	ApList	map[string]*ApList_ApList_ApList	`path:"ap-list" module:"ap-list"`
}

// IsYANGGoStruct ensures that ApList_ApList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ApList_ApList) IsYANGGoStruct() {}

// NewApList creates a new entry in the ApList list of the
// ApList_ApList struct. The keys of the list are populated from the input
// arguments.
func (t *ApList_ApList) NewApList(Id string) (*ApList_ApList_ApList, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ApList == nil {
		t.ApList = make(map[string]*ApList_ApList_ApList)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ApList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ApList", key)
	}

	t.ApList[key] = &ApList_ApList_ApList{
		Id: &Id,
	}

	return t.ApList[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ApList_ApList) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ApList_ApList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ApList_ApList) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ApList_ApList_ApList represents the /ap-list/ap-list/ap-list YANG schema element.
type ApList_ApList_ApList struct {
	AccessPoints	map[string]*ApList_ApList_ApList_AccessPoints	`path:"access-points" module:"ap-list"`
	Description	*string	`path:"description" module:"ap-list"`
	DisplayName	*string	`path:"display-name" module:"ap-list"`
	Enterprise	*string	`path:"enterprise" module:"ap-list"`
	Id	*string	`path:"id" module:"ap-list"`
}

// IsYANGGoStruct ensures that ApList_ApList_ApList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ApList_ApList_ApList) IsYANGGoStruct() {}

// NewAccessPoints creates a new entry in the AccessPoints list of the
// ApList_ApList_ApList struct. The keys of the list are populated from the input
// arguments.
func (t *ApList_ApList_ApList) NewAccessPoints(Address string) (*ApList_ApList_ApList_AccessPoints, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AccessPoints == nil {
		t.AccessPoints = make(map[string]*ApList_ApList_ApList_AccessPoints)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AccessPoints[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AccessPoints", key)
	}

	t.AccessPoints[key] = &ApList_ApList_ApList_AccessPoints{
		Address: &Address,
	}

	return t.AccessPoints[key], nil
}

// ΛListKeyMap returns the keys of the ApList_ApList_ApList struct, which is a YANG list entry.
func (t *ApList_ApList_ApList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ApList_ApList_ApList) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ApList_ApList_ApList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ApList_ApList_ApList) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ApList_ApList_ApList_AccessPoints represents the /ap-list/ap-list/ap-list/access-points YANG schema element.
type ApList_ApList_ApList_AccessPoints struct {
	Address	*string	`path:"address" module:"ap-list"`
	Enable	*bool	`path:"enable" module:"ap-list"`
	Tac	*uint32	`path:"tac" module:"ap-list"`
}

// IsYANGGoStruct ensures that ApList_ApList_ApList_AccessPoints implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ApList_ApList_ApList_AccessPoints) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the ApList_ApList_ApList_AccessPoints struct, which is a YANG list entry.
func (t *ApList_ApList_ApList_AccessPoints) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ApList_ApList_ApList_AccessPoints) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ApList_ApList_ApList_AccessPoints"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ApList_ApList_ApList_AccessPoints) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Application_Application represents the /application/application YANG schema element.
type Application_Application struct {
	Application	map[string]*Application_Application_Application	`path:"application" module:"application"`
}

// IsYANGGoStruct ensures that Application_Application implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Application_Application) IsYANGGoStruct() {}

// NewApplication creates a new entry in the Application list of the
// Application_Application struct. The keys of the list are populated from the input
// arguments.
func (t *Application_Application) NewApplication(Id string) (*Application_Application_Application, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[string]*Application_Application_Application)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Application[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Application", key)
	}

	t.Application[key] = &Application_Application_Application{
		Id: &Id,
	}

	return t.Application[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Application_Application) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Application_Application"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Application_Application) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Application_Application_Application represents the /application/application/application YANG schema element.
type Application_Application_Application struct {
	Description	*string	`path:"description" module:"application"`
	DisplayName	*string	`path:"display-name" module:"application"`
	Endpoint	map[string]*Application_Application_Application_Endpoint	`path:"endpoint" module:"application"`
	Enterprise	*string	`path:"enterprise" module:"application"`
	Id	*string	`path:"id" module:"application"`
}

// IsYANGGoStruct ensures that Application_Application_Application implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Application_Application_Application) IsYANGGoStruct() {}

// NewEndpoint creates a new entry in the Endpoint list of the
// Application_Application_Application struct. The keys of the list are populated from the input
// arguments.
func (t *Application_Application_Application) NewEndpoint(Name string) (*Application_Application_Application_Endpoint, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Endpoint == nil {
		t.Endpoint = make(map[string]*Application_Application_Application_Endpoint)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Endpoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Endpoint", key)
	}

	t.Endpoint[key] = &Application_Application_Application_Endpoint{
		Name: &Name,
	}

	return t.Endpoint[key], nil
}

// ΛListKeyMap returns the keys of the Application_Application_Application struct, which is a YANG list entry.
func (t *Application_Application_Application) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Application_Application_Application) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Application_Application_Application"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Application_Application_Application) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Application_Application_Application_Endpoint represents the /application/application/application/endpoint YANG schema element.
type Application_Application_Application_Endpoint struct {
	Address	*string	`path:"address" module:"application"`
	Name	*string	`path:"name" module:"application"`
	PortEnd	*uint32	`path:"port-end" module:"application"`
	PortStart	*uint32	`path:"port-start" module:"application"`
	Protocol	*string	`path:"protocol" module:"application"`
}

// IsYANGGoStruct ensures that Application_Application_Application_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Application_Application_Application_Endpoint) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Application_Application_Application_Endpoint struct, which is a YANG list entry.
func (t *Application_Application_Application_Endpoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Application_Application_Application_Endpoint) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Application_Application_Application_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Application_Application_Application_Endpoint) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ConnectivityService_ConnectivityService represents the /connectivity-service/connectivity-service YANG schema element.
type ConnectivityService_ConnectivityService struct {
	ConnectivityService	map[string]*ConnectivityService_ConnectivityService_ConnectivityService	`path:"connectivity-service" module:"connectivity-service"`
}

// IsYANGGoStruct ensures that ConnectivityService_ConnectivityService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ConnectivityService_ConnectivityService) IsYANGGoStruct() {}

// NewConnectivityService creates a new entry in the ConnectivityService list of the
// ConnectivityService_ConnectivityService struct. The keys of the list are populated from the input
// arguments.
func (t *ConnectivityService_ConnectivityService) NewConnectivityService(Id string) (*ConnectivityService_ConnectivityService_ConnectivityService, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ConnectivityService == nil {
		t.ConnectivityService = make(map[string]*ConnectivityService_ConnectivityService_ConnectivityService)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ConnectivityService[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ConnectivityService", key)
	}

	t.ConnectivityService[key] = &ConnectivityService_ConnectivityService_ConnectivityService{
		Id: &Id,
	}

	return t.ConnectivityService[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ConnectivityService_ConnectivityService) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ConnectivityService_ConnectivityService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ConnectivityService_ConnectivityService) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ConnectivityService_ConnectivityService_ConnectivityService represents the /connectivity-service/connectivity-service/connectivity-service YANG schema element.
type ConnectivityService_ConnectivityService_ConnectivityService struct {
	Core_5GEndpoint	*string	`path:"core-5g-endpoint" module:"connectivity-service"`
	Description	*string	`path:"description" module:"connectivity-service"`
	DisplayName	*string	`path:"display-name" module:"connectivity-service"`
	HssEndpoint	*string	`path:"hss-endpoint" module:"connectivity-service"`
	Id	*string	`path:"id" module:"connectivity-service"`
	PcrfEndpoint	*string	`path:"pcrf-endpoint" module:"connectivity-service"`
	SpgwcEndpoint	*string	`path:"spgwc-endpoint" module:"connectivity-service"`
}

// IsYANGGoStruct ensures that ConnectivityService_ConnectivityService_ConnectivityService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ConnectivityService_ConnectivityService_ConnectivityService) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the ConnectivityService_ConnectivityService_ConnectivityService struct, which is a YANG list entry.
func (t *ConnectivityService_ConnectivityService_ConnectivityService) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ConnectivityService_ConnectivityService_ConnectivityService) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ConnectivityService_ConnectivityService_ConnectivityService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ConnectivityService_ConnectivityService_ConnectivityService) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Device represents the /device YANG schema element.
type Device struct {
	ApList	*ApList_ApList	`path:"ap-list" module:"ap-list"`
	Application	*Application_Application	`path:"application" module:"application"`
	ConnectivityService	*ConnectivityService_ConnectivityService	`path:"connectivity-service" module:"connectivity-service"`
	DeviceGroup	*DeviceGroup_DeviceGroup	`path:"device-group" module:"device-group"`
	DeviceModelList	*DeviceModelList_DeviceModelList	`path:"device-model-list" module:"device-model-list"`
	Enterprise	*Enterprise_Enterprise	`path:"enterprise" module:"enterprise"`
	IpDomain	*IpDomain_IpDomain	`path:"ip-domain" module:"ip-domain"`
	Network	*Network_Network	`path:"network" module:"network"`
	Site	*Site_Site	`path:"site" module:"site"`
	Template	*Template_Template	`path:"template" module:"template"`
	TrafficClass	*TrafficClass_TrafficClass	`path:"traffic-class" module:"traffic-class"`
	Upf	*Upf_Upf	`path:"upf" module:"upf"`
	Vcs	*Vcs_Vcs	`path:"vcs" module:"vcs"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// DeviceGroup_DeviceGroup represents the /device-group/device-group YANG schema element.
type DeviceGroup_DeviceGroup struct {
	DeviceGroup	map[string]*DeviceGroup_DeviceGroup_DeviceGroup	`path:"device-group" module:"device-group"`
}

// IsYANGGoStruct ensures that DeviceGroup_DeviceGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*DeviceGroup_DeviceGroup) IsYANGGoStruct() {}

// NewDeviceGroup creates a new entry in the DeviceGroup list of the
// DeviceGroup_DeviceGroup struct. The keys of the list are populated from the input
// arguments.
func (t *DeviceGroup_DeviceGroup) NewDeviceGroup(Id string) (*DeviceGroup_DeviceGroup_DeviceGroup, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DeviceGroup == nil {
		t.DeviceGroup = make(map[string]*DeviceGroup_DeviceGroup_DeviceGroup)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DeviceGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DeviceGroup", key)
	}

	t.DeviceGroup[key] = &DeviceGroup_DeviceGroup_DeviceGroup{
		Id: &Id,
	}

	return t.DeviceGroup[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DeviceGroup_DeviceGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["DeviceGroup_DeviceGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *DeviceGroup_DeviceGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// DeviceGroup_DeviceGroup_DeviceGroup represents the /device-group/device-group/device-group YANG schema element.
type DeviceGroup_DeviceGroup_DeviceGroup struct {
	DisplayName	*string	`path:"display-name" module:"device-group"`
	Id	*string	`path:"id" module:"device-group"`
	Imsis	map[string]*DeviceGroup_DeviceGroup_DeviceGroup_Imsis	`path:"imsis" module:"device-group"`
	IpDomain	*string	`path:"ip-domain" module:"device-group"`
	Site	*string	`path:"site" module:"device-group"`
}

// IsYANGGoStruct ensures that DeviceGroup_DeviceGroup_DeviceGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*DeviceGroup_DeviceGroup_DeviceGroup) IsYANGGoStruct() {}

// NewImsis creates a new entry in the Imsis list of the
// DeviceGroup_DeviceGroup_DeviceGroup struct. The keys of the list are populated from the input
// arguments.
func (t *DeviceGroup_DeviceGroup_DeviceGroup) NewImsis(Name string) (*DeviceGroup_DeviceGroup_DeviceGroup_Imsis, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Imsis == nil {
		t.Imsis = make(map[string]*DeviceGroup_DeviceGroup_DeviceGroup_Imsis)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Imsis[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Imsis", key)
	}

	t.Imsis[key] = &DeviceGroup_DeviceGroup_DeviceGroup_Imsis{
		Name: &Name,
	}

	return t.Imsis[key], nil
}

// ΛListKeyMap returns the keys of the DeviceGroup_DeviceGroup_DeviceGroup struct, which is a YANG list entry.
func (t *DeviceGroup_DeviceGroup_DeviceGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DeviceGroup_DeviceGroup_DeviceGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["DeviceGroup_DeviceGroup_DeviceGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *DeviceGroup_DeviceGroup_DeviceGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// DeviceGroup_DeviceGroup_DeviceGroup_Imsis represents the /device-group/device-group/device-group/imsis YANG schema element.
type DeviceGroup_DeviceGroup_DeviceGroup_Imsis struct {
	ImsiRangeFrom	*uint64	`path:"imsi-range-from" module:"device-group"`
	ImsiRangeTo	*uint64	`path:"imsi-range-to" module:"device-group"`
	Name	*string	`path:"name" module:"device-group"`
}

// IsYANGGoStruct ensures that DeviceGroup_DeviceGroup_DeviceGroup_Imsis implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*DeviceGroup_DeviceGroup_DeviceGroup_Imsis) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the DeviceGroup_DeviceGroup_DeviceGroup_Imsis struct, which is a YANG list entry.
func (t *DeviceGroup_DeviceGroup_DeviceGroup_Imsis) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DeviceGroup_DeviceGroup_DeviceGroup_Imsis) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["DeviceGroup_DeviceGroup_DeviceGroup_Imsis"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *DeviceGroup_DeviceGroup_DeviceGroup_Imsis) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// DeviceModelList_DeviceModelList represents the /device-model-list/device-model-list YANG schema element.
type DeviceModelList_DeviceModelList struct {
	DeviceModelList	map[string]*DeviceModelList_DeviceModelList_DeviceModelList	`path:"device-model-list" module:"device-model-list"`
}

// IsYANGGoStruct ensures that DeviceModelList_DeviceModelList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*DeviceModelList_DeviceModelList) IsYANGGoStruct() {}

// NewDeviceModelList creates a new entry in the DeviceModelList list of the
// DeviceModelList_DeviceModelList struct. The keys of the list are populated from the input
// arguments.
func (t *DeviceModelList_DeviceModelList) NewDeviceModelList(Id string) (*DeviceModelList_DeviceModelList_DeviceModelList, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DeviceModelList == nil {
		t.DeviceModelList = make(map[string]*DeviceModelList_DeviceModelList_DeviceModelList)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DeviceModelList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DeviceModelList", key)
	}

	t.DeviceModelList[key] = &DeviceModelList_DeviceModelList_DeviceModelList{
		Id: &Id,
	}

	return t.DeviceModelList[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DeviceModelList_DeviceModelList) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["DeviceModelList_DeviceModelList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *DeviceModelList_DeviceModelList) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// DeviceModelList_DeviceModelList_DeviceModelList represents the /device-model-list/device-model-list/device-model-list YANG schema element.
type DeviceModelList_DeviceModelList_DeviceModelList struct {
	Description	*string	`path:"description" module:"device-model-list"`
	DisplayName	*string	`path:"display-name" module:"device-model-list"`
	Id	*string	`path:"id" module:"device-model-list"`
	Tac	map[uint32]*DeviceModelList_DeviceModelList_DeviceModelList_Tac	`path:"tac" module:"device-model-list"`
}

// IsYANGGoStruct ensures that DeviceModelList_DeviceModelList_DeviceModelList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*DeviceModelList_DeviceModelList_DeviceModelList) IsYANGGoStruct() {}

// NewTac creates a new entry in the Tac list of the
// DeviceModelList_DeviceModelList_DeviceModelList struct. The keys of the list are populated from the input
// arguments.
func (t *DeviceModelList_DeviceModelList_DeviceModelList) NewTac(Tac uint32) (*DeviceModelList_DeviceModelList_DeviceModelList_Tac, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tac == nil {
		t.Tac = make(map[uint32]*DeviceModelList_DeviceModelList_DeviceModelList_Tac)
	}

	key := Tac

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Tac[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Tac", key)
	}

	t.Tac[key] = &DeviceModelList_DeviceModelList_DeviceModelList_Tac{
		Tac: &Tac,
	}

	return t.Tac[key], nil
}

// ΛListKeyMap returns the keys of the DeviceModelList_DeviceModelList_DeviceModelList struct, which is a YANG list entry.
func (t *DeviceModelList_DeviceModelList_DeviceModelList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DeviceModelList_DeviceModelList_DeviceModelList) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["DeviceModelList_DeviceModelList_DeviceModelList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *DeviceModelList_DeviceModelList_DeviceModelList) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// DeviceModelList_DeviceModelList_DeviceModelList_Tac represents the /device-model-list/device-model-list/device-model-list/tac YANG schema element.
type DeviceModelList_DeviceModelList_DeviceModelList_Tac struct {
	Allowed	*bool	`path:"allowed" module:"device-model-list"`
	Tac	*uint32	`path:"tac" module:"device-model-list"`
}

// IsYANGGoStruct ensures that DeviceModelList_DeviceModelList_DeviceModelList_Tac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*DeviceModelList_DeviceModelList_DeviceModelList_Tac) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the DeviceModelList_DeviceModelList_DeviceModelList_Tac struct, which is a YANG list entry.
func (t *DeviceModelList_DeviceModelList_DeviceModelList_Tac) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Tac == nil {
		return nil, fmt.Errorf("nil value for key Tac")
	}

	return map[string]interface{}{
		"tac": *t.Tac,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DeviceModelList_DeviceModelList_DeviceModelList_Tac) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["DeviceModelList_DeviceModelList_DeviceModelList_Tac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *DeviceModelList_DeviceModelList_DeviceModelList_Tac) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Enterprise_Enterprise represents the /enterprise/enterprise YANG schema element.
type Enterprise_Enterprise struct {
	Enterprise	map[string]*Enterprise_Enterprise_Enterprise	`path:"enterprise" module:"enterprise"`
}

// IsYANGGoStruct ensures that Enterprise_Enterprise implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Enterprise_Enterprise) IsYANGGoStruct() {}

// NewEnterprise creates a new entry in the Enterprise list of the
// Enterprise_Enterprise struct. The keys of the list are populated from the input
// arguments.
func (t *Enterprise_Enterprise) NewEnterprise(Id string) (*Enterprise_Enterprise_Enterprise, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Enterprise == nil {
		t.Enterprise = make(map[string]*Enterprise_Enterprise_Enterprise)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Enterprise[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Enterprise", key)
	}

	t.Enterprise[key] = &Enterprise_Enterprise_Enterprise{
		Id: &Id,
	}

	return t.Enterprise[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Enterprise_Enterprise) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Enterprise_Enterprise"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Enterprise_Enterprise) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Enterprise_Enterprise_Enterprise represents the /enterprise/enterprise/enterprise YANG schema element.
type Enterprise_Enterprise_Enterprise struct {
	ConnectivityService	map[string]*Enterprise_Enterprise_Enterprise_ConnectivityService	`path:"connectivity-service" module:"enterprise"`
	Description	*string	`path:"description" module:"enterprise"`
	DisplayName	*string	`path:"display-name" module:"enterprise"`
	Id	*string	`path:"id" module:"enterprise"`
}

// IsYANGGoStruct ensures that Enterprise_Enterprise_Enterprise implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Enterprise_Enterprise_Enterprise) IsYANGGoStruct() {}

// NewConnectivityService creates a new entry in the ConnectivityService list of the
// Enterprise_Enterprise_Enterprise struct. The keys of the list are populated from the input
// arguments.
func (t *Enterprise_Enterprise_Enterprise) NewConnectivityService(ConnectivityService string) (*Enterprise_Enterprise_Enterprise_ConnectivityService, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ConnectivityService == nil {
		t.ConnectivityService = make(map[string]*Enterprise_Enterprise_Enterprise_ConnectivityService)
	}

	key := ConnectivityService

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ConnectivityService[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ConnectivityService", key)
	}

	t.ConnectivityService[key] = &Enterprise_Enterprise_Enterprise_ConnectivityService{
		ConnectivityService: &ConnectivityService,
	}

	return t.ConnectivityService[key], nil
}

// ΛListKeyMap returns the keys of the Enterprise_Enterprise_Enterprise struct, which is a YANG list entry.
func (t *Enterprise_Enterprise_Enterprise) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Enterprise_Enterprise_Enterprise) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Enterprise_Enterprise_Enterprise"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Enterprise_Enterprise_Enterprise) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Enterprise_Enterprise_Enterprise_ConnectivityService represents the /enterprise/enterprise/enterprise/connectivity-service YANG schema element.
type Enterprise_Enterprise_Enterprise_ConnectivityService struct {
	ConnectivityService	*string	`path:"connectivity-service" module:"enterprise"`
	Enabled	*bool	`path:"enabled" module:"enterprise"`
}

// IsYANGGoStruct ensures that Enterprise_Enterprise_Enterprise_ConnectivityService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Enterprise_Enterprise_Enterprise_ConnectivityService) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Enterprise_Enterprise_Enterprise_ConnectivityService struct, which is a YANG list entry.
func (t *Enterprise_Enterprise_Enterprise_ConnectivityService) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ConnectivityService == nil {
		return nil, fmt.Errorf("nil value for key ConnectivityService")
	}

	return map[string]interface{}{
		"connectivity-service": *t.ConnectivityService,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Enterprise_Enterprise_Enterprise_ConnectivityService) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Enterprise_Enterprise_Enterprise_ConnectivityService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Enterprise_Enterprise_Enterprise_ConnectivityService) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// IpDomain_IpDomain represents the /ip-domain/ip-domain YANG schema element.
type IpDomain_IpDomain struct {
	IpDomain	map[string]*IpDomain_IpDomain_IpDomain	`path:"ip-domain" module:"ip-domain"`
}

// IsYANGGoStruct ensures that IpDomain_IpDomain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IpDomain_IpDomain) IsYANGGoStruct() {}

// NewIpDomain creates a new entry in the IpDomain list of the
// IpDomain_IpDomain struct. The keys of the list are populated from the input
// arguments.
func (t *IpDomain_IpDomain) NewIpDomain(Id string) (*IpDomain_IpDomain_IpDomain, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpDomain == nil {
		t.IpDomain = make(map[string]*IpDomain_IpDomain_IpDomain)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IpDomain[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IpDomain", key)
	}

	t.IpDomain[key] = &IpDomain_IpDomain_IpDomain{
		Id: &Id,
	}

	return t.IpDomain[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IpDomain_IpDomain) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IpDomain_IpDomain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IpDomain_IpDomain) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// IpDomain_IpDomain_IpDomain represents the /ip-domain/ip-domain/ip-domain YANG schema element.
type IpDomain_IpDomain_IpDomain struct {
	AdminStatus	*string	`path:"admin-status" module:"ip-domain"`
	Description	*string	`path:"description" module:"ip-domain"`
	DisplayName	*string	`path:"display-name" module:"ip-domain"`
	DnsPrimary	*string	`path:"dns-primary" module:"ip-domain"`
	DnsSecondary	*string	`path:"dns-secondary" module:"ip-domain"`
	Id	*string	`path:"id" module:"ip-domain"`
	Mtu	*uint32	`path:"mtu" module:"ip-domain"`
	Subnet	*string	`path:"subnet" module:"ip-domain"`
}

// IsYANGGoStruct ensures that IpDomain_IpDomain_IpDomain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IpDomain_IpDomain_IpDomain) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IpDomain_IpDomain_IpDomain struct, which is a YANG list entry.
func (t *IpDomain_IpDomain_IpDomain) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IpDomain_IpDomain_IpDomain) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IpDomain_IpDomain_IpDomain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IpDomain_IpDomain_IpDomain) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Network_Network represents the /network/network YANG schema element.
type Network_Network struct {
	Network	map[string]*Network_Network_Network	`path:"network" module:"network"`
}

// IsYANGGoStruct ensures that Network_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Network_Network) IsYANGGoStruct() {}

// NewNetwork creates a new entry in the Network list of the
// Network_Network struct. The keys of the list are populated from the input
// arguments.
func (t *Network_Network) NewNetwork(Id string) (*Network_Network_Network, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Network == nil {
		t.Network = make(map[string]*Network_Network_Network)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Network[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Network", key)
	}

	t.Network[key] = &Network_Network_Network{
		Id: &Id,
	}

	return t.Network[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Network_Network) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Network_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Network_Network) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Network_Network_Network represents the /network/network/network YANG schema element.
type Network_Network_Network struct {
	Description	*string	`path:"description" module:"network"`
	DisplayName	*string	`path:"display-name" module:"network"`
	Enterprise	*string	`path:"enterprise" module:"network"`
	Id	*string	`path:"id" module:"network"`
	Mcc	*uint32	`path:"mcc" module:"network"`
	Mnc	*uint32	`path:"mnc" module:"network"`
}

// IsYANGGoStruct ensures that Network_Network_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Network_Network_Network) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Network_Network_Network struct, which is a YANG list entry.
func (t *Network_Network_Network) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Network_Network_Network) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Network_Network_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Network_Network_Network) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Site_Site represents the /site/site YANG schema element.
type Site_Site struct {
	Site	map[string]*Site_Site_Site	`path:"site" module:"site"`
}

// IsYANGGoStruct ensures that Site_Site implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Site_Site) IsYANGGoStruct() {}

// NewSite creates a new entry in the Site list of the
// Site_Site struct. The keys of the list are populated from the input
// arguments.
func (t *Site_Site) NewSite(Id string) (*Site_Site_Site, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Site == nil {
		t.Site = make(map[string]*Site_Site_Site)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Site[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Site", key)
	}

	t.Site[key] = &Site_Site_Site{
		Id: &Id,
	}

	return t.Site[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Site_Site) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Site_Site"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Site_Site) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Site_Site_Site represents the /site/site/site YANG schema element.
type Site_Site_Site struct {
	Description	*string	`path:"description" module:"site"`
	DisplayName	*string	`path:"display-name" module:"site"`
	Enterprise	*string	`path:"enterprise" module:"site"`
	Id	*string	`path:"id" module:"site"`
	Network	*string	`path:"network" module:"site"`
}

// IsYANGGoStruct ensures that Site_Site_Site implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Site_Site_Site) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Site_Site_Site struct, which is a YANG list entry.
func (t *Site_Site_Site) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Site_Site_Site) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Site_Site_Site"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Site_Site_Site) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Template_Template represents the /template/template YANG schema element.
type Template_Template struct {
	Template	map[string]*Template_Template_Template	`path:"template" module:"template"`
}

// IsYANGGoStruct ensures that Template_Template implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Template_Template) IsYANGGoStruct() {}

// NewTemplate creates a new entry in the Template list of the
// Template_Template struct. The keys of the list are populated from the input
// arguments.
func (t *Template_Template) NewTemplate(Id string) (*Template_Template_Template, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Template == nil {
		t.Template = make(map[string]*Template_Template_Template)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Template[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Template", key)
	}

	t.Template[key] = &Template_Template_Template{
		Id: &Id,
	}

	return t.Template[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Template_Template) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Template_Template"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Template_Template) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Template_Template_Template represents the /template/template/template YANG schema element.
type Template_Template_Template struct {
	Description	*string	`path:"description" module:"template"`
	DisplayName	*string	`path:"display-name" module:"template"`
	Downlink	*uint32	`path:"downlink" module:"template"`
	Id	*string	`path:"id" module:"template"`
	Sd	*uint32	`path:"sd" module:"template"`
	Sst	*uint32	`path:"sst" module:"template"`
	TrafficClass	*string	`path:"traffic-class" module:"template"`
	Uplink	*uint32	`path:"uplink" module:"template"`
}

// IsYANGGoStruct ensures that Template_Template_Template implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Template_Template_Template) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Template_Template_Template struct, which is a YANG list entry.
func (t *Template_Template_Template) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Template_Template_Template) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Template_Template_Template"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Template_Template_Template) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// TrafficClass_TrafficClass represents the /traffic-class/traffic-class YANG schema element.
type TrafficClass_TrafficClass struct {
	TrafficClass	map[string]*TrafficClass_TrafficClass_TrafficClass	`path:"traffic-class" module:"traffic-class"`
}

// IsYANGGoStruct ensures that TrafficClass_TrafficClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TrafficClass_TrafficClass) IsYANGGoStruct() {}

// NewTrafficClass creates a new entry in the TrafficClass list of the
// TrafficClass_TrafficClass struct. The keys of the list are populated from the input
// arguments.
func (t *TrafficClass_TrafficClass) NewTrafficClass(Id string) (*TrafficClass_TrafficClass_TrafficClass, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrafficClass == nil {
		t.TrafficClass = make(map[string]*TrafficClass_TrafficClass_TrafficClass)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TrafficClass[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TrafficClass", key)
	}

	t.TrafficClass[key] = &TrafficClass_TrafficClass_TrafficClass{
		Id: &Id,
	}

	return t.TrafficClass[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TrafficClass_TrafficClass) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TrafficClass_TrafficClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TrafficClass_TrafficClass) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// TrafficClass_TrafficClass_TrafficClass represents the /traffic-class/traffic-class/traffic-class YANG schema element.
type TrafficClass_TrafficClass_TrafficClass struct {
	Description	*string	`path:"description" module:"traffic-class"`
	DisplayName	*string	`path:"display-name" module:"traffic-class"`
	Id	*string	`path:"id" module:"traffic-class"`
	Pdb	*uint32	`path:"pdb" module:"traffic-class"`
	Pelr	*uint32	`path:"pelr" module:"traffic-class"`
	Qci	*uint32	`path:"qci" module:"traffic-class"`
}

// IsYANGGoStruct ensures that TrafficClass_TrafficClass_TrafficClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TrafficClass_TrafficClass_TrafficClass) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the TrafficClass_TrafficClass_TrafficClass struct, which is a YANG list entry.
func (t *TrafficClass_TrafficClass_TrafficClass) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TrafficClass_TrafficClass_TrafficClass) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TrafficClass_TrafficClass_TrafficClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TrafficClass_TrafficClass_TrafficClass) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Upf_Upf represents the /upf/upf YANG schema element.
type Upf_Upf struct {
	Upf	map[string]*Upf_Upf_Upf	`path:"upf" module:"upf"`
}

// IsYANGGoStruct ensures that Upf_Upf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Upf_Upf) IsYANGGoStruct() {}

// NewUpf creates a new entry in the Upf list of the
// Upf_Upf struct. The keys of the list are populated from the input
// arguments.
func (t *Upf_Upf) NewUpf(Id string) (*Upf_Upf_Upf, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Upf == nil {
		t.Upf = make(map[string]*Upf_Upf_Upf)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Upf[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Upf", key)
	}

	t.Upf[key] = &Upf_Upf_Upf{
		Id: &Id,
	}

	return t.Upf[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Upf_Upf) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Upf_Upf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Upf_Upf) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Upf_Upf_Upf represents the /upf/upf/upf YANG schema element.
type Upf_Upf_Upf struct {
	Address	*string	`path:"address" module:"upf"`
	Description	*string	`path:"description" module:"upf"`
	DisplayName	*string	`path:"display-name" module:"upf"`
	Enterprise	*string	`path:"enterprise" module:"upf"`
	Id	*string	`path:"id" module:"upf"`
	Port	*uint32	`path:"port" module:"upf"`
}

// IsYANGGoStruct ensures that Upf_Upf_Upf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Upf_Upf_Upf) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Upf_Upf_Upf struct, which is a YANG list entry.
func (t *Upf_Upf_Upf) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Upf_Upf_Upf) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Upf_Upf_Upf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Upf_Upf_Upf) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Vcs_Vcs represents the /vcs/vcs YANG schema element.
type Vcs_Vcs struct {
	Vcs	map[string]*Vcs_Vcs_Vcs	`path:"vcs" module:"vcs"`
}

// IsYANGGoStruct ensures that Vcs_Vcs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Vcs_Vcs) IsYANGGoStruct() {}

// NewVcs creates a new entry in the Vcs list of the
// Vcs_Vcs struct. The keys of the list are populated from the input
// arguments.
func (t *Vcs_Vcs) NewVcs(Id string) (*Vcs_Vcs_Vcs, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vcs == nil {
		t.Vcs = make(map[string]*Vcs_Vcs_Vcs)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vcs[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vcs", key)
	}

	t.Vcs[key] = &Vcs_Vcs_Vcs{
		Id: &Id,
	}

	return t.Vcs[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Vcs_Vcs) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Vcs_Vcs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Vcs_Vcs) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Vcs_Vcs_Vcs represents the /vcs/vcs/vcs YANG schema element.
type Vcs_Vcs_Vcs struct {
	Ap	*string	`path:"ap" module:"vcs"`
	Application	map[string]*Vcs_Vcs_Vcs_Application	`path:"application" module:"vcs"`
	Description	*string	`path:"description" module:"vcs"`
	DeviceGroup	*string	`path:"device-group" module:"vcs"`
	DisplayName	*string	`path:"display-name" module:"vcs"`
	Downlink	*uint32	`path:"downlink" module:"vcs"`
	Id	*string	`path:"id" module:"vcs"`
	Sd	*uint32	`path:"sd" module:"vcs"`
	Sst	*uint32	`path:"sst" module:"vcs"`
	Template	*string	`path:"template" module:"vcs"`
	TrafficClass	*string	`path:"traffic-class" module:"vcs"`
	Upf	*string	`path:"upf" module:"vcs"`
	Uplink	*uint32	`path:"uplink" module:"vcs"`
}

// IsYANGGoStruct ensures that Vcs_Vcs_Vcs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Vcs_Vcs_Vcs) IsYANGGoStruct() {}

// NewApplication creates a new entry in the Application list of the
// Vcs_Vcs_Vcs struct. The keys of the list are populated from the input
// arguments.
func (t *Vcs_Vcs_Vcs) NewApplication(Application string) (*Vcs_Vcs_Vcs_Application, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[string]*Vcs_Vcs_Vcs_Application)
	}

	key := Application

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Application[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Application", key)
	}

	t.Application[key] = &Vcs_Vcs_Vcs_Application{
		Application: &Application,
	}

	return t.Application[key], nil
}

// ΛListKeyMap returns the keys of the Vcs_Vcs_Vcs struct, which is a YANG list entry.
func (t *Vcs_Vcs_Vcs) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Vcs_Vcs_Vcs) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Vcs_Vcs_Vcs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Vcs_Vcs_Vcs) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Vcs_Vcs_Vcs_Application represents the /vcs/vcs/vcs/application YANG schema element.
type Vcs_Vcs_Vcs_Application struct {
	Allow	*bool	`path:"allow" module:"vcs"`
	Application	*string	`path:"application" module:"vcs"`
}

// IsYANGGoStruct ensures that Vcs_Vcs_Vcs_Application implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Vcs_Vcs_Vcs_Application) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Vcs_Vcs_Vcs_Application struct, which is a YANG list entry.
func (t *Vcs_Vcs_Vcs_Application) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Application == nil {
		return nil, fmt.Errorf("nil value for key Application")
	}

	return map[string]interface{}{
		"application": *t.Application,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Vcs_Vcs_Vcs_Application) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Vcs_Vcs_Vcs_Application"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Vcs_Vcs_Vcs_Application) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }



var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0x6d, 0x73, 0xe2, 0xb8,
		0xb2, 0xfe, 0x3e, 0xbf, 0x42, 0x45, 0xd5, 0xd4, 0x81, 0x99, 0x98, 0x85, 0xbc, 0x2e, 0x7c, 0x49,
		0x71, 0x26, 0x99, 0x73, 0x53, 0x27, 0x93, 0x9b, 0xbb, 0x33, 0xb3, 0x55, 0xf7, 0x04, 0x36, 0xa5,
		0xd8, 0x82, 0xa8, 0xd6, 0xc8, 0xbe, 0x96, 0x48, 0x36, 0x9b, 0xf0, 0xdf, 0x6f, 0xf9, 0x05, 0x30,
		0x60, 0x63, 0x49, 0x36, 0x60, 0x48, 0x4f, 0xd5, 0x24, 0xc6, 0xa8, 0x15, 0x4b, 0xea, 0x7e, 0xba,
		0xd5, 0xea, 0x6e, 0xbf, 0x7e, 0x40, 0x08, 0xa1, 0xca, 0x0d, 0x1e, 0x92, 0x4a, 0x1b, 0x55, 0x2c,
		0xf2, 0x44, 0x4d, 0x52, 0x39, 0x08, 0xef, 0xfe, 0x9b, 0x32, 0xab, 0xd2, 0x46, 0xcd, 0xe8, 0xe3,
		0x17, 0x87, 0xf5, 0xe9, 0xa0, 0xd2, 0x46, 0x8d, 0xe8, 0xc6, 0x05, 0xf5, 0x2a, 0x6d, 0x14, 0x76,
		0x11, 0xdc, 0xc0, 0xae, 0x61, 0x53, 0x2e, 0xe6, 0x6e, 0xce, 0xf5, 0x3f, 0x69, 0x70, 0x30, 0xff,
		0xf5, 0x05, 0xe1, 0xa6, 0x47, 0x5d, 0x41, 0x1d, 0xe6, 0xb7, 0xfa, 0xf1, 0x48, 0x90, 0x70, 0x5c,
		0x64, 0x93, 0x27, 0x62, 0x23, 0xd3, 0x61, 0x02, 0x53, 0x46, 0xbc, 0x45, 0xaa, 0xf9, 0xc7, 0x9b,
		0xde, 0x5e, 0x7c, 0xcc, 0xe9, 0x17, 0xb7, 0x1e, 0xe9, 0xd3, 0xbf, 0x96, 0x1e, 0x6e, 0xe1, 0x01,
		0xed, 0x85, 0x3f, 0x13, 0x7c, 0xfd, 0xdd, 0x19, 0x79, 0x26, 0x49, 0x24, 0x0d, 0x1f, 0x85, 0xbc,
		0x3c, 0x3b, 0x9e, 0xff, 0x34, 0x15, 0x37, 0xfc, 0x2b, 0x07, 0xc9, 0x0d, 0xff, 0x0b, 0xf3, 0x8e,
		0x37, 0x18, 0x0d, 0x09, 0xf3, 0x67, 0x49, 0x78, 0x23, 0x92, 0xd2, 0x30, 0xd6, 0x2a, 0x78, 0xa8,
		0xa5, 0x56, 0xe3, 0xb9, 0x3b, 0xe3, 0xc5, 0x19, 0x5d, 0x58, 0x9a, 0xcc, 0x25, 0x92, 0x5c, 0xaa,
		0xb4, 0x25, 0xeb, 0x20, 0xbf, 0x31, 0x72, 0xfa, 0x88, 0xe1, 0x21, 0xb1, 0x50, 0x44, 0xcd, 0xeb,
		0x69, 0xf4, 0xc9, 0x8b, 0x97, 0xb9, 0x88, 0x32, 0x8b, 0x29, 0xb9, 0xa8, 0xb2, 0x8b, 0xab, 0xbc,
		0xc8, 0xca, 0x8b, 0x2d, 0xbf, 0xe8, 0xc9, 0x8b, 0x9f, 0xc2, 0x04, 0x99, 0xcc, 0x30, 0x63, 0x0a,
		0xd3, 0x24, 0x9c, 0x1b, 0xae, 0x43, 0x99, 0xe0, 0xd9, 0x13, 0x31, 0x9d, 0xd7, 0x39, 0xb2, 0x8c,
		0xb1, 0x2d, 0x30, 0xcc, 0x75, 0xc4, 0x2e, 0x61, 0x1f, 0x28, 0xe8, 0x03, 0x61, 0xcb, 0xf2, 0x08,
		0xe7, 0x24, 0xb3, 0xb3, 0xd5, 0xdc, 0x23, 0xcd, 0x45, 0x2a, 0xdc, 0xa4, 0xc8, 0x55, 0xaa, 0xdc,
		0xa5, 0xcd, 0x65, 0xda, 0xdc, 0xa6, 0xce, 0x75, 0xab, 0xb9, 0x2f, 0x83, 0x0b, 0xa5, 0xb9, 0x71,
		0xc6, 0x95, 0x21, 0x37, 0xc8, 0x4f, 0xdd, 0x74, 0x65, 0x22, 0x42, 0xc9, 0xf1, 0x2f, 0x42, 0x59,
		0x48, 0xbd, 0xc8, 0x9c, 0xb2, 0xbd, 0x45, 0xac, 0xd9, 0x90, 0x6c, 0x2e, 0xcb, 0xa2, 0x3a, 0xac,
		0xaa, 0xc9, 0xb2, 0xba, 0xac, 0x9b, 0x9b, 0x85, 0x73, 0xb3, 0xb2, 0x3e, 0x4b, 0xcb, 0xb1, 0xb6,
		0x24, 0x8b, 0x4f, 0x1f, 0xe3, 0xc7, 0x8b, 0x4b, 0xf4, 0x56, 0xea, 0xd1, 0xe1, 0x42, 0x65, 0xa9,
		0x26, 0x80, 0xd8, 0x52, 0xa0, 0x89, 0x9e, 0xee, 0x4e, 0x69, 0x6a, 0xd5, 0x58, 0x61, 0x6e, 0x4c,
		0xd4, 0x35, 0xd4, 0x24, 0x33, 0xef, 0x08, 0xf3, 0x8d, 0x54, 0x7f, 0xc4, 0x09, 0x23, 0x7f, 0x3a,
		0xce, 0x31, 0xf6, 0xa5, 0x39, 0xf8, 0x35, 0x47, 0x1f, 0xb7, 0x58, 0x08, 0xe2, 0x31, 0xed, 0xe9,
		0x98, 0x76, 0x54, 0xad, 0xde, 0x35, 0x8c, 0x56, 0xef, 0xed, 0xae, 0x69, 0xb4, 0x7a, 0xe1, 0x65,
		0x33, 0xf8, 0x15, 0x5e, 0x1f, 0xde, 0x35, 0x8c, 0xe3, 0xc9, 0xf5, 0xc9, 0x5d, 0xc3, 0x38, 0xe9,
		0xd5, 0xba, 0xdd, 0x7a, 0xed, 0xf5, 0x68, 0xac, 0x4e, 0x58, 0xfd, 0x78, 0xd7, 0xed, 0xba, 0xaf,
		0x37, 0x63, 0xff, 0xe7, 0xf5, 0xb8, 0xf7, 0xb9, 0x76, 0x5e, 0xd1, 0x7e, 0xfa, 0x9e, 0x16, 0xe5,
		0xf8, 0x60, 0x8b, 0xdc, 0x73, 0xba, 0x87, 0xdc, 0xd3, 0x7e, 0xf3, 0xd7, 0x18, 0x1b, 0xfd, 0x8e,
		0xf1, 0xb5, 0xf7, 0xda, 0x38, 0x38, 0x1e, 0xd7, 0xda, 0xb5, 0xea, 0xe2, 0xbd, 0x76, 0xed, 0xb5,
		0x71, 0x70, 0x32, 0xae, 0x56, 0x13, 0xbe, 0x39, 0x4f, 0xea, 0xa3, 0xf6, 0x56, 0xad, 0x56, 0x23,
		0xbe, 0x99, 0xe3, 0xa5, 0xbb, 0x46, 0xb3, 0x77, 0x1e, 0x5c, 0x86, 0x3f, 0xa7, 0xdc, 0x28, 0xd5,
		0xb8, 0x96, 0xc8, 0x83, 0x07, 0xb9, 0x45, 0xe8, 0x8f, 0x76, 0xef, 0x73, 0xbb, 0xf6, 0x7a, 0x3a,
		0x9e, 0x5c, 0x07, 0x3f, 0x6b, 0x6f, 0xd5, 0xfa, 0xa7, 0x6e, 0xb7, 0x5e, 0xff, 0x54, 0x0b, 0x07,
		0x14, 0xb5, 0xfb, 0x14, 0x7e, 0x7b, 0xde, 0x6e, 0x2f, 0xdd, 0xaa, 0x55, 0x3f, 0xd6, 0xb7, 0x21,
		0x16, 0x1f, 0xd6, 0xfb, 0x77, 0x14, 0xc5, 0x2e, 0x87, 0x7a, 0xb2, 0x9c, 0x21, 0xa6, 0xcc, 0xf0,
		0xf7, 0xaf, 0x79, 0xf4, 0x93, 0x86, 0x74, 0x55, 0xae, 0x09, 0x1b, 0x88, 0xc7, 0x6d, 0x68, 0xa8,
		0x6f, 0x94, 0x29, 0xdb, 0x77, 0x39, 0x4d, 0xde, 0xd4, 0x6e, 0x7e, 0xc7, 0xf6, 0x88, 0x64, 0xef,
		0xea, 0x32, 0xfb, 0xf9, 0xea, 0x61, 0xd3, 0x37, 0xe6, 0x2f, 0xe8, 0x80, 0x06, 0xdb, 0xd9, 0x86,
		0x76, 0x7f, 0xe3, 0x1c, 0x50, 0xf9, 0x0d, 0xff, 0x55, 0xba, 0xa9, 0x3d, 0x3c, 0x39, 0x2a, 0xd1,
		0xe4, 0x6e, 0x0a, 0x70, 0x34, 0x24, 0x32, 0xaf, 0x9e, 0xab, 0xf8, 0x98, 0x8d, 0x8d, 0xbf, 0x3b,
		0xc6, 0x7f, 0x1a, 0x46, 0xeb, 0xbe, 0x17, 0xfb, 0xd0, 0xed, 0x1a, 0xf7, 0x3d, 0x5f, 0xab, 0x9d,
		0x36, 0xc7, 0xb5, 0xf3, 0xd9, 0xfd, 0x9e, 0xaf, 0x8f, 0x3e, 0xe9, 0x50, 0x9d, 0xd7, 0xde, 0xba,
		0xdd, 0x7a, 0x65, 0xdd, 0x48, 0xfc, 0xa1, 0xd8, 0x7e, 0xb3, 0xfb, 0x93, 0x90, 0xbe, 0x0a, 0x61,
		0xf8, 0xc1, 0x26, 0xea, 0x3e, 0x82, 0x88, 0x4e, 0xcf, 0x45, 0x70, 0x19, 0x10, 0x23, 0xf1, 0x48,
		0xb9, 0x96, 0x8f, 0xe0, 0x82, 0xf4, 0xf1, 0xc8, 0x0e, 0x76, 0xa7, 0xfe, 0xe6, 0x16, 0x5c, 0x0b,
		0xe0, 0x5a, 0xd8, 0x9c, 0x6b, 0xe1, 0xc1, 0x71, 0x6c, 0x82, 0x99, 0x8e, 0x77, 0xa1, 0xb9, 0x41,
		0xc1, 0x16, 0xd8, 0x54, 0x97, 0x6a, 0x9f, 0x48, 0x4f, 0xa4, 0xfd, 0xf9, 0x44, 0x1d, 0xdb, 0x76,
		0x4c, 0xec, 0xdf, 0x42, 0x5f, 0x1c, 0x0b, 0xe4, 0x12, 0xe4, 0x72, 0x83, 0x72, 0x29, 0xcf, 0xbb,
		0x71, 0xa6, 0x3b, 0x53, 0x20, 0xf9, 0x0d, 0xb3, 0xc1, 0x46, 0x3c, 0x7e, 0x79, 0x76, 0x15, 0x39,
		0x4d, 0xde, 0xa9, 0xa9, 0xab, 0x4b, 0x5f, 0x80, 0x81, 0xab, 0xb1, 0x6b, 0xc8, 0xb5, 0x5b, 0x28,
		0x6a, 0xca, 0x5a, 0xd1, 0xbf, 0x2d, 0xce, 0x5c, 0xd9, 0x2d, 0xd2, 0x5c, 0x27, 0x5f, 0xff, 0x26,
		0x2f, 0xf2, 0xc7, 0x53, 0xc1, 0x09, 0x69, 0x47, 0x08, 0xc9, 0xc3, 0xb2, 0x6f, 0x94, 0x5d, 0xda,
		0xc4, 0x07, 0x40, 0x2e, 0xc7, 0x09, 0x3e, 0xc7, 0xc5, 0x28, 0x9a, 0xbf, 0x1e, 0x1f, 0x9f, 0x9e,
		0x1d, 0x1f, 0x37, 0xce, 0x8e, 0xce, 0x1a, 0xad, 0x93, 0x93, 0xe6, 0x69, 0xf3, 0x44, 0xa2, 0x93,
		0xff, 0xf6, 0x2c, 0xe2, 0x11, 0xeb, 0x9f, 0xfe, 0xc0, 0xd8, 0xc8, 0xb6, 0x73, 0xcd, 0x4f, 0x87,
		0x31, 0x47, 0xe0, 0x48, 0x23, 0x4b, 0x8c, 0x99, 0x9b, 0x8f, 0x64, 0x88, 0x5d, 0x1c, 0xb8, 0x4e,
		0x2a, 0xbf, 0x44, 0x31, 0x07, 0xcb, 0xbf, 0x15, 0x8e, 0xa9, 0xc3, 0x7e, 0x85, 0x37, 0x32, 0x05,
		0x8b, 0x70, 0xb9, 0xe3, 0xfa, 0x2b, 0x71, 0xbf, 0xf0, 0x2b, 0xe8, 0xf3, 0x36, 0xec, 0xf2, 0x83,
		0x1e, 0xcb, 0xac, 0x98, 0x8e, 0x8a, 0x35, 0x67, 0x9d, 0x48, 0x9e, 0xc7, 0xc7, 0x89, 0xd4, 0x4e,
		0xe3, 0x63, 0x94, 0xc8, 0xe9, 0x47, 0x1b, 0x9b, 0x95, 0x01, 0x20, 0x8a, 0xd8, 0x03, 0x47, 0xf1,
		0xeb, 0x31, 0x62, 0xf2, 0x01, 0x92, 0xb4, 0xb1, 0x32, 0x9d, 0x69, 0x2e, 0x3c, 0xca, 0x06, 0x32,
		0x93, 0xad, 0xe0, 0x0f, 0x55, 0xf5, 0x7f, 0x2a, 0x18, 0x57, 0x3a, 0x96, 0x88, 0xa6, 0x3a, 0xd5,
		0xf5, 0x5f, 0xe6, 0xd1, 0x9b, 0x0a, 0x96, 0x86, 0x96, 0x85, 0x91, 0x7b, 0x2a, 0x1a, 0x8d, 0x0d,
		0x4e, 0x46, 0x41, 0x4a, 0xbe, 0xb7, 0x0e, 0x3c, 0xa7, 0xdc, 0xb5, 0xf1, 0x8b, 0x11, 0x29, 0x15,
		0x59, 0x40, 0x8f, 0x53, 0x29, 0x22, 0x7a, 0x48, 0x1a, 0x84, 0xe3, 0x21, 0xe1, 0xa0, 0x11, 0x27,
		0x88, 0x32, 0xf4, 0xaf, 0x9f, 0x57, 0xc8, 0xf1, 0xd0, 0x97, 0xeb, 0x2b, 0xc0, 0x75, 0xc0, 0x75,
		0xc0, 0x75, 0xc0, 0x75, 0xad, 0xa9, 0xf8, 0x15, 0x60, 0x1d, 0x85, 0xa7, 0x0f, 0x82, 0x78, 0xae,
		0x47, 0xb9, 0x02, 0xa8, 0xc7, 0x68, 0x54, 0x43, 0x66, 0xd9, 0x9f, 0x3e, 0x94, 0xcf, 0x3a, 0x40,
		0xe2, 0x11, 0x0b, 0xe4, 0x3c, 0x33, 0x1e, 0x9a, 0xec, 0xe1, 0xae, 0x04, 0x05, 0xdb, 0x12, 0x74,
		0x0d, 0xc6, 0x3b, 0x80, 0xfc, 0xdc, 0x4c, 0xdb, 0x04, 0xf7, 0x3d, 0xd2, 0x57, 0x41, 0x79, 0x09,
		0xf7, 0x62, 0xe5, 0x76, 0xb2, 0x01, 0x27, 0x4c, 0xb4, 0x67, 0xcc, 0x99, 0xf4, 0x91, 0x5a, 0xeb,
		0xd8, 0x2c, 0x53, 0x4b, 0x5e, 0xfa, 0xa8, 0xa5, 0x28, 0x75, 0x57, 0x17, 0xa8, 0xef, 0x78, 0x73,
		0x5b, 0xe2, 0x3a, 0x88, 0x15, 0x88, 0xd5, 0x52, 0xa6, 0x8c, 0x91, 0xc9, 0x5a, 0x60, 0x3f, 0x81,
		0xfd, 0x14, 0x4e, 0xc5, 0xd1, 0xe1, 0x3b, 0xb2, 0x9f, 0x94, 0x72, 0x95, 0x22, 0x1f, 0x79, 0xaa,
		0x2c, 0xc9, 0xb9, 0xc5, 0xe5, 0xdd, 0xe1, 0xb9, 0xdc, 0xe0, 0x72, 0xee, 0xef, 0xb4, 0xa1, 0x4a,
		0xba, 0xbb, 0x25, 0xdd, 0xdc, 0xab, 0x32, 0xdc, 0xb2, 0x1d, 0xda, 0xc9, 0xa8, 0x3a, 0x56, 0xcc,
		0x3a, 0xcc, 0x18, 0x51, 0xc6, 0x48, 0x92, 0x12, 0x2f, 0x57, 0x3c, 0xf9, 0xfc, 0x23, 0xcf, 0x1e,
		0x2c, 0xf6, 0x50, 0x15, 0xec, 0xba, 0x36, 0x35, 0x93, 0x9f, 0x28, 0x86, 0xdf, 0xb3, 0x46, 0x25,
		0x4e, 0x4c, 0x75, 0xcb, 0x98, 0x98, 0xea, 0x16, 0x98, 0x98, 0x9a, 0xbe, 0x54, 0x0a, 0x4b, 0x96,
		0xbe, 0x79, 0x8a, 0xf2, 0x0d, 0x67, 0x94, 0xbc, 0x1c, 0xb9, 0xa9, 0xee, 0x2e, 0xe6, 0xa6, 0xba,
		0x1b, 0xcb, 0x4d, 0x2d, 0xc5, 0x49, 0x58, 0x16, 0xb7, 0x95, 0xcc, 0xf2, 0x77, 0xf7, 0xd1, 0xf2,
		0x77, 0xc1, 0x6b, 0x0a, 0x56, 0xff, 0x4e, 0x5b, 0xfd, 0x70, 0x1a, 0x36, 0xc1, 0x74, 0x38, 0x0d,
		0x03, 0x5c, 0x07, 0x5c, 0x07, 0x5c, 0xdf, 0x0f, 0x5c, 0x87, 0xd3, 0xb0, 0x70, 0x58, 0x84, 0x59,
		0x61, 0x1a, 0x8c, 0xc2, 0x59, 0x98, 0x25, 0x93, 0x38, 0x53, 0x92, 0x7a, 0x2f, 0x00, 0xbf, 0x3a,
		0xf0, 0xbb, 0x43, 0xf5, 0x5e, 0x82, 0xdd, 0xde, 0x84, 0x27, 0xeb, 0xe8, 0x92, 0x8a, 0x47, 0xe2,
		0x21, 0x8c, 0x1e, 0x1d, 0x1e, 0xf8, 0xa0, 0x0e, 0x10, 0x66, 0x16, 0xba, 0xba, 0x3d, 0xf0, 0xad,
		0x06, 0x8c, 0xf8, 0xe8, 0x81, 0x91, 0xcc, 0xd3, 0x20, 0x4d, 0x94, 0xd9, 0x74, 0x9a, 0x88, 0xfb,
		0x1e, 0xd3, 0x44, 0x5c, 0xa8, 0x0c, 0xb3, 0xe2, 0xe9, 0xa0, 0x32, 0x4c, 0xd1, 0x23, 0x4e, 0x18,
		0x39, 0x54, 0x86, 0x81, 0xca, 0x30, 0x39, 0xb8, 0x07, 0x2a, 0xc3, 0x40, 0x65, 0x18, 0xa8, 0x0c,
		0xb3, 0x5e, 0xf5, 0x04, 0x95, 0x61, 0x72, 0x02, 0x0b, 0x54, 0x86, 0xc9, 0xed, 0xa3, 0x58, 0xf7,
		0xd4, 0x42, 0x65, 0x98, 0x0d, 0xe9, 0x39, 0xa8, 0x0c, 0x53, 0x40, 0x7f, 0x32, 0x05, 0x24, 0xa4,
		0x0e, 0x17, 0x96, 0xb0, 0x5e, 0x01, 0xe4, 0x17, 0x1d, 0x09, 0x7e, 0x17, 0x4b, 0x5e, 0x04, 0x70,
		0x0e, 0x80, 0x73, 0x60, 0x73, 0xce, 0x01, 0xe9, 0x83, 0x8b, 0x65, 0xe3, 0x64, 0x83, 0x92, 0xe9,
		0x3a, 0x9e, 0x30, 0x08, 0xb3, 0xd4, 0xa5, 0x73, 0x4a, 0xa9, 0x27, 0xa1, 0xd7, 0x98, 0x0b, 0xe4,
		0xf7, 0x81, 0x28, 0x43, 0x5e, 0x50, 0x0d, 0x03, 0xc4, 0x13, 0xc4, 0x73, 0x63, 0xe2, 0x39, 0xa2,
		0x4c, 0x1c, 0x1d, 0x42, 0x95, 0x17, 0xa8, 0xf2, 0xb2, 0xc5, 0x29, 0x3b, 0x3e, 0x6c, 0x1d, 0xb7,
		0x4e, 0xcf, 0x0e, 0x5b, 0x27, 0x50, 0xe7, 0x25, 0xb7, 0x16, 0xe3, 0x02, 0x7b, 0x42, 0x53, 0x8f,
		0x85, 0xb4, 0x7a, 0x9a, 0xec, 0x2b, 0xf5, 0x40, 0x95, 0x81, 0x2a, 0x03, 0x55, 0x06, 0xaa, 0x0c,
		0x54, 0x19, 0xa8, 0xb2, 0xbc, 0xaa, 0xcc, 0x73, 0x84, 0x63, 0x3a, 0xb6, 0x86, 0x22, 0x9b, 0x50,
		0x82, 0xcb, 0x04, 0x14, 0xd9, 0x4e, 0x2a, 0x32, 0x45, 0x0e, 0x46, 0x9a, 0x27, 0x3a, 0xf1, 0x9a,
		0xcf, 0x3f, 0xbe, 0xdc, 0xaa, 0xfc, 0x35, 0xcd, 0x33, 0xa0, 0x1d, 0x55, 0x83, 0x47, 0xa0, 0x06,
		0x77, 0x69, 0xca, 0xd6, 0xa5, 0xfd, 0x14, 0xe4, 0x43, 0xf7, 0x44, 0xc6, 0x97, 0xc3, 0xb7, 0x9f,
		0x17, 0xb7, 0x95, 0xdd, 0x2c, 0x23, 0x2a, 0x93, 0x06, 0x01, 0x35, 0x44, 0xb3, 0xfe, 0xf8, 0x52,
		0x4a, 0xf2, 0x34, 0xd5, 0x2f, 0xf5, 0x5a, 0xc1, 0x4e, 0x59, 0xca, 0x5f, 0x9e, 0xf6, 0x72, 0x9f,
		0x76, 0x7d, 0x39, 0xe9, 0xfd, 0x1d, 0x94, 0x2b, 0x9a, 0x0d, 0xbb, 0x8e, 0xbe, 0xe1, 0x17, 0xf4,
		0x40, 0x10, 0x27, 0xc2, 0x27, 0xba, 0x71, 0x18, 0x41, 0xd4, 0x37, 0x0c, 0x49, 0x3c, 0xfd, 0x12,
		0x51, 0x8e, 0x06, 0xb6, 0xf3, 0x80, 0x6d, 0xbf, 0x11, 0xb6, 0x6d, 0x74, 0x39, 0xed, 0x9d, 0xd7,
		0x21, 0x89, 0x07, 0x92, 0x78, 0xa0, 0xda, 0x51, 0x81, 0xd5, 0x8e, 0x66, 0xe2, 0x09, 0xa2, 0x05,
		0xa2, 0x95, 0x58, 0x7e, 0x01, 0xaa, 0x1e, 0x65, 0x18, 0xe7, 0x90, 0x27, 0x07, 0x55, 0x8f, 0xb2,
		0x56, 0x08, 0xaa, 0x1e, 0x15, 0x61, 0x98, 0xab, 0x54, 0x40, 0xca, 0xb4, 0xc3, 0xb7, 0x54, 0x10,
		0x49, 0x76, 0x60, 0x72, 0x03, 0x92, 0x29, 0x91, 0x64, 0x3a, 0x8c, 0x11, 0x53, 0xd0, 0x27, 0x2a,
		0x5e, 0x0c, 0x4e, 0xbc, 0x27, 0x9a, 0xa0, 0x1c, 0xa7, 0xc8, 0x9f, 0xd8, 0xba, 0xb4, 0x45, 0x93,
		0x4c, 0x5e, 0xbe, 0x9a, 0x49, 0x26, 0x2f, 0xac, 0x64, 0x92, 0xd4, 0xd2, 0xe9, 0x2c, 0x61, 0xfa,
		0x96, 0x2e, 0x2c, 0xa2, 0x14, 0xef, 0x02, 0x45, 0x5d, 0x94, 0xa2, 0x9a, 0x92, 0xc9, 0x77, 0xaf,
		0x98, 0x92, 0xc9, 0x37, 0x56, 0x4b, 0xc9, 0x74, 0x3c, 0x62, 0x9c, 0x0c, 0x0c, 0xf5, 0x44, 0xed,
		0x25, 0x4a, 0xb5, 0x6d, 0xc5, 0xc8, 0xb3, 0xc3, 0x63, 0x1e, 0x82, 0x4e, 0x06, 0xc8, 0xef, 0x6c,
		0x17, 0x36, 0x14, 0x26, 0xdf, 0xbf, 0xfd, 0x84, 0xc9, 0xcb, 0xb7, 0x9d, 0x18, 0x79, 0x54, 0x69,
		0x0f, 0xb1, 0x9f, 0xef, 0xdb, 0x49, 0x02, 0x55, 0x90, 0x12, 0x90, 0x12, 0x28, 0x4a, 0x03, 0x9b,
		0x6d, 0x9d, 0xa9, 0x80, 0x62, 0x63, 0x11, 0xb4, 0x43, 0xb1, 0x31, 0x40, 0x75, 0x40, 0x75, 0x40,
		0xf5, 0x7d, 0x40, 0x75, 0x28, 0x35, 0x16, 0x0e, 0xeb, 0x91, 0x73, 0x8d, 0x5d, 0xec, 0x1c, 0x95,
		0xf6, 0x0e, 0xf6, 0x91, 0x73, 0xb0, 0xcf, 0x01, 0xc9, 0x4b, 0xb8, 0x8b, 0xdd, 0xd8, 0xd1, 0x70,
		0xd2, 0x5e, 0xb5, 0x0e, 0xc2, 0x00, 0xc2, 0xb0, 0xca, 0xc9, 0x0c, 0x47, 0xc5, 0x60, 0xe7, 0xc8,
		0x4e, 0xc5, 0xbb, 0x3a, 0x2a, 0x5e, 0x81, 0xe8, 0xae, 0xe9, 0xf5, 0x35, 0x0c, 0x9d, 0x79, 0x32,
		0x6d, 0x4b, 0xc7, 0xef, 0x06, 0x4c, 0x1d, 0x40, 0xf7, 0x12, 0x9a, 0x3a, 0xdc, 0x1d, 0x3c, 0x9b,
		0x1a, 0x92, 0xb1, 0x40, 0xa7, 0x2d, 0x1a, 0x41, 0x3f, 0x20, 0x1b, 0x20, 0x1b, 0xdb, 0x92, 0x0d,
		0x88, 0x2f, 0x2a, 0x34, 0xbe, 0x28, 0xc9, 0x60, 0x95, 0xbf, 0x29, 0x1f, 0x7a, 0xf4, 0x25, 0x46,
		0xfd, 0x3d, 0x24, 0xbe, 0x97, 0xbc, 0xb7, 0x95, 0x90, 0xa4, 0x3c, 0x53, 0xa0, 0x37, 0x74, 0x99,
		0xa0, 0x25, 0x8b, 0x04, 0x1b, 0x8a, 0x81, 0xe7, 0x8c, 0xdc, 0xf4, 0x60, 0xa5, 0xb9, 0x56, 0xa5,
		0x0d, 0x52, 0xb2, 0x06, 0xe5, 0x0b, 0x52, 0xb2, 0x06, 0x85, 0x05, 0x29, 0xad, 0x5c, 0x2a, 0x95,
		0x25, 0x4b, 0x5b, 0xba, 0x49, 0x50, 0x52, 0x48, 0x8a, 0x02, 0xd2, 0x52, 0x04, 0x23, 0x59, 0x83,
		0xdd, 0x0b, 0x46, 0x4a, 0x5a, 0x78, 0x3d, 0x95, 0x93, 0xfd, 0x62, 0x37, 0x38, 0x97, 0xd3, 0x30,
		0xe3, 0xac, 0xc1, 0xfe, 0x99, 0x71, 0xab, 0x98, 0x6e, 0x5b, 0x66, 0x1c, 0x9c, 0xcb, 0x81, 0xbf,
		0x4a, 0x61, 0x2a, 0xe0, 0x5c, 0x6e, 0xc3, 0x27, 0x10, 0x71, 0x6d, 0x5f, 0x07, 0xe0, 0x06, 0xe0,
		0x4e, 0xb2, 0x20, 0xe1, 0xc4, 0x01, 0x10, 0x1c, 0x4e, 0x1c, 0x14, 0x11, 0x7c, 0xc8, 0x29, 0x57,
		0x00, 0xf1, 0xa0, 0xb9, 0x6a, 0x65, 0x80, 0x70, 0xc7, 0xe6, 0xd3, 0x86, 0xb5, 0x0b, 0x79, 0x58,
		0x1a, 0xc0, 0x74, 0x86, 0x93, 0x42, 0x01, 0x94, 0x47, 0xd8, 0x8e, 0xae, 0xc4, 0x3f, 0x38, 0xc2,
		0xa6, 0x49, 0x5c, 0x81, 0x1f, 0x6c, 0xe2, 0xab, 0x80, 0x2e, 0xc3, 0x21, 0x9d, 0x6f, 0xc6, 0x5b,
		0x64, 0x40, 0x18, 0xf1, 0xb0, 0x08, 0x3e, 0x3d, 0x10, 0xca, 0x06, 0x08, 0x23, 0x4e, 0xd9, 0xc0,
		0x26, 0x42, 0xfa, 0x8d, 0xcd, 0x4d, 0xd0, 0x0d, 0xbb, 0xa6, 0x1b, 0xa4, 0x5f, 0x2c, 0xe7, 0xf3,
		0x99, 0x11, 0xf0, 0x8b, 0xd1, 0xf7, 0x9c, 0xa1, 0x7a, 0x95, 0xb3, 0xc5, 0x0e, 0xf6, 0xa0, 0x40,
		0x99, 0x35, 0x78, 0x7f, 0xf5, 0xc9, 0x64, 0x58, 0x52, 0x11, 0xa2, 0x37, 0x52, 0x67, 0xf3, 0xf4,
		0x58, 0xa3, 0x38, 0xd9, 0xaf, 0x50, 0x67, 0x33, 0x59, 0xd1, 0x43, 0x9d, 0x4d, 0x75, 0x33, 0x51,
		0xab, 0xb0, 0xd3, 0xda, 0x66, 0x71, 0x0f, 0x2a, 0x6e, 0xc6, 0x34, 0x8a, 0x70, 0x72, 0x29, 0x24,
		0xe1, 0x80, 0x3a, 0x02, 0x75, 0x04, 0xea, 0x08, 0xd4, 0x11, 0xa8, 0x23, 0x50, 0x47, 0x9a, 0xea,
		0x68, 0xfd, 0xef, 0xca, 0x02, 0xe5, 0x03, 0xca, 0x27, 0xaf, 0xf2, 0x29, 0xc1, 0xdb, 0xad, 0xa0,
		0x70, 0x6b, 0xac, 0x93, 0x32, 0x15, 0x6e, 0x8d, 0xbb, 0xfd, 0x57, 0x7c, 0x90, 0x71, 0x57, 0xa2,
		0xe5, 0xd0, 0xa5, 0x8b, 0xa0, 0x8f, 0x7f, 0xf9, 0x5d, 0xdc, 0xa7, 0x5d, 0x5f, 0x05, 0x5d, 0xaf,
		0xc3, 0x23, 0xeb, 0x1a, 0xe1, 0x1b, 0x68, 0x15, 0xbc, 0xb2, 0x53, 0x12, 0xbd, 0x9a, 0xad, 0x53,
		0x7a, 0xc4, 0x89, 0x10, 0x94, 0x0d, 0x22, 0x07, 0xad, 0x45, 0x04, 0xf1, 0x86, 0x94, 0x91, 0x30,
		0x3c, 0xdc, 0x71, 0x82, 0x78, 0xd8, 0xab, 0x5b, 0x14, 0xbd, 0x84, 0x9a, 0xf0, 0x83, 0x2e, 0xc3,
		0x1c, 0x3d, 0x13, 0xdb, 0x46, 0x98, 0x07, 0xad, 0xa2, 0x8e, 0x3c, 0xc2, 0x1d, 0xfb, 0x89, 0x78,
		0xb1, 0x1e, 0x83, 0x10, 0x0c, 0x38, 0xbb, 0x83, 0xb3, 0xbb, 0x4d, 0x95, 0x6c, 0xa5, 0xae, 0xd5,
		0x9e, 0xb2, 0x76, 0xd2, 0xa7, 0xb5, 0x14, 0x6c, 0xe5, 0x54, 0x28, 0x04, 0x38, 0x05, 0xad, 0xf5,
		0xa4, 0x56, 0x86, 0x14, 0xc4, 0x09, 0xc4, 0xa9, 0x28, 0x71, 0xe2, 0xa2, 0xed, 0xb3, 0x5c, 0xfc,
		0x77, 0x0e, 0x09, 0x82, 0x80, 0xf6, 0x42, 0x03, 0xda, 0xe5, 0x0c, 0x22, 0xf9, 0xc0, 0x75, 0x09,
		0x13, 0x68, 0x2b, 0x01, 0xea, 0x2a, 0x43, 0x93, 0x1b, 0x92, 0x42, 0x00, 0xfa, 0xd0, 0xb1, 0x88,
		0x6d, 0xd8, 0x94, 0x8b, 0xcc, 0x28, 0xf4, 0x58, 0xd3, 0xf2, 0x86, 0xa2, 0x0f, 0xed, 0x12, 0xc6,
		0xa2, 0x0f, 0xed, 0xa2, 0x83, 0xd1, 0x57, 0x2c, 0x9b, 0xf2, 0xf2, 0xa5, 0x2b, 0xe5, 0x78, 0x58,
		0x7a, 0x8c, 0xbe, 0x1c, 0xb1, 0xe9, 0x43, 0x7b, 0x07, 0x83, 0xd3, 0x93, 0x38, 0x41, 0x4f, 0x7f,
		0x64, 0x47, 0xa7, 0x6f, 0xbf, 0x20, 0xa0, 0x2c, 0xe7, 0x95, 0xcb, 0xb6, 0x1b, 0xda, 0x7b, 0x68,
		0xdc, 0xad, 0x62, 0xbc, 0x6d, 0x59, 0x77, 0x10, 0xa1, 0x2e, 0x71, 0x52, 0x00, 0xf1, 0x8d, 0x50,
		0x0f, 0x70, 0x11, 0xd9, 0x21, 0xef, 0x08, 0x70, 0x1d, 0x70, 0x1d, 0x70, 0x7d, 0x3f, 0x70, 0x1d,
		0x32, 0x8f, 0xa2, 0x53, 0x92, 0xcd, 0x66, 0x1e, 0xc5, 0xcc, 0xf2, 0x3a, 0xe0, 0x37, 0xe0, 0xf7,
		0x0a, 0x87, 0x01, 0x64, 0x21, 0x01, 0x9a, 0xcb, 0x4e, 0x05, 0x64, 0x21, 0x85, 0xc3, 0x12, 0xd8,
		0x94, 0x87, 0x73, 0xbf, 0xf1, 0x2e, 0x64, 0xf9, 0x00, 0x04, 0x6b, 0x41, 0xb0, 0x74, 0x9e, 0x0f,
		0xb6, 0x6d, 0xe7, 0x99, 0x58, 0xea, 0x81, 0x6c, 0x13, 0x42, 0xc9, 0xf1, 0x2f, 0x18, 0x07, 0x1d,
		0x9f, 0xda, 0xdf, 0xca, 0x59, 0x94, 0x07, 0x3d, 0x85, 0x76, 0xc2, 0x68, 0xba, 0xd9, 0x0b, 0x3e,
		0x0a, 0x6c, 0xce, 0x7d, 0x56, 0xf5, 0xee, 0xc5, 0xfe, 0xfa, 0xf4, 0x45, 0xf2, 0xfe, 0x9a, 0xed,
		0x45, 0x00, 0xde, 0xd0, 0x7e, 0x87, 0x11, 0x78, 0x32, 0x92, 0xa3, 0x88, 0xd5, 0x6b, 0x0f, 0xc1,
		0x7b, 0x70, 0x1c, 0x9b, 0x60, 0xa6, 0x13, 0x83, 0xd7, 0xdc, 0x60, 0x3c, 0xab, 0x8c, 0xfa, 0xd0,
		0x50, 0x23, 0x69, 0x08, 0xe0, 0xcf, 0x27, 0xf2, 0x61, 0x20, 0x7a, 0x4b, 0xf5, 0x17, 0xc7, 0x02,
		0xb9, 0x04, 0xb9, 0xdc, 0xa0, 0x5c, 0xca, 0xf3, 0x6e, 0x9c, 0xe9, 0xce, 0x20, 0x29, 0x23, 0xd9,
		0x0c, 0x87, 0xa4, 0x0c, 0xe5, 0x29, 0x6b, 0x45, 0xff, 0x20, 0x11, 0x63, 0x3d, 0x56, 0x70, 0x14,
		0xf1, 0x24, 0xb1, 0xd7, 0x81, 0xd8, 0xf1, 0xac, 0x3f, 0x9e, 0x1c, 0x42, 0x34, 0x33, 0xc5, 0xa5,
		0xee, 0xc8, 0x41, 0x6e, 0x62, 0xc8, 0xd1, 0x37, 0xbf, 0x17, 0x7f, 0x99, 0xee, 0xb3, 0x3e, 0xff,
		0xc0, 0x26, 0x04, 0xd4, 0x69, 0x72, 0xcf, 0x7a, 0x02, 0xea, 0xd4, 0xb8, 0x44, 0x35, 0xbe, 0x4e,
		0x9a, 0x33, 0xb6, 0x19, 0x6b, 0xa7, 0x38, 0x60, 0xb5, 0x81, 0xca, 0x44, 0xdf, 0x11, 0x26, 0x88,
		0x17, 0x54, 0x8a, 0x49, 0x0f, 0xbb, 0x8b, 0xb5, 0x29, 0x6d, 0xbc, 0x1d, 0x49, 0xac, 0x40, 0xbe,
		0xe5, 0x78, 0x3b, 0xff, 0x57, 0x51, 0xf1, 0x76, 0x2b, 0x16, 0x4a, 0x7e, 0xc1, 0xd2, 0x16, 0x6e,
		0x12, 0x61, 0x37, 0x23, 0x2c, 0x45, 0x68, 0x1d, 0x59, 0x59, 0x56, 0xbe, 0xa4, 0xa1, 0x75, 0x89,
		0x8b, 0xae, 0xa7, 0x49, 0x24, 0xde, 0x42, 0xad, 0xf0, 0xda, 0xf2, 0xa5, 0xe9, 0x55, 0x2c, 0xbf,
		0x5d, 0x1a, 0xef, 0x2f, 0x61, 0x62, 0xff, 0xbc, 0xbf, 0x2b, 0xd9, 0x66, 0xc3, 0xde, 0x5f, 0x2d,
		0xb6, 0x2a, 0x82, 0xbd, 0xd2, 0xf1, 0x29, 0x4c, 0xcb, 0x49, 0x7c, 0x5b, 0x3e, 0x7a, 0x7e, 0x24,
		0x1e, 0xf1, 0xbf, 0xeb, 0xd3, 0xc1, 0xc8, 0x0b, 0xfd, 0x46, 0xfc, 0xd1, 0x19, 0xd9, 0x16, 0x7a,
		0x20, 0xc8, 0x1d, 0xf1, 0x47, 0x62, 0xcd, 0x0e, 0x9d, 0x67, 0x18, 0xf7, 0x8f, 0x89, 0xeb, 0x98,
		0xef, 0x83, 0x87, 0x49, 0x4e, 0x2a, 0xf6, 0xcc, 0xc3, 0x24, 0x25, 0x35, 0x65, 0xf3, 0x30, 0xc9,
		0x27, 0x13, 0x2d, 0xc1, 0xae, 0x8a, 0x9b, 0x69, 0x9a, 0x5c, 0x64, 0xf2, 0x76, 0xf2, 0xbb, 0x07,
		0xd2, 0xef, 0x67, 0x25, 0x1f, 0x15, 0xeb, 0x63, 0x26, 0x0c, 0x3f, 0xd8, 0x3a, 0xa7, 0x4d, 0x13,
		0xc2, 0xa2, 0x4e, 0x9b, 0x02, 0xac, 0x08, 0xd2, 0x69, 0x75, 0xdf, 0x23, 0xbf, 0xcf, 0x67, 0x4b,
		0x80, 0x30, 0x70, 0xb6, 0xb4, 0x59, 0x17, 0x9d, 0x8e, 0x85, 0x0a, 0x3e, 0x3b, 0x45, 0x9f, 0xdd,
		0xcc, 0x20, 0x4a, 0xb9, 0xd4, 0x34, 0xe4, 0x16, 0x9c, 0x15, 0x97, 0xd3, 0x0e, 0xef, 0x93, 0x2f,
		0xa5, 0xdf, 0xd3, 0x23, 0xe1, 0xb0, 0x3b, 0x28, 0x75, 0x3a, 0x52, 0xe6, 0xfe, 0x5c, 0x51, 0x1d,
		0xc0, 0x76, 0xab, 0x8c, 0xdb, 0x2d, 0x88, 0x57, 0x2f, 0xf0, 0x90, 0x0c, 0x22, 0x1c, 0x13, 0xa6,
		0x02, 0xf2, 0x90, 0x22, 0x48, 0x87, 0x3c, 0x24, 0xc0, 0x75, 0xc0, 0x75, 0xc0, 0xf5, 0xfd, 0xc0,
		0x75, 0xc8, 0x43, 0x0a, 0x87, 0xb5, 0xb1, 0x3c, 0xa4, 0x99, 0x3d, 0x5e, 0x07, 0xe0, 0x06, 0xe0,
		0x4e, 0x3a, 0x48, 0x85, 0xcc, 0x23, 0xc0, 0x6f, 0xd9, 0xa9, 0x78, 0x57, 0x99, 0x47, 0x10, 0x1a,
		0x55, 0x68, 0x68, 0x54, 0x96, 0x33, 0x4e, 0x3e, 0x0a, 0x2a, 0xcb, 0xdf, 0xb6, 0x95, 0xb0, 0x27,
		0xd9, 0x31, 0xc9, 0x8c, 0x45, 0x26, 0xbc, 0x29, 0xbd, 0xe0, 0x6b, 0x66, 0x81, 0xd7, 0x12, 0x05,
		0x37, 0x51, 0xd7, 0x2a, 0x5f, 0x70, 0x93, 0xff, 0x50, 0x45, 0x05, 0x37, 0x65, 0xd7, 0xe5, 0x95,
		0xae, 0xc7, 0x9b, 0xfa, 0x86, 0x34, 0x37, 0x2a, 0x9f, 0x5b, 0x8a, 0xc8, 0xa6, 0xe4, 0x15, 0x55,
		0x35, 0xdd, 0x36, 0x1c, 0xd9, 0x94, 0xb8, 0xe2, 0x7a, 0x8a, 0x20, 0x33, 0xb2, 0x09, 0x5b, 0x43,
		0xca, 0x0c, 0x2e, 0xb0, 0x18, 0x29, 0xbc, 0x42, 0x6f, 0x8e, 0x4a, 0x6d, 0x3f, 0x10, 0x90, 0x52,
		0x2e, 0x3c, 0x2c, 0xe8, 0x13, 0x41, 0x72, 0x7d, 0x94, 0x61, 0x37, 0xb0, 0x9a, 0x95, 0x76, 0x74,
		0x37, 0xb0, 0x92, 0xd5, 0xb6, 0xb5, 0x1b, 0x50, 0xe0, 0x2e, 0xe5, 0xcd, 0x40, 0x2c, 0x5c, 0xe0,
		0xf2, 0xa6, 0xf3, 0xcf, 0xeb, 0xcb, 0xca, 0xbb, 0xdb, 0x41, 0x34, 0x60, 0x07, 0x31, 0xdd, 0x4c,
		0x9d, 0xee, 0xe0, 0x0e, 0x42, 0xae, 0xde, 0xb1, 0x20, 0x1e, 0x93, 0xe6, 0xd8, 0x48, 0x16, 0xde,
		0xbe, 0x75, 0xae, 0x6e, 0x7e, 0x5c, 0xde, 0x74, 0x6e, 0xbe, 0x5c, 0xbe, 0x5d, 0x5c, 0x7d, 0x0f,
		0xe4, 0x63, 0x3b, 0x27, 0x0d, 0xdb, 0x3f, 0x3c, 0x9e, 0x1a, 0x32, 0xa0, 0x9c, 0x40, 0x39, 0xc1,
		0x19, 0x03, 0xf8, 0xa8, 0xf4, 0xa6, 0x02, 0xce, 0x8e, 0x23, 0x44, 0x87, 0xb3, 0x63, 0xc0, 0x75,
		0xc0, 0x75, 0xc0, 0xf5, 0xfd, 0xc0, 0x75, 0x38, 0x3b, 0x8e, 0x60, 0x9d, 0x71, 0xc3, 0xf5, 0xe8,
		0x10, 0x7b, 0x2f, 0x0a, 0xa8, 0x1e, 0x23, 0x52, 0x03, 0xf5, 0x88, 0x0a, 0x59, 0x8c, 0x07, 0x89,
		0x02, 0xc4, 0x43, 0x32, 0xaa, 0x01, 0xa0, 0xfc, 0x3d, 0x41, 0x39, 0x75, 0x8d, 0xe8, 0xe5, 0x6e,
		0x2a, 0x70, 0x2e, 0x51, 0x06, 0x64, 0xf2, 0x2c, 0x85, 0x83, 0xf9, 0xec, 0xc9, 0x9f, 0x8e, 0x15,
		0x9e, 0x5d, 0x47, 0x25, 0x69, 0xfb, 0x08, 0xa6, 0x84, 0xd5, 0xea, 0x5d, 0xc3, 0x68, 0xf5, 0xde,
		0xee, 0x9a, 0x46, 0xab, 0x17, 0x5e, 0x36, 0x83, 0x5f, 0xe1, 0xf5, 0xe1, 0x5d, 0xc3, 0x38, 0x9e,
		0x5c, 0x9f, 0xdc, 0x35, 0x8c, 0x93, 0x5e, 0xad, 0xdb, 0xad, 0xd7, 0x5e, 0x8f, 0xc6, 0xea, 0x84,
		0xd5, 0x8f, 0x77, 0xdd, 0xae, 0xfb, 0x7a, 0x33, 0xf6, 0x7f, 0x5e, 0x8f, 0x7b, 0x9f, 0x6b, 0xe7,
		0x95, 0xa2, 0xab, 0xa0, 0x1c, 0xac, 0x71, 0x35, 0x4f, 0x77, 0x60, 0x35, 0xdb, 0x6f, 0xfe, 0x9c,
		0x63, 0xa3, 0xdf, 0x31, 0xbe, 0xf6, 0x5e, 0x1b, 0x07, 0xc7, 0xe3, 0x5a, 0xbb, 0x56, 0x5d, 0xbc,
		0xd7, 0xae, 0xbd, 0x36, 0x0e, 0x4e, 0xc6, 0xd5, 0x6a, 0xc2, 0x37, 0xe7, 0x49, 0x7d, 0xd4, 0xde,
		0xaa, 0xd5, 0x6a, 0xb4, 0x8e, 0x73, 0x6b, 0x7b, 0xd7, 0x68, 0xf6, 0xce, 0x83, 0xcb, 0xf0, 0xe7,
		0x94, 0x3b, 0xa4, 0x1a, 0xd7, 0x12, 0x79, 0xe2, 0x40, 0x99, 0x85, 0xff, 0x68, 0xf7, 0x3e, 0xb7,
		0x6b, 0xaf, 0xa7, 0xe3, 0xc9, 0x75, 0xf0, 0xb3, 0xf6, 0x56, 0xad, 0x7f, 0xea, 0x76, 0xeb, 0xf5,
		0x4f, 0xb5, 0x70, 0x00, 0x51, 0xbb, 0x4f, 0xe1, 0xb7, 0xe7, 0xed, 0xf6, 0xd2, 0xad, 0x5a, 0xf5,
		0x63, 0x7d, 0x1d, 0x6c, 0xb9, 0x35, 0x75, 0xce, 0x89, 0xe9, 0x30, 0x4b, 0x59, 0xa1, 0xcf, 0xc8,
		0xd4, 0x54, 0xfa, 0x94, 0x0e, 0x94, 0x3a, 0x28, 0x75, 0x50, 0xea, 0xa0, 0xd4, 0x41, 0xa9, 0x83,
		0x52, 0x07, 0xa5, 0x5e, 0xa0, 0x52, 0xdf, 0x58, 0x7c, 0xf7, 0xf4, 0xc8, 0xac, 0x0e, 0xba, 0x1b,
		0x74, 0x77, 0x42, 0x2c, 0x19, 0x44, 0x77, 0x83, 0x87, 0x55, 0x76, 0x2a, 0xe0, 0xbd, 0x12, 0xe1,
		0xb0, 0x86, 0x62, 0x24, 0x0f, 0xdf, 0x7e, 0x63, 0x35, 0xfc, 0x1e, 0xe2, 0xbf, 0xe8, 0x70, 0x34,
		0x44, 0xc2, 0xc3, 0x8c, 0x0f, 0x29, 0xe7, 0xd4, 0x61, 0x68, 0xc4, 0xa8, 0x00, 0x08, 0x07, 0x08,
		0x57, 0x61, 0x2c, 0xa4, 0x56, 0xa5, 0x3b, 0x1e, 0x89, 0xd7, 0x3c, 0x6e, 0x1d, 0xca, 0xf4, 0xae,
		0x56, 0xd0, 0x1b, 0xc2, 0xf0, 0x76, 0x05, 0xea, 0x4f, 0x4f, 0x4e, 0x8e, 0x4e, 0x00, 0xed, 0x83,
		0x7c, 0x8c, 0xd1, 0x03, 0x23, 0x42, 0x1e, 0xf0, 0xa3, 0xf6, 0x8a, 0x2e, 0xb7, 0x80, 0x08, 0x09,
		0x07, 0xe1, 0xf0, 0x0d, 0x10, 0xc4, 0x37, 0xdd, 0xa3, 0x4d, 0x2d, 0xe1, 0xa8, 0xef, 0x39, 0x43,
		0x80, 0x7f, 0x80, 0xff, 0x05, 0x1f, 0x96, 0xf4, 0x64, 0x28, 0x19, 0xf0, 0xca, 0xb1, 0xaa, 0x9b,
		0x74, 0x55, 0xfd, 0x12, 0xfd, 0xb1, 0xda, 0x5b, 0xf5, 0xae, 0x69, 0x1c, 0xf6, 0x26, 0x1f, 0x8e,
		0xee, 0x1a, 0xc6, 0x61, 0xaf, 0x56, 0xab, 0x40, 0xc2, 0xdf, 0x8e, 0x24, 0xfc, 0x4d, 0xf7, 0xa0,
		0x49, 0x57, 0xf2, 0xd9, 0x7e, 0x57, 0xee, 0x45, 0x40, 0x71, 0xbf, 0x74, 0xb1, 0x95, 0x3c, 0x3f,
		0xb9, 0xb1, 0x64, 0x8d, 0x41, 0x26, 0xc3, 0x8f, 0x11, 0xf1, 0xec, 0x78, 0x7f, 0xa6, 0xe7, 0xf7,
		0x4d, 0x1a, 0x94, 0x36, 0xbb, 0x2f, 0x59, 0x4f, 0x6e, 0x39, 0xbb, 0xcf, 0x7f, 0xa8, 0xa2, 0xb2,
		0xfb, 0xd2, 0x96, 0x48, 0x72, 0xa9, 0xd2, 0x96, 0x6c, 0x92, 0xd9, 0x17, 0x51, 0x95, 0x22, 0xaf,
		0x6f, 0xb5, 0xcd, 0x53, 0xd2, 0xbc, 0xbe, 0xc4, 0xb5, 0xd6, 0xc3, 0xfb, 0xcc, 0xbc, 0xbe, 0x12,
		0x24, 0x50, 0xac, 0xe6, 0xb2, 0x52, 0x19, 0x92, 0xd9, 0x26, 0xf4, 0x0e, 0x1a, 0x92, 0x2b, 0xd9,
		0x6d, 0x5b, 0x86, 0x24, 0x84, 0xd9, 0x82, 0x13, 0x58, 0x65, 0x2a, 0x20, 0x7d, 0x22, 0xc2, 0x73,
		0x48, 0x9f, 0x00, 0x5c, 0x07, 0x5c, 0x07, 0x5c, 0xdf, 0x0f, 0x5c, 0x87, 0xf4, 0x89, 0x70, 0x58,
		0x12, 0x6f, 0x9b, 0x5a, 0x12, 0x35, 0xf9, 0xaa, 0xd6, 0x29, 0x6f, 0x77, 0x99, 0x75, 0x80, 0xc4,
		0x23, 0x16, 0xc8, 0x79, 0x66, 0x3c, 0x34, 0xd9, 0x6f, 0x42, 0x93, 0xbd, 0x8e, 0xae, 0x26, 0x49,
		0xd0, 0x1c, 0xf1, 0xd0, 0x53, 0x7c, 0xe3, 0x30, 0x72, 0x80, 0xc4, 0x23, 0x61, 0xfe, 0x8f, 0x49,
		0x4b, 0xbf, 0xc1, 0xc0, 0x76, 0x1e, 0xb0, 0x6d, 0xbf, 0x20, 0xd7, 0x73, 0x9e, 0xa8, 0x45, 0x2c,
		0xf4, 0xf0, 0x82, 0x3a, 0x44, 0x3c, 0x12, 0xaf, 0x0e, 0x4a, 0x02, 0x94, 0x84, 0xce, 0x0b, 0x59,
		0x54, 0x5e, 0xc4, 0x32, 0x7b, 0x01, 0x0b, 0x61, 0xa2, 0x3d, 0x5f, 0xf9, 0x6a, 0xf1, 0x63, 0xd6,
		0xfb, 0x56, 0x4a, 0x1e, 0x60, 0x15, 0x6d, 0xa9, 0x41, 0xac, 0x40, 0xac, 0x96, 0xdd, 0x79, 0x10,
		0x5c, 0x05, 0xf6, 0x97, 0xec, 0x54, 0x40, 0x70, 0x55, 0x38, 0xac, 0xa1, 0x69, 0x2a, 0x04, 0x57,
		0x99, 0xa6, 0x6a, 0x70, 0x95, 0xf3, 0x40, 0x6d, 0x82, 0x4c, 0x67, 0xc4, 0x84, 0xf7, 0x82, 0x4c,
		0xc7, 0x22, 0x00, 0xdd, 0x00, 0xdd, 0x2a, 0x2c, 0x85, 0x14, 0xc3, 0xaa, 0x20, 0x46, 0x6a, 0x3f,
		0x11, 0xbb, 0xd5, 0x6a, 0x01, 0x64, 0x07, 0x90, 0xcd, 0x54, 0x20, 0x9b, 0x69, 0x42, 0x76, 0x64,
		0x53, 0x01, 0x64, 0x03, 0x64, 0x2b, 0xb3, 0x14, 0x40, 0x36, 0x40, 0xf6, 0xfb, 0x83, 0x6c, 0x88,
		0x57, 0x2b, 0x34, 0x5e, 0x2d, 0x52, 0x40, 0x8b, 0xbf, 0xe5, 0x23, 0xd5, 0x22, 0x0f, 0xed, 0xfd,
		0xc2, 0xef, 0xad, 0x84, 0xa9, 0x65, 0x0f, 0x62, 0xf5, 0xc3, 0xcb, 0x04, 0xa8, 0x71, 0x2a, 0x48,
		0x7a, 0x74, 0x5a, 0xf0, 0x6d, 0x69, 0x43, 0xd3, 0x78, 0x09, 0x23, 0xd3, 0x78, 0x71, 0x81, 0x69,
		0x89, 0x4b, 0x23, 0xb3, 0x44, 0xe9, 0x27, 0x19, 0x61, 0x48, 0xda, 0x2a, 0x92, 0x4d, 0x86, 0xa3,
		0xf1, 0x1d, 0x8c, 0x46, 0xe3, 0xef, 0x2a, 0x18, 0x6d, 0x05, 0xa7, 0x94, 0xca, 0x8e, 0xe7, 0x7b,
		0x68, 0xc6, 0x73, 0x88, 0x57, 0x00, 0x7f, 0xf9, 0x6e, 0x9b, 0xf2, 0x10, 0x87, 0x36, 0x81, 0x72,
		0x88, 0x43, 0x03, 0x54, 0x07, 0x54, 0x07, 0x54, 0xdf, 0x07, 0x54, 0x87, 0x28, 0xb4, 0x70, 0x58,
		0x25, 0x8b, 0x42, 0x03, 0x5b, 0x1d, 0x50, 0x1d, 0xc2, 0xc6, 0xe6, 0xe7, 0x20, 0x57, 0xd8, 0x98,
		0x2f, 0x50, 0x75, 0x90, 0x28, 0x90, 0xa8, 0xb8, 0xab, 0x0d, 0xc2, 0xc5, 0xc0, 0x50, 0x92, 0x9d,
		0x0a, 0x08, 0x17, 0x0b, 0x87, 0x95, 0x95, 0x61, 0xbd, 0x24, 0x68, 0x92, 0x39, 0xb0, 0x29, 0x26,
		0xd2, 0x24, 0x08, 0x61, 0x0a, 0xe4, 0x4f, 0x26, 0x07, 0x18, 0x07, 0x18, 0xdf, 0x94, 0x61, 0xc4,
		0x88, 0x68, 0xc7, 0x8e, 0xee, 0xe6, 0xae, 0x73, 0x98, 0x44, 0x70, 0x52, 0x5c, 0xe8, 0x49, 0xb1,
		0xaf, 0xcc, 0x67, 0x3f, 0xe4, 0x0f, 0x88, 0xbf, 0x53, 0x41, 0xee, 0xa7, 0x3f, 0xb6, 0x72, 0x2e,
		0xbc, 0xea, 0xa9, 0xd3, 0x9e, 0x56, 0xe6, 0x2c, 0x58, 0x90, 0xa1, 0x6b, 0xe3, 0x55, 0xe7, 0xc1,
		0xd3, 0x16, 0xa5, 0x3d, 0x13, 0x16, 0x6e, 0xf9, 0xce, 0x84, 0x85, 0x5b, 0xd8, 0x99, 0x70, 0xea,
		0x12, 0xc9, 0x2e, 0x55, 0xba, 0xf2, 0x0c, 0xcf, 0x86, 0x9f, 0x4c, 0x8e, 0x26, 0xa4, 0xa5, 0xa8,
		0x59, 0x92, 0xb8, 0xa0, 0xaa, 0xda, 0x70, 0xc3, 0x87, 0xc4, 0x49, 0x0b, 0xae, 0x87, 0xe3, 0xbb,
		0x70, 0x48, 0x1c, 0x67, 0x99, 0x5d, 0xb0, 0xb3, 0x56, 0x72, 0xd4, 0x8e, 0xda, 0x59, 0xab, 0x38,
		0x0e, 0x8e, 0x15, 0x60, 0xb7, 0x0c, 0x87, 0xc5, 0xbb, 0xb3, 0x5d, 0x86, 0xc3, 0x62, 0x40, 0x75,
		0x40, 0x75, 0x40, 0xf5, 0xbd, 0x40, 0x75, 0x38, 0x2c, 0x8e, 0x40, 0xdd, 0x79, 0x66, 0x36, 0x65,
		0x0a, 0x4e, 0xd0, 0x29, 0x85, 0x1a, 0x98, 0x5f, 0x44, 0x64, 0xc8, 0xc2, 0x02, 0x23, 0x2f, 0xa8,
		0x52, 0xcd, 0xd0, 0xf0, 0xc1, 0xe5, 0x80, 0xe2, 0x80, 0xe2, 0x93, 0x79, 0x1e, 0x51, 0x26, 0x8e,
		0x0e, 0x21, 0x23, 0x2b, 0x1d, 0xb8, 0x20, 0x23, 0x6b, 0x3a, 0x15, 0xc7, 0x87, 0xad, 0xe3, 0xd6,
		0xe9, 0xd9, 0x61, 0x0b, 0xde, 0x36, 0x80, 0x36, 0x1a, 0x81, 0x10, 0xf7, 0xac, 0xd4, 0x01, 0xbe,
		0x01, 0xbe, 0x17, 0x9d, 0xbb, 0x10, 0x8d, 0x00, 0x96, 0xb8, 0xec, 0x54, 0x40, 0x34, 0x42, 0x38,
		0x2c, 0xae, 0x80, 0xde, 0x5c, 0x15, 0xbd, 0xbf, 0xdb, 0xd4, 0x24, 0xc8, 0xa2, 0xfd, 0x3e, 0xf1,
		0x08, 0x13, 0x14, 0x0b, 0xc7, 0x03, 0xe0, 0x06, 0xe0, 0x96, 0x66, 0x28, 0xb0, 0xb9, 0x01, 0xad,
		0x03, 0xc5, 0x75, 0x7a, 0x76, 0x76, 0x76, 0xd8, 0x04, 0x8b, 0x3b, 0xc4, 0x6c, 0xae, 0xf2, 0x72,
		0x2f, 0x2e, 0x74, 0x50, 0xfb, 0x97, 0xef, 0xc4, 0x7b, 0xf2, 0xd1, 0x5b, 0xf8, 0x52, 0x0d, 0x98,
		0x0d, 0x98, 0x2d, 0xcd, 0x4f, 0xef, 0x1a, 0xb4, 0xc1, 0xc4, 0x9e, 0x4e, 0xc5, 0xe1, 0x09, 0xe0,
		0x75, 0x30, 0x2c, 0xe1, 0xe1, 0x7e, 0x9f, 0x9a, 0x86, 0x69, 0x63, 0xce, 0xe5, 0x91, 0x7b, 0x9e,
		0x4c, 0x2f, 0xfa, 0x37, 0xea, 0x03, 0x49, 0xf5, 0x01, 0x30, 0xfe, 0x7e, 0x60, 0x7c, 0xdd, 0x61,
		0xbf, 0xc2, 0x6c, 0xcf, 0xf1, 0x6f, 0xe2, 0x8d, 0xf5, 0xa4, 0x44, 0x8d, 0x5c, 0xb5, 0xa3, 0xa5,
		0xa8, 0xbd, 0x9a, 0x80, 0xfd, 0x74, 0xe1, 0x58, 0x09, 0x64, 0x2c, 0x83, 0xb1, 0xe0, 0x58, 0x09,
		0xb6, 0xb8, 0xb2, 0x53, 0xf1, 0x2e, 0x8f, 0x95, 0x20, 0x8b, 0xa3, 0xd0, 0x2c, 0x8e, 0xc9, 0x41,
		0xc8, 0xf2, 0x85, 0x7c, 0x46, 0xc7, 0x8f, 0x88, 0xe2, 0x7e, 0xe9, 0x62, 0x2b, 0xd9, 0x1d, 0x32,
		0x23, 0xc9, 0x1a, 0x81, 0x54, 0xb6, 0xc7, 0x4a, 0x1b, 0x5d, 0xca, 0x26, 0x87, 0xbc, 0x0f, 0x65,
		0x0d, 0xad, 0x9b, 0xf7, 0x21, 0xb5, 0xa1, 0x52, 0xda, 0x48, 0xa5, 0x65, 0x80, 0xc8, 0x6c, 0xa0,
		0x20, 0x03, 0x24, 0x87, 0x71, 0xb6, 0x7f, 0x19, 0x20, 0xb0, 0xe7, 0x86, 0xfd, 0x40, 0xb2, 0xeb,
		0x14, 0x82, 0x85, 0xc1, 0x7f, 0xaa, 0x30, 0x15, 0x90, 0x02, 0x12, 0x61, 0x3a, 0xa4, 0x80, 0x00,
		0xaa, 0x03, 0xaa, 0x03, 0xaa, 0xef, 0x03, 0xaa, 0x43, 0x0a, 0x48, 0x38, 0xac, 0x8d, 0x85, 0x0d,
		0xcf, 0x99, 0xe3, 0x10, 0x37, 0x0c, 0xc8, 0x9d, 0xec, 0x17, 0x80, 0xe0, 0x61, 0xc0, 0x70, 0xd9,
		0xa9, 0x80, 0xe0, 0xe1, 0x70, 0x58, 0xae, 0xf5, 0x20, 0x0f, 0xe2, 0x7e, 0x63, 0x35, 0x14, 0xbf,
		0xbd, 0xf8, 0x27, 0xc0, 0x35, 0xc0, 0xb5, 0x3c, 0x03, 0x21, 0x38, 0x4b, 0x05, 0x7c, 0x0e, 0x3d,
		0x27, 0x60, 0x65, 0x87, 0x08, 0x4d, 0x6c, 0x4f, 0x01, 0xa2, 0xfd, 0xd6, 0x8a, 0x18, 0x7d, 0x79,
		0xfd, 0x1b, 0x22, 0x7f, 0xb9, 0x0e, 0xf3, 0x91, 0x03, 0xd0, 0x1a, 0xd0, 0x5a, 0x9e, 0x97, 0x00,
		0xae, 0x01, 0xae, 0x43, 0xb8, 0x06, 0xb0, 0xf6, 0x87, 0xf5, 0x7f, 0x26, 0x95, 0xc7, 0x6a, 0xbf,
		0xb1, 0x1a, 0x54, 0xff, 0xcf, 0x17, 0xf0, 0x5b, 0x03, 0x40, 0x2b, 0x30, 0x10, 0x82, 0x44, 0x0e,
		0xc0, 0xe7, 0xf7, 0xe6, 0xee, 0x80, 0x90, 0xc4, 0x62, 0x43, 0x12, 0xe7, 0x63, 0xfe, 0xd3, 0x3f,
		0x29, 0x44, 0x28, 0x86, 0x64, 0x5f, 0x7c, 0xaa, 0xfb, 0xd4, 0x0f, 0xdb, 0x89, 0x56, 0x54, 0x1a,
		0x9f, 0xec, 0xb8, 0x64, 0xe2, 0x17, 0x47, 0x6e, 0x3f, 0x3d, 0x6a, 0xd1, 0xff, 0xb2, 0xb4, 0xb1,
		0x8a, 0xcb, 0x0f, 0x87, 0xb6, 0x1f, 0xac, 0xe8, 0x3f, 0x54, 0x51, 0xd1, 0x8a, 0x49, 0x4b, 0x23,
		0x39, 0x0b, 0x49, 0x4b, 0xd5, 0x41, 0x76, 0x14, 0x9b, 0xe8, 0x33, 0x8e, 0x85, 0x46, 0x6e, 0x3f,
		0xf5, 0x58, 0x6b, 0xa3, 0x91, 0x89, 0xe9, 0x43, 0x40, 0xe5, 0x0d, 0x4d, 0x4c, 0x5c, 0x68, 0x3d,
		0x65, 0x90, 0x19, 0x9b, 0x88, 0x2d, 0xcb, 0x23, 0x2a, 0x19, 0x80, 0x13, 0x02, 0x35, 0x3b, 0xbf,
		0x13, 0x52, 0xf9, 0x1c, 0xf2, 0xf3, 0xf6, 0xeb, 0x2e, 0x98, 0xfc, 0xab, 0x39, 0x67, 0x47, 0x6d,
		0xfe, 0x95, 0x9c, 0xb5, 0x2d, 0xa3, 0xff, 0xd1, 0x51, 0x4a, 0xdf, 0x6e, 0xb6, 0x24, 0xda, 0x46,
		0x4f, 0x51, 0xb8, 0xd5, 0x3f, 0x3d, 0xfd, 0x77, 0x0d, 0x39, 0x41, 0xd0, 0x1d, 0x81, 0xde, 0x48,
		0xd4, 0x47, 0x94, 0x30, 0xb2, 0xa7, 0x63, 0x8d, 0xb1, 0x2d, 0x8d, 0xf1, 0x57, 0x0d, 0xda, 0x5b,
		0x2c, 0x04, 0xf1, 0x98, 0xf2, 0x70, 0xa7, 0x1d, 0x54, 0xab, 0x77, 0x0d, 0xa3, 0xd5, 0x7b, 0xbb,
		0x6b, 0x1a, 0xad, 0x5e, 0x78, 0xd9, 0x0c, 0x7e, 0x85, 0xd7, 0x87, 0x77, 0x0d, 0xe3, 0x78, 0x72,
		0x7d, 0x72, 0xd7, 0x30, 0x4e, 0x7a, 0xb5, 0x6e, 0xb7, 0x5e, 0x7b, 0x3d, 0x1a, 0xab, 0x13, 0x56,
		0x3f, 0xde, 0x75, 0xbb, 0xee, 0xeb, 0xcd, 0xd8, 0xff, 0x79, 0x3d, 0xee, 0x7d, 0xae, 0x9d, 0x57,
		0x94, 0x9f, 0xba, 0xa7, 0x44, 0x31, 0x3e, 0xd8, 0x20, 0x17, 0x9c, 0xee, 0x30, 0x17, 0xb4, 0xdf,
		0xfc, 0xb5, 0xc2, 0x46, 0xbf, 0x63, 0x7c, 0xed, 0xbd, 0x36, 0x0e, 0x8e, 0xc7, 0xb5, 0x76, 0xad,
		0xba, 0x78, 0xaf, 0x5d, 0x7b, 0x6d, 0x1c, 0x9c, 0x8c, 0xab, 0xd5, 0x84, 0x6f, 0xce, 0x93, 0xfa,
		0xa8, 0xbd, 0x55, 0xab, 0xd5, 0x68, 0xfd, 0xe7, 0x78, 0xe2, 0xae, 0xd1, 0xec, 0x9d, 0x07, 0x97,
		0xe1, 0xcf, 0x29, 0x57, 0x49, 0x35, 0xae, 0x25, 0xf2, 0xd2, 0x81, 0xb6, 0x08, 0xfc, 0xd1, 0xee,
		0x7d, 0x6e, 0xd7, 0x5e, 0x4f, 0xc7, 0x93, 0xeb, 0xe0, 0x67, 0xed, 0xad, 0x5a, 0xff, 0xd4, 0xed,
		0xd6, 0xeb, 0x9f, 0x6a, 0xe1, 0x40, 0xa2, 0x76, 0x9f, 0xc2, 0x6f, 0xcf, 0xdb, 0xed, 0xa5, 0x5b,
		0xb5, 0xea, 0xc7, 0xfa, 0x26, 0xd8, 0xfa, 0x43, 0xb1, 0xfd, 0x4a, 0x8a, 0x89, 0x06, 0xec, 0x5b,
		0xce, 0x10, 0x53, 0x26, 0x13, 0xbe, 0x9b, 0x57, 0x1a, 0x54, 0x03, 0x75, 0x72, 0xc8, 0xbc, 0x8e,
		0x27, 0x2b, 0xa7, 0x1b, 0x27, 0xaf, 0x67, 0xab, 0x08, 0xaf, 0x8e, 0x26, 0xa8, 0x6a, 0x7b, 0xbc,
		0x8a, 0x9e, 0xb2, 0xc3, 0x93, 0xa3, 0x2d, 0x4e, 0xda, 0xba, 0x04, 0x5c, 0x41, 0x42, 0x74, 0xf5,
		0x44, 0xc5, 0xc7, 0x3e, 0x6c, 0xfc, 0xdd, 0x31, 0xfe, 0xd3, 0x30, 0x5a, 0xf7, 0xbd, 0xd8, 0x87,
		0x6e, 0xd7, 0xb8, 0xef, 0xf9, 0x5a, 0xe1, 0xb4, 0x39, 0xae, 0x9d, 0xcf, 0xee, 0xf7, 0x7c, 0x3c,
		0xff, 0xa4, 0x43, 0x75, 0x5e, 0x7b, 0xeb, 0x76, 0xeb, 0x95, 0xa2, 0x11, 0x6e, 0x3b, 0x39, 0x0f,
		0xdb, 0xcf, 0x63, 0x83, 0xcd, 0x23, 0x6c, 0x1e, 0x11, 0x64, 0x3a, 0xc0, 0xb1, 0x11, 0xe4, 0xaf,
		0xe5, 0xc4, 0x72, 0xc8, 0x5f, 0x03, 0x5c, 0x07, 0x5c, 0x07, 0x5c, 0xdf, 0x0f, 0x5c, 0x87, 0x0c,
		0xb6, 0x70, 0x58, 0x84, 0x09, 0xe2, 0xb9, 0x1e, 0xe5, 0x0a, 0xa0, 0x1e, 0xa3, 0xd1, 0x2b, 0xe8,
		0x38, 0xeb, 0x00, 0x89, 0x47, 0x2c, 0x90, 0xf3, 0xcc, 0x78, 0x68, 0xae, 0x77, 0x4c, 0x93, 0x70,
		0x8e, 0x6e, 0x1d, 0xca, 0x04, 0xba, 0xa6, 0x5c, 0x00, 0xc8, 0x03, 0xc8, 0x6f, 0xae, 0xe0, 0x23,
		0x61, 0xa2, 0x3d, 0x63, 0xce, 0xa4, 0x8f, 0xeb, 0xa9, 0xf6, 0xb8, 0xb1, 0x3c, 0xd2, 0x91, 0xdb,
		0xaf, 0x83, 0x48, 0x81, 0x48, 0xcd, 0xcd, 0x34, 0x64, 0x8d, 0x82, 0xdd, 0x24, 0x3b, 0x15, 0x90,
		0x35, 0x1a, 0x0e, 0xcb, 0x75, 0x3c, 0x85, 0xf7, 0x17, 0x04, 0xad, 0xd5, 0x50, 0xfb, 0x2b, 0xf5,
		0xb8, 0x40, 0x3e, 0xa1, 0xbf, 0xeb, 0xf5, 0x82, 0xa8, 0x64, 0x00, 0x6e, 0x00, 0x6e, 0x28, 0xcc,
		0x2b, 0x8d, 0x55, 0x90, 0x9d, 0x04, 0x85, 0x79, 0x65, 0x57, 0x0a, 0xa2, 0xe0, 0x97, 0xdb, 0x2d,
		0xc4, 0x85, 0x8f, 0xdc, 0xfe, 0xe4, 0xbf, 0x7c, 0x9c, 0xfb, 0x4f, 0xb7, 0x7f, 0x1f, 0xfd, 0xdf,
		0x4a, 0x30, 0x7b, 0xfa, 0x03, 0x27, 0x3f, 0xa8, 0x4c, 0x98, 0xfa, 0x93, 0xb9, 0xa2, 0xb8, 0xae,
		0xff, 0x65, 0x69, 0xc3, 0xd4, 0xb9, 0x5d, 0xbe, 0x28, 0x75, 0x6e, 0x17, 0x16, 0xa4, 0x9e, 0xb4,
		0x30, 0x12, 0x0b, 0x94, 0xee, 0xae, 0x0a, 0x43, 0xd4, 0x9f, 0xa8, 0x27, 0x46, 0xd8, 0x46, 0x26,
		0xb1, 0xed, 0x91, 0x8d, 0x3d, 0xc4, 0xc3, 0xd7, 0x4a, 0x95, 0xa2, 0x94, 0x6e, 0xe2, 0x92, 0xaa,
		0xda, 0x59, 0x1b, 0x8e, 0x57, 0x4f, 0x5a, 0x72, 0x3d, 0xd4, 0xce, 0x0e, 0x57, 0x77, 0x15, 0x22,
		0xd5, 0x5d, 0x4d, 0x7f, 0x26, 0x0e, 0xbc, 0x96, 0x86, 0x1b, 0x78, 0x2d, 0xed, 0x1d, 0xf1, 0x5a,
		0xae, 0x64, 0x9c, 0x1d, 0x35, 0xd4, 0x57, 0x31, 0xd6, 0xbe, 0xfa, 0x2c, 0xb1, 0x6b, 0xb7, 0xb1,
		0x6b, 0xf8, 0x6c, 0xb7, 0x74, 0xbd, 0x1e, 0x6f, 0x25, 0x76, 0x5d, 0x9b, 0x9a, 0x58, 0x2d, 0xac,
		0x27, 0x4e, 0xa4, 0x98, 0x0a, 0xc2, 0x90, 0x13, 0x9a, 0x3b, 0xd3, 0xa4, 0xa1, 0x58, 0x67, 0x3c,
		0x10, 0x40, 0xdb, 0x76, 0x9e, 0x11, 0x66, 0x16, 0xb2, 0x08, 0x7b, 0xa9, 0x23, 0x5f, 0xc5, 0xfa,
		0x57, 0xc8, 0x1b, 0xd9, 0x84, 0x77, 0xd9, 0x33, 0xb5, 0x6d, 0xf4, 0x40, 0x10, 0xf9, 0x8b, 0x98,
		0x23, 0x41, 0x2c, 0xd4, 0xf7, 0x77, 0xd7, 0x07, 0xa8, 0xef, 0xf8, 0x84, 0xc4, 0x42, 0x0f, 0x2f,
		0x48, 0x3c, 0x92, 0xa8, 0x9f, 0x80, 0x28, 0xec, 0x24, 0x68, 0x17, 0xdc, 0xe8, 0x32, 0xe1, 0xa0,
		0x21, 0x16, 0xe6, 0x23, 0xa2, 0x1c, 0x79, 0x44, 0x8c, 0x3c, 0x46, 0xac, 0x3a, 0xea, 0x30, 0x44,
		0x87, 0xfe, 0xd3, 0x50, 0x81, 0x2e, 0x2e, 0x6f, 0xfe, 0x17, 0x75, 0xae, 0xaf, 0x91, 0x4d, 0x09,
		0x47, 0x58, 0x04, 0x7d, 0x12, 0x66, 0xc9, 0xba, 0x5c, 0x9b, 0x80, 0x07, 0xbb, 0x86, 0x07, 0x59,
		0x0a, 0x68, 0x26, 0x34, 0x3e, 0x6b, 0xc9, 0xcf, 0xdb, 0x54, 0x6c, 0x02, 0x32, 0xc9, 0xa1, 0x2f,
		0x0a, 0x4e, 0xc0, 0xcd, 0x8e, 0x17, 0x8a, 0x42, 0xe0, 0xff, 0x97, 0x97, 0xc2, 0x58, 0xa7, 0x7d,
		0x3c, 0xb2, 0xc3, 0x0a, 0x00, 0xde, 0x48, 0x36, 0x8c, 0x59, 0x71, 0xc3, 0x2a, 0xcd, 0xda, 0x3a,
		0x2c, 0xae, 0xc7, 0xea, 0xba, 0x2c, 0x9f, 0x9b, 0xf5, 0x73, 0x8b, 0x80, 0xb6, 0x28, 0x28, 0xee,
		0xdc, 0x25, 0x57, 0x4a, 0x5a, 0x65, 0x2e, 0xad, 0xd3, 0x83, 0xe3, 0xd8, 0x04, 0x33, 0x9d, 0xc8,
		0xf9, 0x66, 0x41, 0xce, 0x07, 0x89, 0x41, 0x2a, 0xe9, 0xc3, 0x1c, 0x7a, 0x31, 0xd3, 0x0a, 0x55,
		0xef, 0x09, 0x84, 0x14, 0x84, 0x34, 0xaf, 0x90, 0xca, 0xdb, 0xb7, 0x3a, 0x76, 0x6e, 0x92, 0xbd,
		0xeb, 0xb6, 0x63, 0xac, 0x9e, 0xf8, 0x39, 0xcb, 0xee, 0x55, 0x90, 0xff, 0x5c, 0xd6, 0x41, 0xe4,
		0x54, 0x54, 0xb0, 0x7d, 0xa5, 0xbc, 0x8c, 0xea, 0xde, 0xc6, 0x42, 0xbc, 0x8e, 0x6a, 0xde, 0x47,
		0xd9, 0x39, 0x92, 0xf4, 0x46, 0xa6, 0x39, 0xf8, 0x9e, 0x4c, 0x3e, 0xfd, 0xaf, 0x86, 0x80, 0x0b,
		0x0e, 0xc0, 0xdf, 0x4d, 0x7e, 0x3f, 0xf9, 0xdf, 0x89, 0x75, 0xb4, 0x9f, 0x79, 0x11, 0xe9, 0x5e,
		0x30, 0x70, 0x52, 0xbc, 0x43, 0x27, 0x05, 0x44, 0xcf, 0x66, 0x9f, 0xa1, 0x41, 0x14, 0x08, 0x64,
		0x45, 0x2c, 0x23, 0xf9, 0x13, 0x35, 0x89, 0x31, 0xf0, 0x9c, 0x91, 0xab, 0x02, 0xe5, 0x31, 0x2a,
		0x3d, 0x97, 0x73, 0xd8, 0x05, 0x92, 0xea, 0x02, 0x80, 0x1c, 0xbc, 0xcd, 0x45, 0x79, 0x9b, 0xad,
		0x41, 0x3b, 0xce, 0xbd, 0x49, 0x9f, 0xd7, 0xe3, 0x74, 0x86, 0xfc, 0x23, 0x10, 0x3b, 0xb0, 0x9f,
		0xc0, 0x7e, 0xda, 0x0b, 0xfb, 0x09, 0xb2, 0x8f, 0x22, 0x50, 0x77, 0x9e, 0x99, 0x4d, 0xd9, 0x9f,
		0x0a, 0x80, 0x3e, 0xa1, 0x50, 0x03, 0xf3, 0x8b, 0x88, 0x0c, 0x59, 0x58, 0x60, 0xe4, 0x61, 0x11,
		0x60, 0xf9, 0xf0, 0xc1, 0x85, 0x5d, 0x30, 0xa0, 0x38, 0x84, 0xd4, 0x4a, 0x03, 0x17, 0x84, 0xd4,
		0xbe, 0xef, 0x90, 0xda, 0x32, 0xe4, 0xb0, 0x3d, 0x99, 0xbb, 0xf1, 0x06, 0x44, 0x40, 0xed, 0xcd,
		0xa0, 0xf6, 0x93, 0x09, 0xef, 0x3d, 0x04, 0xdb, 0x5b, 0x7a, 0x2a, 0x20, 0x83, 0x2d, 0x1c, 0x16,
		0x57, 0xc0, 0x6b, 0xae, 0x8a, 0xd7, 0xdf, 0x6d, 0x6a, 0x12, 0x64, 0xd1, 0x7e, 0x9f, 0x78, 0x84,
		0x09, 0x8a, 0x85, 0xe3, 0xd5, 0xd1, 0xd5, 0x70, 0x38, 0x12, 0xf8, 0xc1, 0x26, 0x80, 0xdf, 0x80,
		0xdf, 0xf2, 0xcc, 0x05, 0x16, 0x37, 0x20, 0x77, 0xa0, 0xc4, 0x4e, 0xcf, 0xce, 0xce, 0x0e, 0x9b,
		0x60, 0x6f, 0x87, 0xf8, 0xcd, 0x15, 0x12, 0x90, 0x39, 0x17, 0x3a, 0x08, 0xfe, 0xcb, 0xf7, 0x30,
		0xd3, 0x05, 0x89, 0x17, 0x97, 0x00, 0x7e, 0x03, 0x7e, 0xeb, 0xf1, 0x16, 0x82, 0x77, 0x70, 0x01,
		0x80, 0x07, 0x15, 0x88, 0x01, 0xbb, 0x83, 0x61, 0x09, 0x32, 0x74, 0x6d, 0x2c, 0x14, 0x0e, 0x32,
		0xa7, 0x14, 0x7a, 0xe1, 0x02, 0x23, 0x4e, 0x3c, 0xf4, 0x64, 0x72, 0x34, 0xe9, 0x27, 0x2c, 0xbc,
		0xf5, 0x8c, 0xb9, 0xff, 0x95, 0xe5, 0x37, 0xa1, 0x8c, 0x0a, 0x8a, 0x6d, 0xfa, 0x37, 0xe9, 0xb2,
		0xc0, 0xcf, 0xf2, 0xfb, 0x97, 0xef, 0x00, 0xf3, 0x00, 0xf3, 0x9b, 0x8a, 0x2c, 0x78, 0x12, 0xed,
		0x09, 0x73, 0x2e, 0x5e, 0xaf, 0x27, 0xa2, 0x60, 0xfe, 0xcd, 0x66, 0xf2, 0x92, 0x28, 0xf9, 0xc2,
		0xb7, 0x55, 0xe2, 0x18, 0xf5, 0x81, 0xa4, 0xfa, 0x00, 0x21, 0x03, 0x21, 0x2b, 0x4a, 0xc8, 0x84,
		0xd9, 0x5e, 0x78, 0xbd, 0x5f, 0xc2, 0x8d, 0xf5, 0x88, 0xdb, 0xaa, 0x37, 0xc8, 0x2d, 0xcd, 0x43,
		0x76, 0x19, 0xa1, 0x95, 0x9a, 0xce, 0xb5, 0x31, 0x8b, 0x54, 0x1c, 0x1d, 0xba, 0x51, 0xbc, 0xfb,
		0xe4, 0xf4, 0xa0, 0x0f, 0x02, 0x07, 0x02, 0xb7, 0x29, 0x81, 0x1b, 0xb9, 0xfd, 0x76, 0x54, 0x83,
		0x64, 0xfa, 0x7b, 0x5d, 0xf2, 0xa5, 0x16, 0x49, 0x11, 0xb5, 0x57, 0x93, 0xb2, 0x9f, 0x2e, 0x44,
		0x51, 0x80, 0x48, 0x65, 0x30, 0x16, 0x44, 0x51, 0x80, 0x4f, 0x57, 0x76, 0x2a, 0xa0, 0x30, 0x59,
		0xc6, 0x4a, 0x41, 0x61, 0xb2, 0x04, 0xd7, 0x77, 0x6a, 0x0a, 0xa0, 0x7c, 0x61, 0xb2, 0x58, 0xba,
		0xdf, 0x56, 0x0a, 0x93, 0xa5, 0x3f, 0x70, 0xf2, 0x83, 0xa6, 0x16, 0x26, 0xfb, 0x10, 0x7b, 0x98,
		0xb4, 0x87, 0xa8, 0x50, 0xfe, 0x15, 0xff, 0x49, 0x7e, 0x73, 0x9c, 0x65, 0x5d, 0xb3, 0xf8, 0x60,
		0x95, 0xf8, 0x57, 0x73, 0x4f, 0x72, 0x11, 0x04, 0xfa, 0x87, 0x0f, 0x32, 0xfe, 0x30, 0xfe, 0x7f,
		0x00, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x53, 0xcc, 0x90, 0x19, 0x80, 0x76,
		0x02, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
}

