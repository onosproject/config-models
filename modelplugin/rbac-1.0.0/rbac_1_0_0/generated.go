// Code generated by YGOT. DO NOT EDIT.
/*
Package rbac_1_0_0 is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/scondon/go/pkg/mod/github.com/openconfig/ygot@v0.8.12/genutil/names.go
using the following YANG input files:
	- rbac@2020-08-10.yang
Imported modules were sourced from:
	- yang/...
*/
package rbac_1_0_0

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Device{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	Rbac	*Rbac_Rbac	`path:"rbac" module:"rbac"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Rbac_Rbac represents the /rbac/rbac YANG schema element.
type Rbac_Rbac struct {
	Group	map[string]*Rbac_Rbac_Group	`path:"group" module:"rbac"`
	Role	map[string]*Rbac_Rbac_Role	`path:"role" module:"rbac"`
}

// IsYANGGoStruct ensures that Rbac_Rbac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Rbac_Rbac) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// Rbac_Rbac struct. The keys of the list are populated from the input
// arguments.
func (t *Rbac_Rbac) NewGroup(Groupid string) (*Rbac_Rbac_Group, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*Rbac_Rbac_Group)
	}

	key := Groupid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &Rbac_Rbac_Group{
		Groupid: &Groupid,
	}

	return t.Group[key], nil
}

// NewRole creates a new entry in the Role list of the
// Rbac_Rbac struct. The keys of the list are populated from the input
// arguments.
func (t *Rbac_Rbac) NewRole(Roleid string) (*Rbac_Rbac_Role, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Role == nil {
		t.Role = make(map[string]*Rbac_Rbac_Role)
	}

	key := Roleid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Role[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Role", key)
	}

	t.Role[key] = &Rbac_Rbac_Role{
		Roleid: &Roleid,
	}

	return t.Role[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Rbac_Rbac) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Rbac_Rbac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Rbac_Rbac) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Rbac_Rbac_Group represents the /rbac/rbac/group YANG schema element.
type Rbac_Rbac_Group struct {
	Description	*string	`path:"description" module:"rbac"`
	Groupid	*string	`path:"groupid" module:"rbac"`
	Role	map[string]*Rbac_Rbac_Group_Role	`path:"role" module:"rbac"`
}

// IsYANGGoStruct ensures that Rbac_Rbac_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Rbac_Rbac_Group) IsYANGGoStruct() {}

// NewRole creates a new entry in the Role list of the
// Rbac_Rbac_Group struct. The keys of the list are populated from the input
// arguments.
func (t *Rbac_Rbac_Group) NewRole(Roleid string) (*Rbac_Rbac_Group_Role, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Role == nil {
		t.Role = make(map[string]*Rbac_Rbac_Group_Role)
	}

	key := Roleid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Role[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Role", key)
	}

	t.Role[key] = &Rbac_Rbac_Group_Role{
		Roleid: &Roleid,
	}

	return t.Role[key], nil
}

// ΛListKeyMap returns the keys of the Rbac_Rbac_Group struct, which is a YANG list entry.
func (t *Rbac_Rbac_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Groupid == nil {
		return nil, fmt.Errorf("nil value for key Groupid")
	}

	return map[string]interface{}{
		"groupid": *t.Groupid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Rbac_Rbac_Group) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Rbac_Rbac_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Rbac_Rbac_Group) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Rbac_Rbac_Group_Role represents the /rbac/rbac/group/role YANG schema element.
type Rbac_Rbac_Group_Role struct {
	Description	*string	`path:"description" module:"rbac"`
	Roleid	*string	`path:"roleid" module:"rbac"`
}

// IsYANGGoStruct ensures that Rbac_Rbac_Group_Role implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Rbac_Rbac_Group_Role) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Rbac_Rbac_Group_Role struct, which is a YANG list entry.
func (t *Rbac_Rbac_Group_Role) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Roleid == nil {
		return nil, fmt.Errorf("nil value for key Roleid")
	}

	return map[string]interface{}{
		"roleid": *t.Roleid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Rbac_Rbac_Group_Role) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Rbac_Rbac_Group_Role"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Rbac_Rbac_Group_Role) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Rbac_Rbac_Role represents the /rbac/rbac/role YANG schema element.
type Rbac_Rbac_Role struct {
	Description	*string	`path:"description" module:"rbac"`
	Leaf2B	*float64	`path:"leaf2b" module:"rbac"`
	Permission	*Rbac_Rbac_Role_Permission	`path:"permission" module:"rbac"`
	Roleid	*string	`path:"roleid" module:"rbac"`
}

// IsYANGGoStruct ensures that Rbac_Rbac_Role implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Rbac_Rbac_Role) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Rbac_Rbac_Role struct, which is a YANG list entry.
func (t *Rbac_Rbac_Role) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Roleid == nil {
		return nil, fmt.Errorf("nil value for key Roleid")
	}

	return map[string]interface{}{
		"roleid": *t.Roleid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Rbac_Rbac_Role) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Rbac_Rbac_Role"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Rbac_Rbac_Role) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Rbac_Rbac_Role_Permission represents the /rbac/rbac/role/permission YANG schema element.
type Rbac_Rbac_Role_Permission struct {
	Noun	[]string	`path:"noun" module:"rbac"`
	Operation	E_RbacIdentities_PERMISSION	`path:"operation" module:"rbac"`
	Type	E_RbacIdentities_NOUNTYPE	`path:"type" module:"rbac"`
}

// IsYANGGoStruct ensures that Rbac_Rbac_Role_Permission implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Rbac_Rbac_Role_Permission) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Rbac_Rbac_Role_Permission) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Rbac_Rbac_Role_Permission"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Rbac_Rbac_Role_Permission) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// E_RbacIdentities_NOUNTYPE is a derived int64 type which is used to represent
// the enumerated node RbacIdentities_NOUNTYPE. An additional value named
// RbacIdentities_NOUNTYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_RbacIdentities_NOUNTYPE int64

// IsYANGGoEnum ensures that RbacIdentities_NOUNTYPE implements the yang.GoEnum
// interface. This ensures that RbacIdentities_NOUNTYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_RbacIdentities_NOUNTYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  RbacIdentities_NOUNTYPE.
func (E_RbacIdentities_NOUNTYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_RbacIdentities_NOUNTYPE.
func (e E_RbacIdentities_NOUNTYPE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_RbacIdentities_NOUNTYPE")
}

const (
	// RbacIdentities_NOUNTYPE_UNSET corresponds to the value UNSET of RbacIdentities_NOUNTYPE
	RbacIdentities_NOUNTYPE_UNSET E_RbacIdentities_NOUNTYPE = 0
	// RbacIdentities_NOUNTYPE_CONFIG corresponds to the value CONFIG of RbacIdentities_NOUNTYPE
	RbacIdentities_NOUNTYPE_CONFIG E_RbacIdentities_NOUNTYPE = 1
	// RbacIdentities_NOUNTYPE_GRPC corresponds to the value GRPC of RbacIdentities_NOUNTYPE
	RbacIdentities_NOUNTYPE_GRPC E_RbacIdentities_NOUNTYPE = 2
)


// E_RbacIdentities_PERMISSION is a derived int64 type which is used to represent
// the enumerated node RbacIdentities_PERMISSION. An additional value named
// RbacIdentities_PERMISSION_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_RbacIdentities_PERMISSION int64

// IsYANGGoEnum ensures that RbacIdentities_PERMISSION implements the yang.GoEnum
// interface. This ensures that RbacIdentities_PERMISSION can be identified as a
// mapped type for a YANG enumeration.
func (E_RbacIdentities_PERMISSION) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  RbacIdentities_PERMISSION.
func (E_RbacIdentities_PERMISSION) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_RbacIdentities_PERMISSION.
func (e E_RbacIdentities_PERMISSION) String() string {
	return ygot.EnumLogString(e, int64(e), "E_RbacIdentities_PERMISSION")
}

const (
	// RbacIdentities_PERMISSION_UNSET corresponds to the value UNSET of RbacIdentities_PERMISSION
	RbacIdentities_PERMISSION_UNSET E_RbacIdentities_PERMISSION = 0
	// RbacIdentities_PERMISSION_ALL corresponds to the value ALL of RbacIdentities_PERMISSION
	RbacIdentities_PERMISSION_ALL E_RbacIdentities_PERMISSION = 1
	// RbacIdentities_PERMISSION_CREATE corresponds to the value CREATE of RbacIdentities_PERMISSION
	RbacIdentities_PERMISSION_CREATE E_RbacIdentities_PERMISSION = 2
	// RbacIdentities_PERMISSION_READ corresponds to the value READ of RbacIdentities_PERMISSION
	RbacIdentities_PERMISSION_READ E_RbacIdentities_PERMISSION = 3
)


// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_RbacIdentities_NOUNTYPE": {
		1: {Name: "CONFIG", DefiningModule: "rbac-identities"},
		2: {Name: "GRPC", DefiningModule: "rbac-identities"},
	},
	"E_RbacIdentities_PERMISSION": {
		1: {Name: "ALL", DefiningModule: "rbac-identities"},
		2: {Name: "CREATE", DefiningModule: "rbac-identities"},
		3: {Name: "READ", DefiningModule: "rbac-identities"},
	},
}


var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5c, 0xdd, 0x73, 0xe2, 0x36,
		0x10, 0x7f, 0xe7, 0xaf, 0xf0, 0xe8, 0x91, 0x09, 0xc6, 0x24, 0x24, 0xb9, 0xe3, 0xa5, 0xc3, 0x25,
		0x24, 0xcd, 0x1c, 0x21, 0x8c, 0x93, 0x76, 0xda, 0x72, 0x84, 0x51, 0x8c, 0xe0, 0x34, 0x35, 0x36,
		0x23, 0x9b, 0x36, 0xb4, 0xe1, 0x7f, 0xef, 0xf8, 0x83, 0x0f, 0x07, 0x6c, 0xaf, 0x24, 0x87, 0x94,
		0x9c, 0x5e, 0x32, 0xc4, 0xd6, 0xc7, 0x7a, 0xf7, 0xa7, 0xdd, 0x9f, 0xb4, 0x6b, 0xff, 0x5b, 0xd2,
		0x34, 0x4d, 0x43, 0x1d, 0x3c, 0x21, 0xa8, 0xa1, 0xa1, 0x21, 0xf9, 0x8b, 0x5a, 0x04, 0x1d, 0x45,
		0x57, 0xbf, 0x52, 0x67, 0x88, 0x1a, 0x5a, 0x2d, 0xfe, 0xf7, 0xc2, 0x75, 0x46, 0x74, 0x8c, 0x1a,
		0x9a, 0x11, 0x5f, 0xb8, 0xa4, 0x0c, 0x35, 0xb4, 0x68, 0x88, 0xf0, 0x02, 0x7b, 0xc2, 0x56, 0xe2,
		0x4a, 0x62, 0xf0, 0xf0, 0xee, 0x51, 0xf2, 0x5e, 0x72, 0x8a, 0xd5, 0xe5, 0xd7, 0x53, 0xad, 0x6e,
		0x74, 0x19, 0x19, 0xd1, 0xe7, 0xad, 0x39, 0xf2, 0xe6, 0x09, 0xef, 0xdf, 0xbb, 0x33, 0x66, 0x91,
		0x9d, 0x7d, 0x23, 0x59, 0xc8, 0xfc, 0x6f, 0x97, 0x05, 0xe2, 0xa0, 0x69, 0x34, 0xcd, 0xd1, 0xee,
		0x86, 0x3f, 0x63, 0xaf, 0xc9, 0xc6, 0xb3, 0x09, 0x71, 0x7c, 0xd4, 0xd0, 0x7c, 0x36, 0x23, 0x29,
		0x0d, 0x37, 0x5a, 0x45, 0x52, 0x6d, 0x35, 0x5b, 0x24, 0xae, 0x2c, 0x5e, 0x3d, 0xed, 0x6b, 0x05,
		0xaf, 0x6e, 0x8c, 0x99, 0x3b, 0x9b, 0xa6, 0x3f, 0xc9, 0x52, 0x13, 0x51, 0xb3, 0x14, 0xe1, 0x76,
		0xab, 0x3e, 0xd7, 0x04, 0x10, 0x53, 0x40, 0x4d, 0x02, 0x35, 0x0d, 0xb7, 0x89, 0xb8, 0x4d, 0xc5,
		0x61, 0xb2, 0xdd, 0xa6, 0x4b, 0x31, 0x61, 0xae, 0x29, 0x57, 0x0d, 0x86, 0xc4, 0xb3, 0x18, 0x9d,
		0xfa, 0xd4, 0x75, 0xf2, 0xf5, 0xb0, 0x5e, 0xaf, 0xeb, 0x4e, 0x39, 0x0f, 0x16, 0x9b, 0xdb, 0xc8,
		0x69, 0x96, 0x67, 0x76, 0x1e, 0xf3, 0xf3, 0xc2, 0x80, 0x17, 0x0e, 0xc2, 0xb0, 0x10, 0x86, 0x87,
		0x00, 0x4c, 0xb2, 0xe1, 0x92, 0x03, 0x9b, 0xd5, 0x7c, 0x0f, 0xf3, 0x29, 0xe1, 0xd3, 0xb5, 0xe7,
		0x33, 0xea, 0x8c, 0x21, 0xda, 0x5e, 0x3a, 0x82, 0x4f, 0x80, 0xb6, 0x6d, 0xe2, 0x8c, 0xfd, 0xef,
		0xa8, 0xa1, 0xf5, 0x40, 0x7a, 0x82, 0xd9, 0x2f, 0x1c, 0xf9, 0x96, 0x3a, 0x60, 0x83, 0x73, 0x82,
		0x7a, 0xab, 0xdb, 0xaf, 0xd8, 0x9e, 0x91, 0x74, 0xdf, 0x97, 0xda, 0xef, 0x8a, 0x61, 0x2b, 0x58,
		0x6b, 0x97, 0x74, 0x4c, 0x7d, 0x2f, 0x98, 0x18, 0xdc, 0x7f, 0x71, 0xc4, 0xa1, 0x0a, 0xfc, 0xbc,
		0x7f, 0x55, 0x18, 0xc6, 0x1e, 0x95, 0x51, 0x2a, 0xa6, 0x55, 0xbf, 0x24, 0xd6, 0x3f, 0xc3, 0x18,
		0x51, 0xcc, 0xa4, 0x43, 0xb8, 0x0f, 0x5e, 0x76, 0x50, 0xfe, 0x57, 0xf9, 0xdf, 0x0d, 0x5d, 0xcf,
		0xb1, 0x33, 0xae, 0xd0, 0x21, 0x71, 0x7c, 0x3a, 0xa2, 0x84, 0x29, 0x47, 0xfc, 0x83, 0x39, 0xe2,
		0x13, 0x41, 0x55, 0x1c, 0xa2, 0x1b, 0x06, 0xe0, 0xb5, 0x8b, 0x7d, 0x9f, 0x30, 0x07, 0x0c, 0x58,
		0xd4, 0xc3, 0x95, 0x7f, 0x9a, 0x95, 0x3f, 0x06, 0xfd, 0xf8, 0x87, 0x51, 0xf9, 0xfc, 0xed, 0x5b,
		0x65, 0xa0, 0xf7, 0xcb, 0x50, 0xe7, 0xa2, 0xbf, 0xe8, 0xfa, 0x4b, 0xef, 0xf1, 0xf9, 0xb7, 0xbe,
		0x5e, 0x7e, 0xd1, 0x7b, 0x8f, 0x93, 0xdb, 0xf0, 0x87, 0xde, 0x7b, 0xb4, 0xdb, 0x7d, 0xbd, 0x8c,
		0xde, 0x25, 0xbc, 0x30, 0xd7, 0x26, 0xf0, 0xd8, 0x12, 0xb6, 0x86, 0x05, 0x96, 0x9a, 0x0a, 0x2c,
		0x87, 0x18, 0x58, 0xf2, 0xf6, 0x85, 0x42, 0xfb, 0x43, 0x89, 0x7d, 0xa2, 0xa0, 0x47, 0x07, 0xc3,
		0x4b, 0x04, 0x66, 0xa2, 0x70, 0x13, 0x85, 0x9d, 0x34, 0xfc, 0xa4, 0x61, 0x28, 0x01, 0x47, 0x4e,
		0xe7, 0x0e, 0xb4, 0x16, 0x98, 0xff, 0x88, 0xef, 0x43, 0x45, 0x68, 0x90, 0x28, 0x1d, 0xe2, 0xa7,
		0x45, 0x52, 0xf4, 0x48, 0x92, 0x26, 0xc9, 0xd2, 0xa5, 0x22, 0xb8, 0x82, 0x00, 0x7d, 0x92, 0xa2,
		0x51, 0x85, 0xab, 0xcc, 0x30, 0xde, 0x51, 0x69, 0xa5, 0xb7, 0x69, 0xdd, 0x2f, 0x88, 0xc0, 0x01,
		0x8c, 0x1a, 0x52, 0x11, 0xc0, 0xb6, 0x78, 0x27, 0x85, 0xc9, 0xdd, 0x1d, 0xab, 0xa8, 0xa3, 0xa2,
		0x4e, 0xa1, 0x51, 0xc7, 0x26, 0x78, 0xc4, 0xc8, 0x48, 0x24, 0xec, 0x9c, 0x73, 0xf4, 0xe9, 0xe2,
		0x30, 0xe8, 0xa0, 0x6a, 0xa0, 0xa5, 0x6a, 0x00, 0xf5, 0x6a, 0x8c, 0xf7, 0xa2, 0x56, 0xa6, 0x14,
		0xb9, 0xfc, 0x4a, 0xe6, 0xe0, 0x25, 0x88, 0xda, 0xd4, 0xf3, 0x9b, 0xbe, 0x0f, 0xa4, 0xa3, 0xb7,
		0xd4, 0x69, 0xd9, 0x24, 0x00, 0x89, 0x07, 0x5b, 0x7e, 0x41, 0x14, 0xd8, 0xe8, 0x51, 0xfb, 0x54,
		0xaf, 0x9f, 0x9d, 0xd7, 0xeb, 0xc6, 0xf9, 0xc9, 0xb9, 0xf1, 0xf9, 0xf4, 0xb4, 0x76, 0x56, 0x3b,
		0x05, 0x0c, 0x72, 0xc7, 0x86, 0x84, 0x91, 0xe1, 0x97, 0xe0, 0xb9, 0x9c, 0x99, 0x6d, 0x4b, 0xa9,
		0xa7, 0xe9, 0x38, 0xae, 0x8f, 0xc1, 0x8c, 0x1a, 0x79, 0xd6, 0x77, 0x32, 0xc1, 0xd3, 0xa4, 0xcd,
		0x83, 0x3f, 0xe1, 0x11, 0x60, 0x15, 0xb0, 0x59, 0x8b, 0x86, 0xf1, 0xd9, 0xcc, 0xf2, 0x9d, 0x18,
		0xa9, 0xe6, 0x13, 0xb6, 0x06, 0xe1, 0x9f, 0xeb, 0x60, 0x94, 0x81, 0x19, 0x8c, 0x22, 0xba, 0xf1,
		0xe4, 0x4a, 0x49, 0xc5, 0xe8, 0xc8, 0x3e, 0xbf, 0x84, 0xc1, 0x02, 0x0e, 0x07, 0x29, 0x18, 0xc0,
		0xcc, 0x9f, 0xf6, 0xbc, 0x40, 0x73, 0xe7, 0x98, 0x39, 0x2b, 0x8d, 0x99, 0x69, 0xd9, 0xdd, 0x46,
		0xdd, 0x36, 0xd9, 0x0e, 0xf1, 0xb3, 0x4f, 0x0d, 0x20, 0xa7, 0x05, 0x2a, 0xdb, 0x2b, 0x19, 0xe8,
		0x54, 0xb6, 0x57, 0x1d, 0x0a, 0xa9, 0x6c, 0x6f, 0x51, 0xbb, 0x69, 0x95, 0x64, 0x90, 0xdb, 0x1d,
		0xab, 0x6c, 0x6f, 0x41, 0xc7, 0xf1, 0xc1, 0x3e, 0xe1, 0xf8, 0x09, 0xee, 0x82, 0xe3, 0xf6, 0x05,
		0x7b, 0xdf, 0x9a, 0xf2, 0xbe, 0x07, 0xed, 0x7d, 0x87, 0xc4, 0xa2, 0x13, 0x6c, 0x9f, 0xd5, 0x79,
		0x1c, 0xf0, 0x31, 0xa0, 0xed, 0xd6, 0xaa, 0x03, 0x64, 0x15, 0x91, 0x89, 0x9d, 0x31, 0x51, 0x4e,
		0x7b, 0xa9, 0xb1, 0x0f, 0xe3, 0xb4, 0x8f, 0x0d, 0x79, 0xaf, 0x7d, 0xf2, 0x21, 0xbc, 0xf6, 0x94,
		0xb0, 0x09, 0xf5, 0x3c, 0x2e, 0xf2, 0xbc, 0xd1, 0x47, 0x25, 0x54, 0x55, 0x42, 0x55, 0x43, 0x8e,
		0x3b, 0x13, 0xc8, 0xa4, 0x86, 0xbd, 0xd4, 0x61, 0xb6, 0x3a, 0xcc, 0xde, 0xe3, 0x61, 0xb6, 0x4a,
		0xa1, 0x4a, 0x07, 0x51, 0x59, 0x5e, 0x51, 0xc4, 0x3e, 0x48, 0x80, 0x67, 0x48, 0xf1, 0x8d, 0xa2,
		0x55, 0x76, 0xfc, 0x21, 0x53, 0xa8, 0x7c, 0xd9, 0x1e, 0xae, 0x1a, 0xb6, 0x55, 0xc7, 0x6a, 0xa2,
		0x86, 0xad, 0x3a, 0xd0, 0xcb, 0x3f, 0xf5, 0xcb, 0xa8, 0xe8, 0x34, 0x2f, 0xd0, 0x0f, 0x71, 0xe5,
		0x79, 0x36, 0xd7, 0x2c, 0x5f, 0xbe, 0x67, 0x13, 0xba, 0xd2, 0x79, 0x9f, 0xd5, 0x60, 0x5c, 0xf9,
		0x1f, 0x38, 0x1a, 0x20, 0x09, 0x70, 0x77, 0x4a, 0x18, 0x16, 0x2b, 0xbf, 0x5a, 0x77, 0x55, 0xcc,
		0x41, 0x31, 0x87, 0x3d, 0x32, 0x87, 0xa8, 0xfe, 0xdc, 0x9f, 0x0b, 0xa6, 0xc2, 0x79, 0x56, 0xe6,
		0x4d, 0x3c, 0xd5, 0x17, 0xec, 0x09, 0x18, 0x7b, 0x29, 0x70, 0xb7, 0x65, 0xde, 0xde, 0xdc, 0xdf,
		0xdf, 0xdc, 0x75, 0x90, 0xc8, 0x2e, 0xd9, 0xe3, 0xf6, 0xcd, 0x62, 0x14, 0x26, 0x21, 0xf3, 0x85,
		0xd9, 0x6a, 0x3e, 0xb4, 0xd0, 0x3e, 0x78, 0x80, 0xa4, 0xa4, 0x66, 0xab, 0x79, 0x79, 0x08, 0x72,
		0x36, 0xdb, 0x6d, 0xf4, 0xc6, 0x0c, 0xa1, 0xbf, 0xf7, 0x83, 0x10, 0x48, 0x8c, 0xf1, 0x79, 0x56,
		0xfa, 0x4a, 0x5d, 0x61, 0x2f, 0x15, 0x59, 0x54, 0x64, 0x51, 0x91, 0x25, 0x5d, 0xe0, 0xce, 0xdd,
		0x2f, 0x9d, 0x87, 0xdf, 0xbb, 0xad, 0x03, 0x8a, 0x2b, 0x77, 0x9d, 0xab, 0x9b, 0xeb, 0x43, 0xf0,
		0xd7, 0xd7, 0x66, 0xf7, 0xe2, 0x03, 0x3a, 0xec, 0xff, 0x47, 0x71, 0x59, 0x58, 0x55, 0x08, 0x3e,
		0xbd, 0xd6, 0xb2, 0xea, 0x90, 0x4c, 0xd7, 0x26, 0x83, 0xee, 0x7a, 0xa8, 0x37, 0x7a, 0xbf, 0x89,
		0xe7, 0xed, 0x59, 0x58, 0x6d, 0xa2, 0x2a, 0x67, 0x29, 0x30, 0x0a, 0xa9, 0x97, 0x67, 0x55, 0x5d,
		0x8b, 0x7a, 0x79, 0x56, 0x53, 0x2f, 0xcf, 0x66, 0x8d, 0xf0, 0x7e, 0x2f, 0xcf, 0x8a, 0xd4, 0x30,
		0x67, 0x46, 0x11, 0x55, 0xc2, 0x9c, 0x24, 0x13, 0x22, 0x15, 0xcc, 0xe9, 0x55, 0xe9, 0x0b, 0xce,
		0x6f, 0x5a, 0xe5, 0x3c, 0x42, 0xaa, 0xe8, 0xbb, 0xbe, 0xe8, 0x95, 0x22, 0x6d, 0x52, 0xd0, 0xb5,
		0x38, 0xd1, 0xaf, 0x58, 0xa0, 0x34, 0x41, 0x10, 0xf5, 0xae, 0xf0, 0x9f, 0xc4, 0x74, 0xdd, 0xed,
		0xa8, 0xfa, 0x5a, 0x38, 0xb4, 0x79, 0x2b, 0x21, 0xcb, 0x65, 0xf4, 0x21, 0xb5, 0x68, 0xc2, 0xd2,
		0xe2, 0x3f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xae, 0x5c, 0xfb, 0x89,
		0x67, 0x4d, 0x00, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
	"/rbac/role/permission/operation": []reflect.Type{
		reflect.TypeOf((E_RbacIdentities_PERMISSION)(0)),
	},
	"/rbac/role/permission/type": []reflect.Type{
		reflect.TypeOf((E_RbacIdentities_NOUNTYPE)(0)),
	},
}

