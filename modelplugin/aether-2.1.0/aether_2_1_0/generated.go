// Code generated by YGOT. DO NOT EDIT.
/*
Package aether_2_1_0 is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/smbaker/gopath/pkg/mod/github.com/openconfig/ygot@v0.8.12/genutil/names.go
using the following YANG input files:
	- aether-subscriber@2020-10-22.yang
	- apn-profile@2021-03-04.yang
	- up-profile@2020-10-22.yang
	- qos-profile@2020-10-22.yang
	- access-profile@2020-10-22.yang
	- security-profile@2020-11-30.yang
	- enterprise@2020-11-30.yang
	- connectivity-service@2020-11-30.yang
	- service-group@2021-03-04.yang
	- service@2021-03-04.yang
Imported modules were sourced from:
	- yang/...
*/
package aether_2_1_0

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Device{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// AccessProfile_AccessProfile represents the /access-profile/access-profile YANG schema element.
type AccessProfile_AccessProfile struct {
	AccessProfile	map[string]*AccessProfile_AccessProfile_AccessProfile	`path:"access-profile" module:"access-profile"`
}

// IsYANGGoStruct ensures that AccessProfile_AccessProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*AccessProfile_AccessProfile) IsYANGGoStruct() {}

// NewAccessProfile creates a new entry in the AccessProfile list of the
// AccessProfile_AccessProfile struct. The keys of the list are populated from the input
// arguments.
func (t *AccessProfile_AccessProfile) NewAccessProfile(Id string) (*AccessProfile_AccessProfile_AccessProfile, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AccessProfile == nil {
		t.AccessProfile = make(map[string]*AccessProfile_AccessProfile_AccessProfile)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AccessProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AccessProfile", key)
	}

	t.AccessProfile[key] = &AccessProfile_AccessProfile_AccessProfile{
		Id: &Id,
	}

	return t.AccessProfile[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *AccessProfile_AccessProfile) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["AccessProfile_AccessProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *AccessProfile_AccessProfile) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// AccessProfile_AccessProfile_AccessProfile represents the /access-profile/access-profile/access-profile YANG schema element.
type AccessProfile_AccessProfile_AccessProfile struct {
	Description	*string	`path:"description" module:"access-profile"`
	DisplayName	*string	`path:"display-name" module:"access-profile"`
	Filter	*string	`path:"filter" module:"access-profile"`
	Id	*string	`path:"id" module:"access-profile"`
	Type	*string	`path:"type" module:"access-profile"`
}

// IsYANGGoStruct ensures that AccessProfile_AccessProfile_AccessProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*AccessProfile_AccessProfile_AccessProfile) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the AccessProfile_AccessProfile_AccessProfile struct, which is a YANG list entry.
func (t *AccessProfile_AccessProfile_AccessProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *AccessProfile_AccessProfile_AccessProfile) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["AccessProfile_AccessProfile_AccessProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *AccessProfile_AccessProfile_AccessProfile) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// AetherSubscriber_Subscriber represents the /aether-subscriber/subscriber YANG schema element.
type AetherSubscriber_Subscriber struct {
	Ue	map[string]*AetherSubscriber_Subscriber_Ue	`path:"ue" module:"aether-subscriber"`
}

// IsYANGGoStruct ensures that AetherSubscriber_Subscriber implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*AetherSubscriber_Subscriber) IsYANGGoStruct() {}

// NewUe creates a new entry in the Ue list of the
// AetherSubscriber_Subscriber struct. The keys of the list are populated from the input
// arguments.
func (t *AetherSubscriber_Subscriber) NewUe(Id string) (*AetherSubscriber_Subscriber_Ue, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ue == nil {
		t.Ue = make(map[string]*AetherSubscriber_Subscriber_Ue)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ue", key)
	}

	t.Ue[key] = &AetherSubscriber_Subscriber_Ue{
		Id: &Id,
	}

	return t.Ue[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *AetherSubscriber_Subscriber) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["AetherSubscriber_Subscriber"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *AetherSubscriber_Subscriber) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// AetherSubscriber_Subscriber_Ue represents the /aether-subscriber/subscriber/ue YANG schema element.
type AetherSubscriber_Subscriber_Ue struct {
	DisplayName	*string	`path:"display-name" module:"aether-subscriber"`
	Enabled	*bool	`path:"enabled" module:"aether-subscriber"`
	Enterprise	*string	`path:"enterprise" module:"aether-subscriber"`
	Id	*string	`path:"id" module:"aether-subscriber"`
	ImsiRangeFrom	*uint64	`path:"imsi-range-from" module:"aether-subscriber"`
	ImsiRangeTo	*uint64	`path:"imsi-range-to" module:"aether-subscriber"`
	ImsiWildcard	*string	`path:"imsi-wildcard" module:"aether-subscriber"`
	Priority	*uint32	`path:"priority" module:"aether-subscriber"`
	Profiles	*AetherSubscriber_Subscriber_Ue_Profiles	`path:"profiles" module:"aether-subscriber"`
	RequestedApn	*string	`path:"requested-apn" module:"aether-subscriber"`
	ServingPlmn	*AetherSubscriber_Subscriber_Ue_ServingPlmn	`path:"serving-plmn" module:"aether-subscriber"`
}

// IsYANGGoStruct ensures that AetherSubscriber_Subscriber_Ue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*AetherSubscriber_Subscriber_Ue) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the AetherSubscriber_Subscriber_Ue struct, which is a YANG list entry.
func (t *AetherSubscriber_Subscriber_Ue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *AetherSubscriber_Subscriber_Ue) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["AetherSubscriber_Subscriber_Ue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *AetherSubscriber_Subscriber_Ue) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// AetherSubscriber_Subscriber_Ue_Profiles represents the /aether-subscriber/subscriber/ue/profiles YANG schema element.
type AetherSubscriber_Subscriber_Ue_Profiles struct {
	AccessProfile	map[string]*AetherSubscriber_Subscriber_Ue_Profiles_AccessProfile	`path:"access-profile" module:"aether-subscriber"`
	ApnProfile	*string	`path:"apn-profile" module:"aether-subscriber"`
	QosProfile	*string	`path:"qos-profile" module:"aether-subscriber"`
	SecurityProfile	*string	`path:"security-profile" module:"aether-subscriber"`
	UpProfile	*string	`path:"up-profile" module:"aether-subscriber"`
}

// IsYANGGoStruct ensures that AetherSubscriber_Subscriber_Ue_Profiles implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*AetherSubscriber_Subscriber_Ue_Profiles) IsYANGGoStruct() {}

// NewAccessProfile creates a new entry in the AccessProfile list of the
// AetherSubscriber_Subscriber_Ue_Profiles struct. The keys of the list are populated from the input
// arguments.
func (t *AetherSubscriber_Subscriber_Ue_Profiles) NewAccessProfile(AccessProfile string) (*AetherSubscriber_Subscriber_Ue_Profiles_AccessProfile, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AccessProfile == nil {
		t.AccessProfile = make(map[string]*AetherSubscriber_Subscriber_Ue_Profiles_AccessProfile)
	}

	key := AccessProfile

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AccessProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AccessProfile", key)
	}

	t.AccessProfile[key] = &AetherSubscriber_Subscriber_Ue_Profiles_AccessProfile{
		AccessProfile: &AccessProfile,
	}

	return t.AccessProfile[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *AetherSubscriber_Subscriber_Ue_Profiles) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["AetherSubscriber_Subscriber_Ue_Profiles"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *AetherSubscriber_Subscriber_Ue_Profiles) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// AetherSubscriber_Subscriber_Ue_Profiles_AccessProfile represents the /aether-subscriber/subscriber/ue/profiles/access-profile YANG schema element.
type AetherSubscriber_Subscriber_Ue_Profiles_AccessProfile struct {
	AccessProfile	*string	`path:"access-profile" module:"aether-subscriber"`
	Allowed	*bool	`path:"allowed" module:"aether-subscriber"`
}

// IsYANGGoStruct ensures that AetherSubscriber_Subscriber_Ue_Profiles_AccessProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*AetherSubscriber_Subscriber_Ue_Profiles_AccessProfile) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the AetherSubscriber_Subscriber_Ue_Profiles_AccessProfile struct, which is a YANG list entry.
func (t *AetherSubscriber_Subscriber_Ue_Profiles_AccessProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AccessProfile == nil {
		return nil, fmt.Errorf("nil value for key AccessProfile")
	}

	return map[string]interface{}{
		"access-profile": *t.AccessProfile,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *AetherSubscriber_Subscriber_Ue_Profiles_AccessProfile) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["AetherSubscriber_Subscriber_Ue_Profiles_AccessProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *AetherSubscriber_Subscriber_Ue_Profiles_AccessProfile) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// AetherSubscriber_Subscriber_Ue_ServingPlmn represents the /aether-subscriber/subscriber/ue/serving-plmn YANG schema element.
type AetherSubscriber_Subscriber_Ue_ServingPlmn struct {
	Mcc	*uint32	`path:"mcc" module:"aether-subscriber"`
	Mnc	*uint32	`path:"mnc" module:"aether-subscriber"`
	Tac	*uint32	`path:"tac" module:"aether-subscriber"`
}

// IsYANGGoStruct ensures that AetherSubscriber_Subscriber_Ue_ServingPlmn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*AetherSubscriber_Subscriber_Ue_ServingPlmn) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *AetherSubscriber_Subscriber_Ue_ServingPlmn) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["AetherSubscriber_Subscriber_Ue_ServingPlmn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *AetherSubscriber_Subscriber_Ue_ServingPlmn) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ApnProfile_ApnProfile represents the /apn-profile/apn-profile YANG schema element.
type ApnProfile_ApnProfile struct {
	ApnProfile	map[string]*ApnProfile_ApnProfile_ApnProfile	`path:"apn-profile" module:"apn-profile"`
}

// IsYANGGoStruct ensures that ApnProfile_ApnProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ApnProfile_ApnProfile) IsYANGGoStruct() {}

// NewApnProfile creates a new entry in the ApnProfile list of the
// ApnProfile_ApnProfile struct. The keys of the list are populated from the input
// arguments.
func (t *ApnProfile_ApnProfile) NewApnProfile(Id string) (*ApnProfile_ApnProfile_ApnProfile, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ApnProfile == nil {
		t.ApnProfile = make(map[string]*ApnProfile_ApnProfile_ApnProfile)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ApnProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ApnProfile", key)
	}

	t.ApnProfile[key] = &ApnProfile_ApnProfile_ApnProfile{
		Id: &Id,
	}

	return t.ApnProfile[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ApnProfile_ApnProfile) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ApnProfile_ApnProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ApnProfile_ApnProfile) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ApnProfile_ApnProfile_ApnProfile represents the /apn-profile/apn-profile/apn-profile YANG schema element.
type ApnProfile_ApnProfile_ApnProfile struct {
	ApnName	*string	`path:"apn-name" module:"apn-profile"`
	Description	*string	`path:"description" module:"apn-profile"`
	DisplayName	*string	`path:"display-name" module:"apn-profile"`
	DnsPrimary	*string	`path:"dns-primary" module:"apn-profile"`
	DnsSecondary	*string	`path:"dns-secondary" module:"apn-profile"`
	GxEnabled	*bool	`path:"gx-enabled" module:"apn-profile"`
	Id	*string	`path:"id" module:"apn-profile"`
	Mtu	*uint32	`path:"mtu" module:"apn-profile"`
	ServiceGroup	*string	`path:"service-group" module:"apn-profile"`
}

// IsYANGGoStruct ensures that ApnProfile_ApnProfile_ApnProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ApnProfile_ApnProfile_ApnProfile) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the ApnProfile_ApnProfile_ApnProfile struct, which is a YANG list entry.
func (t *ApnProfile_ApnProfile_ApnProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ApnProfile_ApnProfile_ApnProfile) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ApnProfile_ApnProfile_ApnProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ApnProfile_ApnProfile_ApnProfile) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ConnectivityService_ConnectivityService represents the /connectivity-service/connectivity-service YANG schema element.
type ConnectivityService_ConnectivityService struct {
	ConnectivityService	map[string]*ConnectivityService_ConnectivityService_ConnectivityService	`path:"connectivity-service" module:"connectivity-service"`
}

// IsYANGGoStruct ensures that ConnectivityService_ConnectivityService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ConnectivityService_ConnectivityService) IsYANGGoStruct() {}

// NewConnectivityService creates a new entry in the ConnectivityService list of the
// ConnectivityService_ConnectivityService struct. The keys of the list are populated from the input
// arguments.
func (t *ConnectivityService_ConnectivityService) NewConnectivityService(Id string) (*ConnectivityService_ConnectivityService_ConnectivityService, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ConnectivityService == nil {
		t.ConnectivityService = make(map[string]*ConnectivityService_ConnectivityService_ConnectivityService)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ConnectivityService[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ConnectivityService", key)
	}

	t.ConnectivityService[key] = &ConnectivityService_ConnectivityService_ConnectivityService{
		Id: &Id,
	}

	return t.ConnectivityService[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ConnectivityService_ConnectivityService) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ConnectivityService_ConnectivityService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ConnectivityService_ConnectivityService) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ConnectivityService_ConnectivityService_ConnectivityService represents the /connectivity-service/connectivity-service/connectivity-service YANG schema element.
type ConnectivityService_ConnectivityService_ConnectivityService struct {
	Description	*string	`path:"description" module:"connectivity-service"`
	DisplayName	*string	`path:"display-name" module:"connectivity-service"`
	HssEndpoint	*string	`path:"hss-endpoint" module:"connectivity-service"`
	Id	*string	`path:"id" module:"connectivity-service"`
	SpgwcEndpoint	*string	`path:"spgwc-endpoint" module:"connectivity-service"`
}

// IsYANGGoStruct ensures that ConnectivityService_ConnectivityService_ConnectivityService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ConnectivityService_ConnectivityService_ConnectivityService) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the ConnectivityService_ConnectivityService_ConnectivityService struct, which is a YANG list entry.
func (t *ConnectivityService_ConnectivityService_ConnectivityService) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ConnectivityService_ConnectivityService_ConnectivityService) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ConnectivityService_ConnectivityService_ConnectivityService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ConnectivityService_ConnectivityService_ConnectivityService) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Device represents the /device YANG schema element.
type Device struct {
	AccessProfile	*AccessProfile_AccessProfile	`path:"access-profile" module:"access-profile"`
	ApnProfile	*ApnProfile_ApnProfile	`path:"apn-profile" module:"apn-profile"`
	ConnectivityService	*ConnectivityService_ConnectivityService	`path:"connectivity-service" module:"connectivity-service"`
	Enterprise	*Enterprise_Enterprise	`path:"enterprise" module:"enterprise"`
	QosProfile	*QosProfile_QosProfile	`path:"qos-profile" module:"qos-profile"`
	SecurityProfile	*SecurityProfile_SecurityProfile	`path:"security-profile" module:"security-profile"`
	Service	*Service_Service	`path:"service" module:"service"`
	ServiceGroup	*ServiceGroup_ServiceGroup	`path:"service-group" module:"service-group"`
	ServiceRule	*ServiceRule_ServiceRule	`path:"service-rule" module:"service-rule"`
	Subscriber	*AetherSubscriber_Subscriber	`path:"subscriber" module:"aether-subscriber"`
	UpProfile	*UpProfile_UpProfile	`path:"up-profile" module:"up-profile"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Enterprise_Enterprise represents the /enterprise/enterprise YANG schema element.
type Enterprise_Enterprise struct {
	Enterprise	map[string]*Enterprise_Enterprise_Enterprise	`path:"enterprise" module:"enterprise"`
}

// IsYANGGoStruct ensures that Enterprise_Enterprise implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Enterprise_Enterprise) IsYANGGoStruct() {}

// NewEnterprise creates a new entry in the Enterprise list of the
// Enterprise_Enterprise struct. The keys of the list are populated from the input
// arguments.
func (t *Enterprise_Enterprise) NewEnterprise(Id string) (*Enterprise_Enterprise_Enterprise, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Enterprise == nil {
		t.Enterprise = make(map[string]*Enterprise_Enterprise_Enterprise)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Enterprise[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Enterprise", key)
	}

	t.Enterprise[key] = &Enterprise_Enterprise_Enterprise{
		Id: &Id,
	}

	return t.Enterprise[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Enterprise_Enterprise) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Enterprise_Enterprise"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Enterprise_Enterprise) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Enterprise_Enterprise_Enterprise represents the /enterprise/enterprise/enterprise YANG schema element.
type Enterprise_Enterprise_Enterprise struct {
	ConnectivityService	map[string]*Enterprise_Enterprise_Enterprise_ConnectivityService	`path:"connectivity-service" module:"enterprise"`
	Description	*string	`path:"description" module:"enterprise"`
	DisplayName	*string	`path:"display-name" module:"enterprise"`
	Id	*string	`path:"id" module:"enterprise"`
}

// IsYANGGoStruct ensures that Enterprise_Enterprise_Enterprise implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Enterprise_Enterprise_Enterprise) IsYANGGoStruct() {}

// NewConnectivityService creates a new entry in the ConnectivityService list of the
// Enterprise_Enterprise_Enterprise struct. The keys of the list are populated from the input
// arguments.
func (t *Enterprise_Enterprise_Enterprise) NewConnectivityService(ConnectivityService string) (*Enterprise_Enterprise_Enterprise_ConnectivityService, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ConnectivityService == nil {
		t.ConnectivityService = make(map[string]*Enterprise_Enterprise_Enterprise_ConnectivityService)
	}

	key := ConnectivityService

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ConnectivityService[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ConnectivityService", key)
	}

	t.ConnectivityService[key] = &Enterprise_Enterprise_Enterprise_ConnectivityService{
		ConnectivityService: &ConnectivityService,
	}

	return t.ConnectivityService[key], nil
}

// ΛListKeyMap returns the keys of the Enterprise_Enterprise_Enterprise struct, which is a YANG list entry.
func (t *Enterprise_Enterprise_Enterprise) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Enterprise_Enterprise_Enterprise) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Enterprise_Enterprise_Enterprise"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Enterprise_Enterprise_Enterprise) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Enterprise_Enterprise_Enterprise_ConnectivityService represents the /enterprise/enterprise/enterprise/connectivity-service YANG schema element.
type Enterprise_Enterprise_Enterprise_ConnectivityService struct {
	ConnectivityService	*string	`path:"connectivity-service" module:"enterprise"`
	Enabled	*bool	`path:"enabled" module:"enterprise"`
}

// IsYANGGoStruct ensures that Enterprise_Enterprise_Enterprise_ConnectivityService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Enterprise_Enterprise_Enterprise_ConnectivityService) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Enterprise_Enterprise_Enterprise_ConnectivityService struct, which is a YANG list entry.
func (t *Enterprise_Enterprise_Enterprise_ConnectivityService) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ConnectivityService == nil {
		return nil, fmt.Errorf("nil value for key ConnectivityService")
	}

	return map[string]interface{}{
		"connectivity-service": *t.ConnectivityService,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Enterprise_Enterprise_Enterprise_ConnectivityService) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Enterprise_Enterprise_Enterprise_ConnectivityService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Enterprise_Enterprise_Enterprise_ConnectivityService) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// QosProfile_QosProfile represents the /qos-profile/qos-profile YANG schema element.
type QosProfile_QosProfile struct {
	QosProfile	map[string]*QosProfile_QosProfile_QosProfile	`path:"qos-profile" module:"qos-profile"`
}

// IsYANGGoStruct ensures that QosProfile_QosProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*QosProfile_QosProfile) IsYANGGoStruct() {}

// NewQosProfile creates a new entry in the QosProfile list of the
// QosProfile_QosProfile struct. The keys of the list are populated from the input
// arguments.
func (t *QosProfile_QosProfile) NewQosProfile(Id string) (*QosProfile_QosProfile_QosProfile, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QosProfile == nil {
		t.QosProfile = make(map[string]*QosProfile_QosProfile_QosProfile)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QosProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QosProfile", key)
	}

	t.QosProfile[key] = &QosProfile_QosProfile_QosProfile{
		Id: &Id,
	}

	return t.QosProfile[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *QosProfile_QosProfile) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["QosProfile_QosProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *QosProfile_QosProfile) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// QosProfile_QosProfile_QosProfile represents the /qos-profile/qos-profile/qos-profile YANG schema element.
type QosProfile_QosProfile_QosProfile struct {
	ApnAmbr	*QosProfile_QosProfile_QosProfile_ApnAmbr	`path:"apn-ambr" module:"qos-profile"`
	Arp	*QosProfile_QosProfile_QosProfile_Arp	`path:"arp" module:"qos-profile"`
	Description	*string	`path:"description" module:"qos-profile"`
	DisplayName	*string	`path:"display-name" module:"qos-profile"`
	Id	*string	`path:"id" module:"qos-profile"`
	Qci	*uint32	`path:"qci" module:"qos-profile"`
}

// IsYANGGoStruct ensures that QosProfile_QosProfile_QosProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*QosProfile_QosProfile_QosProfile) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the QosProfile_QosProfile_QosProfile struct, which is a YANG list entry.
func (t *QosProfile_QosProfile_QosProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *QosProfile_QosProfile_QosProfile) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["QosProfile_QosProfile_QosProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *QosProfile_QosProfile_QosProfile) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// QosProfile_QosProfile_QosProfile_ApnAmbr represents the /qos-profile/qos-profile/qos-profile/apn-ambr YANG schema element.
type QosProfile_QosProfile_QosProfile_ApnAmbr struct {
	Downlink	*uint32	`path:"downlink" module:"qos-profile"`
	Uplink	*uint32	`path:"uplink" module:"qos-profile"`
}

// IsYANGGoStruct ensures that QosProfile_QosProfile_QosProfile_ApnAmbr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*QosProfile_QosProfile_QosProfile_ApnAmbr) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *QosProfile_QosProfile_QosProfile_ApnAmbr) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["QosProfile_QosProfile_QosProfile_ApnAmbr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *QosProfile_QosProfile_QosProfile_ApnAmbr) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// QosProfile_QosProfile_QosProfile_Arp represents the /qos-profile/qos-profile/qos-profile/arp YANG schema element.
type QosProfile_QosProfile_QosProfile_Arp struct {
	PreemptionCapability	*bool	`path:"preemption-capability" module:"qos-profile"`
	PreemptionVulnerability	*bool	`path:"preemption-vulnerability" module:"qos-profile"`
	Priority	*uint32	`path:"priority" module:"qos-profile"`
}

// IsYANGGoStruct ensures that QosProfile_QosProfile_QosProfile_Arp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*QosProfile_QosProfile_QosProfile_Arp) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *QosProfile_QosProfile_QosProfile_Arp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["QosProfile_QosProfile_QosProfile_Arp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *QosProfile_QosProfile_QosProfile_Arp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SecurityProfile_SecurityProfile represents the /security-profile/security-profile YANG schema element.
type SecurityProfile_SecurityProfile struct {
	SecurityProfile	map[string]*SecurityProfile_SecurityProfile_SecurityProfile	`path:"security-profile" module:"security-profile"`
}

// IsYANGGoStruct ensures that SecurityProfile_SecurityProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SecurityProfile_SecurityProfile) IsYANGGoStruct() {}

// NewSecurityProfile creates a new entry in the SecurityProfile list of the
// SecurityProfile_SecurityProfile struct. The keys of the list are populated from the input
// arguments.
func (t *SecurityProfile_SecurityProfile) NewSecurityProfile(Id string) (*SecurityProfile_SecurityProfile_SecurityProfile, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SecurityProfile == nil {
		t.SecurityProfile = make(map[string]*SecurityProfile_SecurityProfile_SecurityProfile)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SecurityProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SecurityProfile", key)
	}

	t.SecurityProfile[key] = &SecurityProfile_SecurityProfile_SecurityProfile{
		Id: &Id,
	}

	return t.SecurityProfile[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SecurityProfile_SecurityProfile) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SecurityProfile_SecurityProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SecurityProfile_SecurityProfile) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SecurityProfile_SecurityProfile_SecurityProfile represents the /security-profile/security-profile/security-profile YANG schema element.
type SecurityProfile_SecurityProfile_SecurityProfile struct {
	Description	*string	`path:"description" module:"security-profile"`
	DisplayName	*string	`path:"display-name" module:"security-profile"`
	Id	*string	`path:"id" module:"security-profile"`
	Key	*string	`path:"key" module:"security-profile"`
	Opc	*string	`path:"opc" module:"security-profile"`
	Sqn	*uint32	`path:"sqn" module:"security-profile"`
}

// IsYANGGoStruct ensures that SecurityProfile_SecurityProfile_SecurityProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SecurityProfile_SecurityProfile_SecurityProfile) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SecurityProfile_SecurityProfile_SecurityProfile struct, which is a YANG list entry.
func (t *SecurityProfile_SecurityProfile_SecurityProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SecurityProfile_SecurityProfile_SecurityProfile) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SecurityProfile_SecurityProfile_SecurityProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SecurityProfile_SecurityProfile_SecurityProfile) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ServiceGroup_ServiceGroup represents the /service-group/service-group YANG schema element.
type ServiceGroup_ServiceGroup struct {
	ServiceGroup	map[string]*ServiceGroup_ServiceGroup_ServiceGroup	`path:"service-group" module:"service-group"`
}

// IsYANGGoStruct ensures that ServiceGroup_ServiceGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ServiceGroup_ServiceGroup) IsYANGGoStruct() {}

// NewServiceGroup creates a new entry in the ServiceGroup list of the
// ServiceGroup_ServiceGroup struct. The keys of the list are populated from the input
// arguments.
func (t *ServiceGroup_ServiceGroup) NewServiceGroup(Id string) (*ServiceGroup_ServiceGroup_ServiceGroup, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServiceGroup == nil {
		t.ServiceGroup = make(map[string]*ServiceGroup_ServiceGroup_ServiceGroup)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ServiceGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ServiceGroup", key)
	}

	t.ServiceGroup[key] = &ServiceGroup_ServiceGroup_ServiceGroup{
		Id: &Id,
	}

	return t.ServiceGroup[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ServiceGroup_ServiceGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ServiceGroup_ServiceGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ServiceGroup_ServiceGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ServiceGroup_ServiceGroup_ServiceGroup represents the /service-group/service-group/service-group YANG schema element.
type ServiceGroup_ServiceGroup_ServiceGroup struct {
	DefaultService	*string	`path:"default-service" module:"service-group"`
	Description	*string	`path:"description" module:"service-group"`
	DisplayName	*string	`path:"display-name" module:"service-group"`
	Id	*string	`path:"id" module:"service-group"`
	Services	map[string]*ServiceGroup_ServiceGroup_ServiceGroup_Services	`path:"services" module:"service-group"`
}

// IsYANGGoStruct ensures that ServiceGroup_ServiceGroup_ServiceGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ServiceGroup_ServiceGroup_ServiceGroup) IsYANGGoStruct() {}

// NewServices creates a new entry in the Services list of the
// ServiceGroup_ServiceGroup_ServiceGroup struct. The keys of the list are populated from the input
// arguments.
func (t *ServiceGroup_ServiceGroup_ServiceGroup) NewServices(Service string) (*ServiceGroup_ServiceGroup_ServiceGroup_Services, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Services == nil {
		t.Services = make(map[string]*ServiceGroup_ServiceGroup_ServiceGroup_Services)
	}

	key := Service

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Services[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Services", key)
	}

	t.Services[key] = &ServiceGroup_ServiceGroup_ServiceGroup_Services{
		Service: &Service,
	}

	return t.Services[key], nil
}

// ΛListKeyMap returns the keys of the ServiceGroup_ServiceGroup_ServiceGroup struct, which is a YANG list entry.
func (t *ServiceGroup_ServiceGroup_ServiceGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ServiceGroup_ServiceGroup_ServiceGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ServiceGroup_ServiceGroup_ServiceGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ServiceGroup_ServiceGroup_ServiceGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ServiceGroup_ServiceGroup_ServiceGroup_Services represents the /service-group/service-group/service-group/services YANG schema element.
type ServiceGroup_ServiceGroup_ServiceGroup_Services struct {
	Kind	*string	`path:"kind" module:"service-group"`
	Service	*string	`path:"service" module:"service-group"`
}

// IsYANGGoStruct ensures that ServiceGroup_ServiceGroup_ServiceGroup_Services implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ServiceGroup_ServiceGroup_ServiceGroup_Services) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the ServiceGroup_ServiceGroup_ServiceGroup_Services struct, which is a YANG list entry.
func (t *ServiceGroup_ServiceGroup_ServiceGroup_Services) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Service == nil {
		return nil, fmt.Errorf("nil value for key Service")
	}

	return map[string]interface{}{
		"service": *t.Service,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ServiceGroup_ServiceGroup_ServiceGroup_Services) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ServiceGroup_ServiceGroup_ServiceGroup_Services"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ServiceGroup_ServiceGroup_ServiceGroup_Services) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ServiceRule_ServiceRule represents the /service-rule/service-rule YANG schema element.
type ServiceRule_ServiceRule struct {
	ServiceRule	map[string]*ServiceRule_ServiceRule_ServiceRule	`path:"service-rule" module:"service-rule"`
}

// IsYANGGoStruct ensures that ServiceRule_ServiceRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ServiceRule_ServiceRule) IsYANGGoStruct() {}

// NewServiceRule creates a new entry in the ServiceRule list of the
// ServiceRule_ServiceRule struct. The keys of the list are populated from the input
// arguments.
func (t *ServiceRule_ServiceRule) NewServiceRule(Id string) (*ServiceRule_ServiceRule_ServiceRule, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServiceRule == nil {
		t.ServiceRule = make(map[string]*ServiceRule_ServiceRule_ServiceRule)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ServiceRule[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ServiceRule", key)
	}

	t.ServiceRule[key] = &ServiceRule_ServiceRule_ServiceRule{
		Id: &Id,
	}

	return t.ServiceRule[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ServiceRule_ServiceRule) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ServiceRule_ServiceRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ServiceRule_ServiceRule) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ServiceRule_ServiceRule_ServiceRule represents the /service-rule/service-rule/service-rule YANG schema element.
type ServiceRule_ServiceRule_ServiceRule struct {
	ChargingRuleName	*string	`path:"charging-rule-name" module:"service-rule"`
	Description	*string	`path:"description" module:"service-rule"`
	DisplayName	*string	`path:"display-name" module:"service-rule"`
	Flow	*ServiceRule_ServiceRule_ServiceRule_Flow	`path:"flow" module:"service-rule"`
	Id	*string	`path:"id" module:"service-rule"`
	Qos	*ServiceRule_ServiceRule_ServiceRule_Qos	`path:"qos" module:"service-rule"`
}

// IsYANGGoStruct ensures that ServiceRule_ServiceRule_ServiceRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ServiceRule_ServiceRule_ServiceRule) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the ServiceRule_ServiceRule_ServiceRule struct, which is a YANG list entry.
func (t *ServiceRule_ServiceRule_ServiceRule) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ServiceRule_ServiceRule_ServiceRule) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ServiceRule_ServiceRule_ServiceRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ServiceRule_ServiceRule_ServiceRule) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ServiceRule_ServiceRule_ServiceRule_Flow represents the /service-rule/service-rule/service-rule/flow YANG schema element.
type ServiceRule_ServiceRule_ServiceRule_Flow struct {
	Specification	*string	`path:"specification" module:"service-rule"`
}

// IsYANGGoStruct ensures that ServiceRule_ServiceRule_ServiceRule_Flow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ServiceRule_ServiceRule_ServiceRule_Flow) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ServiceRule_ServiceRule_ServiceRule_Flow) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ServiceRule_ServiceRule_ServiceRule_Flow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ServiceRule_ServiceRule_ServiceRule_Flow) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ServiceRule_ServiceRule_ServiceRule_Qos represents the /service-rule/service-rule/service-rule/qos YANG schema element.
type ServiceRule_ServiceRule_ServiceRule_Qos struct {
	AggregateMaximumBitrate	*ServiceRule_ServiceRule_ServiceRule_Qos_AggregateMaximumBitrate	`path:"aggregate-maximum-bitrate" module:"service-rule"`
	Arp	*ServiceRule_ServiceRule_ServiceRule_Qos_Arp	`path:"arp" module:"service-rule"`
	GuaranteedBitrate	*ServiceRule_ServiceRule_ServiceRule_Qos_GuaranteedBitrate	`path:"guaranteed-bitrate" module:"service-rule"`
	MaximumRequestedBandwidth	*ServiceRule_ServiceRule_ServiceRule_Qos_MaximumRequestedBandwidth	`path:"maximum-requested-bandwidth" module:"service-rule"`
	Qci	*uint32	`path:"qci" module:"service-rule"`
}

// IsYANGGoStruct ensures that ServiceRule_ServiceRule_ServiceRule_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ServiceRule_ServiceRule_ServiceRule_Qos) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ServiceRule_ServiceRule_ServiceRule_Qos) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ServiceRule_ServiceRule_ServiceRule_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ServiceRule_ServiceRule_ServiceRule_Qos) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ServiceRule_ServiceRule_ServiceRule_Qos_AggregateMaximumBitrate represents the /service-rule/service-rule/service-rule/qos/aggregate-maximum-bitrate YANG schema element.
type ServiceRule_ServiceRule_ServiceRule_Qos_AggregateMaximumBitrate struct {
	Downlink	*uint32	`path:"downlink" module:"service-rule"`
	Uplink	*uint32	`path:"uplink" module:"service-rule"`
}

// IsYANGGoStruct ensures that ServiceRule_ServiceRule_ServiceRule_Qos_AggregateMaximumBitrate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ServiceRule_ServiceRule_ServiceRule_Qos_AggregateMaximumBitrate) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ServiceRule_ServiceRule_ServiceRule_Qos_AggregateMaximumBitrate) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ServiceRule_ServiceRule_ServiceRule_Qos_AggregateMaximumBitrate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ServiceRule_ServiceRule_ServiceRule_Qos_AggregateMaximumBitrate) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ServiceRule_ServiceRule_ServiceRule_Qos_Arp represents the /service-rule/service-rule/service-rule/qos/arp YANG schema element.
type ServiceRule_ServiceRule_ServiceRule_Qos_Arp struct {
	PreemptionCapability	*bool	`path:"preemption-capability" module:"service-rule"`
	PreemptionVulnerability	*bool	`path:"preemption-vulnerability" module:"service-rule"`
	Priority	*uint32	`path:"priority" module:"service-rule"`
}

// IsYANGGoStruct ensures that ServiceRule_ServiceRule_ServiceRule_Qos_Arp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ServiceRule_ServiceRule_ServiceRule_Qos_Arp) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ServiceRule_ServiceRule_ServiceRule_Qos_Arp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ServiceRule_ServiceRule_ServiceRule_Qos_Arp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ServiceRule_ServiceRule_ServiceRule_Qos_Arp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ServiceRule_ServiceRule_ServiceRule_Qos_GuaranteedBitrate represents the /service-rule/service-rule/service-rule/qos/guaranteed-bitrate YANG schema element.
type ServiceRule_ServiceRule_ServiceRule_Qos_GuaranteedBitrate struct {
	Downlink	*uint32	`path:"downlink" module:"service-rule"`
	Uplink	*uint32	`path:"uplink" module:"service-rule"`
}

// IsYANGGoStruct ensures that ServiceRule_ServiceRule_ServiceRule_Qos_GuaranteedBitrate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ServiceRule_ServiceRule_ServiceRule_Qos_GuaranteedBitrate) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ServiceRule_ServiceRule_ServiceRule_Qos_GuaranteedBitrate) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ServiceRule_ServiceRule_ServiceRule_Qos_GuaranteedBitrate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ServiceRule_ServiceRule_ServiceRule_Qos_GuaranteedBitrate) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ServiceRule_ServiceRule_ServiceRule_Qos_MaximumRequestedBandwidth represents the /service-rule/service-rule/service-rule/qos/maximum-requested-bandwidth YANG schema element.
type ServiceRule_ServiceRule_ServiceRule_Qos_MaximumRequestedBandwidth struct {
	Downlink	*uint32	`path:"downlink" module:"service-rule"`
	Uplink	*uint32	`path:"uplink" module:"service-rule"`
}

// IsYANGGoStruct ensures that ServiceRule_ServiceRule_ServiceRule_Qos_MaximumRequestedBandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ServiceRule_ServiceRule_ServiceRule_Qos_MaximumRequestedBandwidth) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ServiceRule_ServiceRule_ServiceRule_Qos_MaximumRequestedBandwidth) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ServiceRule_ServiceRule_ServiceRule_Qos_MaximumRequestedBandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ServiceRule_ServiceRule_ServiceRule_Qos_MaximumRequestedBandwidth) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Service_Service represents the /service/service YANG schema element.
type Service_Service struct {
	Service	map[string]*Service_Service_Service	`path:"service" module:"service"`
}

// IsYANGGoStruct ensures that Service_Service implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Service_Service) IsYANGGoStruct() {}

// NewService creates a new entry in the Service list of the
// Service_Service struct. The keys of the list are populated from the input
// arguments.
func (t *Service_Service) NewService(Id string) (*Service_Service_Service, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Service == nil {
		t.Service = make(map[string]*Service_Service_Service)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Service[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Service", key)
	}

	t.Service[key] = &Service_Service_Service{
		Id: &Id,
	}

	return t.Service[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Service_Service) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Service_Service"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Service_Service) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Service_Service_Service represents the /service/service/service YANG schema element.
type Service_Service_Service struct {
	Ambr	*Service_Service_Service_Ambr	`path:"ambr" module:"service"`
	Arp	*uint32	`path:"arp" module:"service"`
	Description	*string	`path:"description" module:"service"`
	DisplayName	*string	`path:"display-name" module:"service"`
	Id	*string	`path:"id" module:"service"`
	Qci	*uint32	`path:"qci" module:"service"`
	Rules	map[string]*Service_Service_Service_Rules	`path:"rules" module:"service"`
}

// IsYANGGoStruct ensures that Service_Service_Service implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Service_Service_Service) IsYANGGoStruct() {}

// NewRules creates a new entry in the Rules list of the
// Service_Service_Service struct. The keys of the list are populated from the input
// arguments.
func (t *Service_Service_Service) NewRules(Rule string) (*Service_Service_Service_Rules, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Rules == nil {
		t.Rules = make(map[string]*Service_Service_Service_Rules)
	}

	key := Rule

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Rules[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Rules", key)
	}

	t.Rules[key] = &Service_Service_Service_Rules{
		Rule: &Rule,
	}

	return t.Rules[key], nil
}

// ΛListKeyMap returns the keys of the Service_Service_Service struct, which is a YANG list entry.
func (t *Service_Service_Service) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Service_Service_Service) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Service_Service_Service"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Service_Service_Service) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Service_Service_Service_Ambr represents the /service/service/service/ambr YANG schema element.
type Service_Service_Service_Ambr struct {
	Downlink	*uint32	`path:"downlink" module:"service"`
	Uplink	*uint32	`path:"uplink" module:"service"`
}

// IsYANGGoStruct ensures that Service_Service_Service_Ambr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Service_Service_Service_Ambr) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Service_Service_Service_Ambr) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Service_Service_Service_Ambr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Service_Service_Service_Ambr) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Service_Service_Service_Rules represents the /service/service/service/rules YANG schema element.
type Service_Service_Service_Rules struct {
	Enabled	*bool	`path:"enabled" module:"service"`
	Rule	*string	`path:"rule" module:"service"`
}

// IsYANGGoStruct ensures that Service_Service_Service_Rules implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Service_Service_Service_Rules) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Service_Service_Service_Rules struct, which is a YANG list entry.
func (t *Service_Service_Service_Rules) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Rule == nil {
		return nil, fmt.Errorf("nil value for key Rule")
	}

	return map[string]interface{}{
		"rule": *t.Rule,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Service_Service_Service_Rules) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Service_Service_Service_Rules"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Service_Service_Service_Rules) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// UpProfile_UpProfile represents the /up-profile/up-profile YANG schema element.
type UpProfile_UpProfile struct {
	UpProfile	map[string]*UpProfile_UpProfile_UpProfile	`path:"up-profile" module:"up-profile"`
}

// IsYANGGoStruct ensures that UpProfile_UpProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*UpProfile_UpProfile) IsYANGGoStruct() {}

// NewUpProfile creates a new entry in the UpProfile list of the
// UpProfile_UpProfile struct. The keys of the list are populated from the input
// arguments.
func (t *UpProfile_UpProfile) NewUpProfile(Id string) (*UpProfile_UpProfile_UpProfile, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UpProfile == nil {
		t.UpProfile = make(map[string]*UpProfile_UpProfile_UpProfile)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UpProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UpProfile", key)
	}

	t.UpProfile[key] = &UpProfile_UpProfile_UpProfile{
		Id: &Id,
	}

	return t.UpProfile[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *UpProfile_UpProfile) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["UpProfile_UpProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *UpProfile_UpProfile) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// UpProfile_UpProfile_UpProfile represents the /up-profile/up-profile/up-profile YANG schema element.
type UpProfile_UpProfile_UpProfile struct {
	AccessControl	*string	`path:"access-control" module:"up-profile"`
	Description	*string	`path:"description" module:"up-profile"`
	DisplayName	*string	`path:"display-name" module:"up-profile"`
	Id	*string	`path:"id" module:"up-profile"`
	UserPlane	*string	`path:"user-plane" module:"up-profile"`
}

// IsYANGGoStruct ensures that UpProfile_UpProfile_UpProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*UpProfile_UpProfile_UpProfile) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the UpProfile_UpProfile_UpProfile struct, which is a YANG list entry.
func (t *UpProfile_UpProfile_UpProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *UpProfile_UpProfile_UpProfile) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["UpProfile_UpProfile_UpProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *UpProfile_UpProfile_UpProfile) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }



var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0xdf, 0x73, 0xe2, 0x48,
		0x92, 0x7e, 0xf7, 0x5f, 0x41, 0x10, 0xb1, 0x11, 0xf6, 0xac, 0xd5, 0x0d, 0x6e, 0xb0, 0x0d, 0x2f,
		0x13, 0x9e, 0x9d, 0xed, 0xbd, 0x88, 0x9d, 0xd9, 0xf3, 0x76, 0xdf, 0xde, 0x8b, 0xdb, 0xe7, 0x90,
		0x45, 0x41, 0x2b, 0x5a, 0x48, 0x72, 0x49, 0xb2, 0xdb, 0xd1, 0xed, 0xff, 0xfd, 0x42, 0x3f, 0x00,
		0x01, 0x42, 0xca, 0x2c, 0x09, 0x21, 0xe0, 0x9b, 0x87, 0x69, 0xc0, 0x55, 0x82, 0xca, 0xca, 0xfa,
		0x32, 0x2b, 0xeb, 0xcb, 0xca, 0x1f, 0x27, 0xad, 0x56, 0xab, 0xd5, 0xfe, 0x97, 0x3e, 0x15, 0xed,
		0x61, 0xab, 0x3d, 0x12, 0xcf, 0xa6, 0x21, 0xda, 0xe7, 0xf1, 0xa7, 0xff, 0x34, 0xed, 0x51, 0x7b,
		0xd8, 0xea, 0x26, 0x6f, 0xff, 0xe6, 0xd8, 0x63, 0x73, 0xd2, 0x1e, 0xb6, 0x3a, 0xc9, 0x07, 0xbf,
		0x9b, 0xb2, 0x3d, 0x6c, 0xc5, 0x8f, 0x88, 0x3e, 0xd0, 0x0d, 0x43, 0x78, 0x9e, 0xe6, 0x4a, 0x67,
		0x6c, 0x5a, 0x62, 0xe9, 0x6f, 0x4b, 0x5f, 0xb3, 0xd2, 0xee, 0x7c, 0xb9, 0xd5, 0xf2, 0xd7, 0xce,
		0x3f, 0x5e, 0xfd, 0xfa, 0xf9, 0x1f, 0x6e, 0xa5, 0x18, 0x9b, 0xdf, 0xd7, 0xbe, 0x6d, 0xe9, 0x1b,
		0x5d, 0xe9, 0xac, 0x7c, 0x4d, 0xf4, 0xe7, 0xcf, 0x4e, 0x20, 0x0d, 0x91, 0xd9, 0x35, 0xfe, 0x29,
		0xe2, 0xf5, 0xc5, 0x91, 0xa3, 0xf8, 0x09, 0xd1, 0xb7, 0x9c, 0x67, 0x37, 0xfc, 0x2f, 0xdd, 0xbb,
		0x91, 0x93, 0x60, 0x2a, 0x6c, 0xbf, 0x3d, 0x6c, 0xf9, 0x32, 0x10, 0x1b, 0x1a, 0xa6, 0x5a, 0x45,
		0x3f, 0x6a, 0xad, 0xd5, 0xdb, 0xd2, 0x27, 0x6f, 0x2b, 0x63, 0x5d, 0x15, 0x39, 0x55, 0xf4, 0xbc,
		0x29, 0x28, 0x98, 0x8a, 0xc2, 0x29, 0xa1, 0x4c, 0x0d, 0x71, 0x8a, 0xa8, 0x53, 0xc5, 0x9e, 0x32,
		0xf6, 0xd4, 0xd1, 0xa7, 0x30, 0x7b, 0x2a, 0x37, 0x4c, 0x69, 0xe1, 0xd4, 0xce, 0x1b, 0x8c, 0x84,
		0x67, 0x48, 0xd3, 0xf5, 0x4d, 0xc7, 0x2e, 0x16, 0xc3, 0x62, 0x45, 0x2f, 0x3a, 0x15, 0x8c, 0x2b,
		0x99, 0xec, 0x4e, 0x41, 0xb3, 0xa2, 0x49, 0xe7, 0x4c, 0x3e, 0x53, 0x09, 0xb8, 0xca, 0xa0, 0xac,
		0x14, 0xca, 0xca, 0xc1, 0x57, 0x92, 0x7c, 0x65, 0x29, 0x50, 0x9a, 0xf9, 0xd7, 0xfd, 0xcf, 0xab,
		0x2b, 0x78, 0x92, 0xf6, 0x7c, 0x69, 0xda, 0x13, 0x8a, 0xb0, 0x67, 0x20, 0x70, 0x4d, 0x68, 0xfb,
		0x87, 0xb0, 0x27, 0xfe, 0xd7, 0xf6, 0xb0, 0x75, 0x47, 0x12, 0x13, 0x6d, 0xfa, 0xa2, 0x27, 0xff,
		0x69, 0xda, 0xe4, 0xf9, 0x66, 0xaa, 0xf4, 0x5a, 0xb7, 0xff, 0xd5, 0xad, 0x40, 0x6c, 0xc6, 0xbd,
		0x8d, 0xfd, 0x3e, 0x4a, 0xdd, 0x08, 0x57, 0xda, 0xef, 0xe6, 0xc4, 0xf4, 0xbd, 0xf0, 0x8b, 0xc9,
		0xfd, 0xdf, 0xce, 0x19, 0xa2, 0xd0, 0xbf, 0xd7, 0x2f, 0x8a, 0x4e, 0xa7, 0x46, 0x61, 0x9c, 0x54,
		0xd3, 0xea, 0xfe, 0x44, 0xad, 0x7f, 0xce, 0x64, 0xb4, 0x47, 0xa6, 0xe7, 0x5a, 0xfa, 0xab, 0x66,
		0xc7, 0xeb, 0x88, 0x0a, 0xc3, 0xe9, 0x5e, 0xc0, 0x61, 0xe0, 0x30, 0x70, 0x18, 0x38, 0xac, 0x22,
		0x8a, 0x6b, 0xc0, 0x70, 0x34, 0xac, 0xb1, 0x69, 0xf9, 0x42, 0xd2, 0x01, 0x38, 0x69, 0x0f, 0xe8,
		0x05, 0xf4, 0x02, 0x7a, 0x19, 0x78, 0xd3, 0x01, 0xf4, 0xce, 0x44, 0xf1, 0xe1, 0x02, 0xd0, 0x1b,
		0x0e, 0xcb, 0x1c, 0xd1, 0x61, 0xd7, 0x1c, 0x01, 0x72, 0x01, 0xb9, 0x9b, 0xc2, 0x8e, 0x5a, 0xa1,
		0x7a, 0xc0, 0xf1, 0x05, 0xfa, 0x02, 0x7d, 0xd3, 0xc3, 0xf2, 0x29, 0x6b, 0x6e, 0xbe, 0xde, 0xa2,
		0xd6, 0x40, 0x60, 0x20, 0x30, 0x9c, 0x5e, 0xc0, 0x2e, 0x60, 0xb7, 0x00, 0x76, 0x59, 0xe7, 0x75,
		0xff, 0x14, 0xaf, 0xb9, 0x1e, 0x6e, 0xfb, 0x0f, 0xd3, 0xf3, 0x6f, 0x7c, 0xbf, 0xe0, 0x54, 0xef,
		0x4f, 0xd3, 0xfe, 0xbb, 0x25, 0x42, 0xc8, 0xf0, 0xf2, 0xa7, 0x29, 0x9c, 0xfe, 0x54, 0xcb, 0xee,
		0x75, 0xaf, 0x77, 0x79, 0xd5, 0xeb, 0x75, 0xae, 0x3e, 0x5c, 0x75, 0x06, 0xfd, 0x7e, 0xf7, 0xb2,
		0xdb, 0xcf, 0xe9, 0xfc, 0xdf, 0x72, 0x24, 0xa4, 0x18, 0xfd, 0x16, 0xfe, 0x66, 0x3b, 0xb0, 0x2c,
		0xd6, 0x50, 0x6f, 0x6c, 0xdb, 0xf1, 0xf5, 0xc2, 0x83, 0xc7, 0xb6, 0x67, 0x7c, 0x15, 0x53, 0xdd,
		0xd5, 0x23, 0x24, 0x68, 0xbf, 0x5f, 0x76, 0xf6, 0xf2, 0xdf, 0xe6, 0x1d, 0xfd, 0x7a, 0xbe, 0x0c,
		0x0c, 0x3f, 0x09, 0xb8, 0xb7, 0x6f, 0xa2, 0x7e, 0xb7, 0x71, 0xb7, 0x87, 0x9c, 0x77, 0xd9, 0xd8,
		0xfb, 0xc6, 0x3c, 0x71, 0x2f, 0x18, 0x3b, 0x6b, 0xcc, 0x59, 0x14, 0x04, 0xf2, 0xe0, 0x96, 0x87,
		0xb3, 0xf8, 0xd1, 0xa9, 0x1f, 0xdc, 0xd6, 0x5d, 0x9b, 0xc0, 0xbe, 0x48, 0x35, 0x02, 0xf5, 0x82,
		0xac, 0x08, 0x9b, 0xa9, 0x17, 0x39, 0x42, 0x67, 0x08, 0xbf, 0x60, 0x12, 0xc8, 0x7e, 0x18, 0x48,
		0x17, 0x0c, 0x64, 0x2b, 0x24, 0x5d, 0x84, 0xf3, 0xc5, 0x3b, 0xea, 0x9b, 0xf7, 0x80, 0xdb, 0x0d,
		0xb7, 0x1b, 0x6e, 0x37, 0xdc, 0x6e, 0xb8, 0xdd, 0xea, 0xd1, 0x0e, 0x70, 0xde, 0x00, 0xc2, 0x00,
		0x61, 0x80, 0x30, 0x38, 0x6f, 0x3b, 0x45, 0x61, 0x70, 0xde, 0x80, 0xc3, 0xc0, 0x61, 0xe0, 0x30,
		0x38, 0x6f, 0x3b, 0x85, 0x61, 0xdb, 0xd3, 0x5c, 0x69, 0x4e, 0x75, 0xf9, 0xca, 0x40, 0xe1, 0x54,
		0x27, 0x80, 0x30, 0x40, 0x78, 0x41, 0xcd, 0x71, 0x35, 0x7d, 0x34, 0x92, 0xc2, 0xf3, 0x38, 0x40,
		0x3c, 0x20, 0xb4, 0x4d, 0x7e, 0x4b, 0xe5, 0x30, 0xbc, 0xf8, 0xe5, 0xcf, 0x3d, 0xc6, 0x6f, 0x57,
		0x31, 0x26, 0x0b, 0x1d, 0xd6, 0x7d, 0x5f, 0x48, 0x9b, 0x3c, 0x9c, 0x79, 0xc7, 0xd3, 0xd3, 0xbb,
		0x8e, 0x36, 0xb8, 0xff, 0x79, 0xd7, 0xd5, 0x06, 0xf7, 0xf1, 0xcb, 0x6e, 0xf4, 0x4f, 0xfc, 0xfa,
		0xe2, 0xae, 0xa3, 0xf5, 0x66, 0xaf, 0xfb, 0x77, 0x1d, 0xad, 0x7f, 0x7f, 0xf6, 0xe5, 0xcb, 0xbb,
		0xb3, 0x1f, 0x1f, 0xde, 0xf8, 0x1d, 0x4f, 0xff, 0x72, 0xf7, 0xe5, 0x8b, 0xfb, 0xe3, 0x5f, 0x6f,
		0xe1, 0xff, 0xff, 0x78, 0xbb, 0xff, 0xeb, 0xd9, 0xaf, 0x6d, 0xf2, 0xaf, 0xbd, 0x3f, 0xa9, 0xd0,
		0x46, 0xa8, 0xcd, 0xe6, 0xe5, 0x1e, 0xcc, 0xe6, 0xf0, 0x67, 0x28, 0x73, 0x5d, 0x1b, 0xdf, 0x68,
		0x1f, 0xef, 0x7f, 0x74, 0xce, 0x7b, 0x6f, 0x67, 0xc3, 0xb3, 0xd3, 0xd5, 0xcf, 0x86, 0x67, 0x3f,
		0x3a, 0xe7, 0xfd, 0xb7, 0xd3, 0xd3, 0x8c, 0xbf, 0xfc, 0x9a, 0xf5, 0x8c, 0xb3, 0x9f, 0xa7, 0xa7,
		0xa7, 0xc9, 0x3c, 0x2e, 0xcd, 0xed, 0x5d, 0xa7, 0x7b, 0xff, 0x6b, 0xf4, 0x32, 0xfe, 0xff, 0x5c,
		0x3b, 0x48, 0x8d, 0xcf, 0x32, 0x75, 0xe2, 0x9c, 0xad, 0xc2, 0xff, 0x37, 0xbc, 0xff, 0xeb, 0xf0,
		0xec, 0xc7, 0xe5, 0xdb, 0xec, 0x75, 0xf4, 0xff, 0xb3, 0x9f, 0xa7, 0xef, 0x7e, 0xf9, 0xf2, 0xe5,
		0xdd, 0xbb, 0x5f, 0xce, 0xe2, 0x01, 0x24, 0xed, 0x7e, 0x89, 0xff, 0xfa, 0xeb, 0x70, 0xb8, 0xf6,
		0xd1, 0xd9, 0xe9, 0x5f, 0xde, 0x6d, 0x43, 0x2d, 0x77, 0x66, 0x88, 0x3d, 0x61, 0x38, 0xf6, 0x88,
		0x6d, 0x8a, 0x17, 0xdd, 0x60, 0x8c, 0x61, 0x8c, 0x61, 0x8c, 0x61, 0x8c, 0x61, 0x8c, 0x61, 0x8c,
		0x61, 0x8c, 0xd5, 0x8d, 0xf1, 0xe4, 0xbb, 0x26, 0x6c, 0xfd, 0xd1, 0x12, 0x8c, 0xb4, 0x84, 0x54,
		0x9f, 0x02, 0x28, 0xff, 0x5d, 0x8c, 0xf5, 0xc0, 0x8a, 0x0c, 0xc7, 0x58, 0xb7, 0x3c, 0x04, 0x32,
		0x61, 0xb6, 0x53, 0x92, 0x7e, 0x74, 0x1c, 0x4b, 0xe8, 0x36, 0xc7, 0x66, 0x77, 0x91, 0x91, 0x03,
		0x15, 0x6e, 0x90, 0x0a, 0xa7, 0x08, 0x69, 0x48, 0xc7, 0x41, 0x4c, 0x9e, 0x2a, 0x0a, 0x10, 0x54,
		0xe2, 0x61, 0x4d, 0xfd, 0x80, 0x8e, 0xbd, 0x61, 0x63, 0xba, 0xbf, 0xd1, 0xed, 0x5d, 0x76, 0x80,
		0xd5, 0xc0, 0xea, 0x85, 0xa4, 0x03, 0xd3, 0xf6, 0x3f, 0x5c, 0x30, 0x30, 0xfa, 0x8a, 0xd0, 0xf4,
		0x93, 0x6e, 0x4f, 0xc4, 0xa1, 0x20, 0xf4, 0xe5, 0x35, 0x20, 0x7a, 0x2e, 0x8b, 0x7e, 0xff, 0x43,
		0x1f, 0x28, 0x1d, 0x25, 0x59, 0x08, 0xf9, 0x6c, 0x1a, 0x42, 0x9b, 0x48, 0x27, 0x70, 0xe9, 0x78,
		0xbd, 0xdc, 0x0d, 0x50, 0x0c, 0x28, 0x9e, 0x4b, 0xda, 0x12, 0xfa, 0x58, 0x8a, 0x31, 0xc7, 0x5f,
		0xa6, 0x80, 0xf1, 0xed, 0x2c, 0x8f, 0xc8, 0x9b, 0x0c, 0x97, 0xb4, 0x2f, 0xf3, 0x03, 0x73, 0xd4,
		0x46, 0xaa, 0xdb, 0x5a, 0xe7, 0x9d, 0xa4, 0xba, 0x2d, 0x76, 0x51, 0x9b, 0x5e, 0x33, 0x32, 0xdc,
		0x5c, 0x7b, 0x9e, 0x01, 0x96, 0xf5, 0x72, 0x37, 0x89, 0x6d, 0xe4, 0x51, 0x51, 0x46, 0x43, 0x49,
		0x66, 0x33, 0x1c, 0xdb, 0x16, 0x86, 0x6f, 0x3e, 0x9b, 0xfe, 0xab, 0x96, 0xe8, 0xfe, 0xe6, 0xac,
		0xb6, 0xcc, 0xd6, 0x35, 0xa4, 0xb7, 0x19, 0x5e, 0xf3, 0xb2, 0xdb, 0x0c, 0xaf, 0xb2, 0xe4, 0x36,
		0xd2, 0x24, 0xa8, 0x4c, 0x46, 0xc1, 0xa4, 0x90, 0xed, 0x25, 0x2b, 0xdd, 0xcd, 0xf0, 0xf6, 0x2f,
		0xdb, 0x2d, 0x6b, 0x32, 0xd5, 0x60, 0x1c, 0x37, 0x0c, 0x17, 0xa9, 0xc0, 0x9e, 0x7a, 0x48, 0x79,
		0x2a, 0xb2, 0x2b, 0x07, 0x09, 0x1c, 0x5f, 0xc4, 0x13, 0x39, 0xa2, 0x40, 0xae, 0x45, 0x82, 0xc1,
		0x47, 0x91, 0x6b, 0x01, 0x14, 0x06, 0x0a, 0x03, 0x85, 0x1b, 0x87, 0xc2, 0xc8, 0xb4, 0x88, 0x87,
		0xf5, 0xd5, 0xf3, 0x34, 0x61, 0x8f, 0x5c, 0xc7, 0x8c, 0x96, 0x36, 0x11, 0x84, 0x97, 0x7a, 0x01,
		0x84, 0x01, 0xc2, 0xb3, 0x63, 0x1b, 0x69, 0xb2, 0x10, 0x18, 0x0c, 0x11, 0x28, 0x6f, 0x63, 0x94,
		0x37, 0x2b, 0x94, 0x03, 0xa2, 0x08, 0x5c, 0x0a, 0xaa, 0x28, 0x40, 0x14, 0x49, 0x82, 0xe2, 0xee,
		0xe4, 0xc5, 0x50, 0x70, 0x2a, 0x56, 0xfa, 0x01, 0x99, 0x81, 0xcc, 0x35, 0xbb, 0x15, 0x38, 0x2a,
		0xac, 0xf4, 0xa8, 0x30, 0xcb, 0xa0, 0xd2, 0x3f, 0xa4, 0x9f, 0x22, 0xfe, 0x2d, 0xd5, 0xfb, 0x73,
		0xdc, 0xf9, 0x81, 0xf8, 0xd9, 0x4e, 0x0e, 0x18, 0xcb, 0x88, 0x40, 0x6d, 0xe8, 0x94, 0x43, 0x48,
		0x61, 0xfb, 0x42, 0xba, 0xd2, 0xf4, 0x72, 0x8e, 0x1e, 0x53, 0x6d, 0x6a, 0x38, 0x70, 0x14, 0x99,
		0x56, 0x60, 0xc7, 0x27, 0x8e, 0xe1, 0x3f, 0x55, 0x1d, 0x39, 0xe6, 0x88, 0x9c, 0x2e, 0xfa, 0x82,
		0x29, 0x20, 0x5b, 0x42, 0xd6, 0xf1, 0xa2, 0xc8, 0x35, 0xd0, 0x0d, 0x3d, 0x5f, 0xcc, 0x9c, 0x3a,
		0x35, 0xf0, 0x2f, 0x3c, 0x60, 0x64, 0x9d, 0x26, 0x93, 0xb6, 0x22, 0x44, 0x87, 0xa8, 0xbb, 0x4b,
		0x87, 0x48, 0x14, 0xfa, 0x6d, 0x7b, 0xe8, 0x11, 0xe5, 0xaa, 0x4d, 0x35, 0x2e, 0x51, 0x91, 0x3a,
		0x95, 0x53, 0xab, 0x2a, 0xd4, 0x4b, 0x71, 0x93, 0x44, 0x56, 0x37, 0x15, 0xb5, 0x53, 0x54, 0x3f,
		0x55, 0x35, 0x2c, 0xad, 0x8e, 0xa5, 0xd5, 0x52, 0x5d, 0x3d, 0x99, 0xfb, 0x46, 0xe2, 0x5c, 0x91,
		0x3d, 0xf9, 0xb5, 0x99, 0xa2, 0x93, 0x0a, 0xd7, 0xf0, 0xed, 0x8a, 0x97, 0x78, 0x9b, 0xb8, 0x5c,
		0xde, 0x30, 0xdb, 0xeb, 0xda, 0xfc, 0x79, 0x11, 0xe5, 0x90, 0x2e, 0x52, 0x82, 0x38, 0xdb, 0xd4,
		0xc4, 0xce, 0x0c, 0x9d, 0xa7, 0x64, 0x77, 0x2e, 0x90, 0x66, 0x91, 0x75, 0x11, 0xea, 0x1d, 0x56,
		0x3d, 0x56, 0x7d, 0x7d, 0xab, 0x9e, 0x9e, 0x44, 0xba, 0xb6, 0xea, 0xbb, 0x55, 0xad, 0xc5, 0x52,
		0x76, 0x3a, 0xd9, 0xf3, 0xab, 0xb8, 0x67, 0xa4, 0x68, 0x00, 0x3f, 0x2a, 0x50, 0x49, 0x74, 0x80,
		0x17, 0x25, 0xa0, 0x0a, 0x8b, 0x18, 0x35, 0xd8, 0xb4, 0x4b, 0x5e, 0x6c, 0x78, 0x36, 0xbc, 0x54,
		0xf4, 0x62, 0x56, 0x76, 0xd0, 0x7f, 0x9f, 0x3f, 0xf0, 0x21, 0xfb, 0x25, 0x39, 0x6a, 0x50, 0x2e,
		0x6a, 0x7a, 0x0c, 0x8c, 0x44, 0x6c, 0x0f, 0xea, 0x8a, 0x98, 0x82, 0x0d, 0x83, 0xa3, 0x2b, 0x8e,
		0x28, 0xc0, 0x49, 0x4c, 0x50, 0xf8, 0x28, 0x38, 0x89, 0xc0, 0x61, 0xe0, 0x30, 0x70, 0xb8, 0x81,
		0x38, 0x0c, 0x56, 0x62, 0x3c, 0xac, 0xc3, 0x23, 0x71, 0x01, 0x72, 0xeb, 0x82, 0xdc, 0xc5, 0x0e,
		0x11, 0xe4, 0x2d, 0x20, 0x2f, 0x55, 0x14, 0xa8, 0xfe, 0x0a, 0x9e, 0x8b, 0x2a, 0xcf, 0xa5, 0x28,
		0x52, 0x45, 0x67, 0xb2, 0x14, 0x05, 0xa3, 0x76, 0x42, 0x57, 0xa1, 0x8e, 0x89, 0x32, 0x16, 0x0a,
		0x11, 0xe5, 0xc9, 0xf1, 0x8a, 0x4b, 0xbb, 0xa6, 0x1b, 0xa1, 0xb4, 0x2b, 0x79, 0xea, 0x37, 0x52,
		0x51, 0xf2, 0x84, 0xce, 0x10, 0x7e, 0xc1, 0x24, 0x90, 0x7d, 0x2d, 0x94, 0x76, 0x65, 0xc0, 0x16,
		0xa9, 0xb4, 0xab, 0x3e, 0x7d, 0x94, 0xbc, 0xd2, 0xae, 0x51, 0x8f, 0x3d, 0x20, 0x9d, 0xe0, 0x2a,
		0x20, 0x35, 0xd7, 0x9a, 0x4c, 0x3a, 0x19, 0x39, 0x2f, 0xb6, 0x65, 0xda, 0xdf, 0xf8, 0x87, 0xd3,
		0xf3, 0x9e, 0xfc, 0xd3, 0xe9, 0xce, 0x21, 0x1c, 0x4d, 0xd3, 0x54, 0x53, 0x55, 0x45, 0x4b, 0xab,
		0x6a, 0x69, 0x95, 0x55, 0x57, 0x5d, 0xa6, 0x2f, 0xbc, 0xf5, 0xa3, 0x69, 0xf2, 0x85, 0x83, 0xab,
		0x7a, 0xc7, 0xa1, 0xa3, 0xf0, 0x2e, 0x20, 0xe4, 0x6f, 0x22, 0x4b, 0x6d, 0x26, 0x4b, 0xee, 0xa4,
		0xd6, 0x76, 0x54, 0xaa, 0xfd, 0x4b, 0x6c, 0xac, 0x14, 0x36, 0x9b, 0xa5, 0x36, 0x9d, 0x55, 0x8b,
		0xac, 0x77, 0x31, 0xe8, 0x0d, 0x2e, 0xaf, 0x2e, 0x06, 0xfd, 0x1d, 0xca, 0xee, 0x64, 0x3b, 0xad,
		0xef, 0x6b, 0x24, 0x53, 0x05, 0xae, 0x9a, 0xb9, 0x4a, 0xfa, 0xc1, 0x58, 0xc1, 0x58, 0xc1, 0x58,
		0xc1, 0x58, 0xc1, 0x58, 0xc1, 0x58, 0x95, 0x34, 0x56, 0xbb, 0x24, 0xd0, 0xa5, 0xa2, 0x34, 0x1b,
		0x5f, 0x13, 0xf7, 0xf9, 0x19, 0xe1, 0xbd, 0x7f, 0x3b, 0xde, 0xec, 0xb2, 0xcb, 0xec, 0x97, 0x37,
		0xae, 0x7d, 0x13, 0x3e, 0x79, 0x0b, 0xc7, 0x83, 0xba, 0x64, 0x5c, 0x6d, 0x1c, 0x36, 0x46, 0x14,
		0x03, 0x51, 0x0c, 0x57, 0x0a, 0x31, 0x8d, 0xa8, 0x92, 0x9a, 0xa1, 0xbb, 0xfa, 0xa3, 0x69, 0x99,
		0xfe, 0x2b, 0xdf, 0x47, 0xcc, 0x7e, 0xcc, 0xf1, 0xb2, 0xef, 0xe1, 0x35, 0xee, 0x8b, 0xd7, 0xd8,
		0x04, 0xf6, 0xfd, 0x39, 0x6b, 0x9d, 0x3e, 0x07, 0x96, 0x2d, 0x64, 0x15, 0x4b, 0x75, 0xf9, 0x49,
		0x58, 0xad, 0x58, 0xad, 0x58, 0xad, 0x15, 0xad, 0x56, 0xd3, 0x91, 0x8a, 0xab, 0x33, 0xe9, 0x89,
		0x70, 0x0b, 0x96, 0x22, 0xc2, 0x2d, 0x08, 0xb7, 0x20, 0xdc, 0x92, 0x27, 0xb2, 0x2e, 0xc2, 0x2c,
		0x7b, 0x1c, 0x66, 0x29, 0x8c, 0x41, 0x28, 0x45, 0x58, 0xa4, 0x8b, 0x4c, 0x44, 0x44, 0x5b, 0x9a,
		0x5d, 0x3e, 0x0a, 0x19, 0x30, 0x04, 0x6c, 0x07, 0x0f, 0x1b, 0x99, 0x88, 0xab, 0x28, 0x7c, 0x14,
		0x99, 0x88, 0xc0, 0x61, 0xe0, 0x30, 0x70, 0xb8, 0x81, 0x38, 0x8c, 0x4c, 0xc4, 0x78, 0x58, 0x87,
		0x97, 0x89, 0x08, 0xc8, 0xad, 0x0b, 0x72, 0x53, 0x3b, 0x40, 0xa4, 0x22, 0x02, 0x7a, 0xa9, 0xa2,
		0xc0, 0x3d, 0xf2, 0xf1, 0xb0, 0x9e, 0x0c, 0x93, 0x8e, 0xbd, 0x61, 0xe3, 0x22, 0xa6, 0xc0, 0xe2,
		0x00, 0x61, 0x00, 0xa0, 0x06, 0x50, 0x2b, 0x04, 0xf8, 0x19, 0x81, 0x7d, 0x66, 0x40, 0xbf, 0xe1,
		0xf0, 0xdc, 0x01, 0x3c, 0xcf, 0x3d, 0xe3, 0x3e, 0x32, 0xc5, 0x91, 0x29, 0xae, 0x96, 0x29, 0x4e,
		0x38, 0x2b, 0xa0, 0x27, 0x8b, 0x17, 0x9d, 0x0f, 0xec, 0x24, 0x59, 0x9c, 0x3e, 0x2a, 0xca, 0x68,
		0x28, 0xe9, 0xe2, 0x9e, 0x30, 0x02, 0x69, 0xfa, 0xaf, 0xc5, 0x39, 0xe3, 0x6b, 0x2d, 0x6b, 0x48,
		0x1c, 0xf7, 0x84, 0xd1, 0xbc, 0xc4, 0xf1, 0xf0, 0x47, 0x55, 0x95, 0x38, 0x5e, 0x28, 0x7e, 0xee,
		0x34, 0x14, 0x4c, 0x07, 0xd9, 0xf7, 0x62, 0xa5, 0x90, 0x67, 0x4f, 0x13, 0xd7, 0xc7, 0xaa, 0x39,
		0x85, 0x3c, 0x73, 0x1a, 0xd5, 0xa0, 0x1b, 0x05, 0xd3, 0x0b, 0x95, 0x60, 0x4f, 0x1d, 0xee, 0x5c,
		0x25, 0x41, 0x30, 0x1a, 0x11, 0x11, 0x1c, 0x0a, 0xee, 0x4f, 0x48, 0xe4, 0x38, 0x0e, 0x05, 0x81,
		0xc3, 0xc0, 0x61, 0xe0, 0x70, 0x13, 0x43, 0x1f, 0x80, 0xe1, 0xd6, 0x61, 0x1e, 0x0a, 0x02, 0x72,
		0x6b, 0x83, 0xdc, 0x95, 0xdd, 0x2f, 0x4e, 0x06, 0x81, 0xbf, 0x54, 0x51, 0xe0, 0x64, 0x30, 0x1e,
		0xd6, 0x37, 0xf1, 0x4a, 0x07, 0xe0, 0xb0, 0x31, 0x10, 0x18, 0x08, 0x0c, 0xa7, 0x17, 0xa0, 0x0b,
		0xd0, 0x55, 0x07, 0x5d, 0xc7, 0x35, 0xe8, 0xa0, 0x1b, 0x36, 0x06, 0xe8, 0x02, 0x74, 0x01, 0xba,
		0x00, 0x5d, 0x80, 0xae, 0x3a, 0xe8, 0x7a, 0x4f, 0x8c, 0xe3, 0xb6, 0xb0, 0x31, 0x40, 0x17, 0xa0,
		0x0b, 0x5e, 0x1b, 0x19, 0x67, 0xc0, 0x6b, 0x2b, 0x7d, 0x9f, 0x1f, 0xf8, 0x6d, 0x0b, 0x77, 0xe4,
		0xd8, 0xf9, 0x6d, 0xab, 0xc1, 0xcd, 0xe2, 0x0f, 0xe8, 0x74, 0xb7, 0xcf, 0x49, 0xcf, 0x19, 0x4b,
		0xac, 0xe0, 0xfd, 0x4e, 0xd8, 0x6f, 0x2a, 0xc3, 0xe5, 0x0d, 0x93, 0xc6, 0x88, 0x8b, 0xab, 0x14,
		0xe7, 0x10, 0xe1, 0xb2, 0x8a, 0x25, 0x6f, 0x89, 0xff, 0x26, 0x9f, 0x9b, 0x48, 0x80, 0x93, 0xcf,
		0x15, 0x32, 0xe0, 0xb2, 0xc5, 0x4d, 0x14, 0x7b, 0x81, 0xf8, 0xc9, 0x3e, 0x19, 0x93, 0xef, 0x96,
		0x39, 0x2d, 0x5c, 0xe7, 0xab, 0x76, 0xc2, 0x5b, 0xd6, 0xb4, 0xa9, 0x81, 0x79, 0x71, 0xd1, 0x14,
		0x5e, 0xc1, 0x94, 0x3d, 0x29, 0x96, 0x52, 0x30, 0xf1, 0x7b, 0xeb, 0x7d, 0xe7, 0x29, 0x46, 0x35,
		0xee, 0x37, 0xca, 0xa5, 0x90, 0x3a, 0x94, 0xb9, 0x12, 0x8d, 0xa8, 0x9c, 0xaa, 0x4a, 0x5a, 0x5a,
		0x59, 0x4b, 0x2b, 0x6d, 0x09, 0xe5, 0x65, 0xba, 0xcc, 0xb8, 0x14, 0x8d, 0x35, 0x1f, 0xb8, 0x14,
		0x8d, 0x2f, 0x32, 0xdc, 0x41, 0xcf, 0x58, 0x90, 0xfc, 0xd6, 0x28, 0x98, 0x02, 0x73, 0x05, 0x73,
		0x05, 0x73, 0x05, 0x73, 0x05, 0x73, 0x75, 0x4c, 0xe6, 0x6a, 0x97, 0x77, 0x79, 0x26, 0x11, 0x9a,
		0xb5, 0x7f, 0xd5, 0x4a, 0xa4, 0x7c, 0x8e, 0x7b, 0x3f, 0xac, 0xfe, 0xbb, 0x2f, 0x65, 0x51, 0xf6,
		0xed, 0xc2, 0x0c, 0xc4, 0x36, 0x54, 0x97, 0x0d, 0x8e, 0x16, 0x2b, 0x03, 0x7d, 0x1c, 0x2d, 0xae,
		0x8b, 0xa2, 0xdb, 0x07, 0x9b, 0xe3, 0x78, 0x92, 0xa8, 0x01, 0xc2, 0x75, 0x81, 0x30, 0x48, 0x75,
		0x04, 0xec, 0x01, 0x0c, 0x23, 0x8d, 0x7a, 0x15, 0x87, 0x8f, 0x24, 0x8d, 0x1a, 0x48, 0x0c, 0x24,
		0x06, 0x12, 0x37, 0x10, 0x89, 0x91, 0x48, 0x1d, 0x0f, 0xeb, 0x10, 0x13, 0xa9, 0x01, 0xba, 0xb5,
		0x81, 0x6e, 0x1c, 0x4f, 0x43, 0x06, 0x35, 0x80, 0x97, 0x2a, 0x0a, 0xe4, 0x95, 0xc4, 0xc3, 0x3a,
		0xf6, 0xbb, 0x95, 0x01, 0xd3, 0x08, 0x15, 0x23, 0x54, 0xdc, 0x44, 0xcf, 0x18, 0xa1, 0xe2, 0x68,
		0x58, 0x32, 0xb0, 0x84, 0x47, 0x87, 0xe8, 0xb8, 0x39, 0xf8, 0xc7, 0xe0, 0x1f, 0xb7, 0xda, 0xc2,
		0xd6, 0x1f, 0x2d, 0x31, 0xe2, 0xb3, 0xb9, 0x66, 0x1d, 0x8f, 0xb7, 0x3c, 0x3a, 0x18, 0x5d, 0x95,
		0xa1, 0x26, 0x0a, 0xa4, 0x2f, 0x80, 0x9c, 0xbf, 0x14, 0xa3, 0x5e, 0x58, 0x50, 0x58, 0x50, 0x35,
		0x2e, 0x28, 0x4b, 0xe8, 0x63, 0x29, 0xc6, 0x2a, 0x0b, 0x8a, 0x43, 0x92, 0xbc, 0x9d, 0x93, 0xad,
		0xe4, 0x70, 0x16, 0xc1, 0x09, 0xd5, 0x3d, 0xeb, 0xbd, 0x39, 0x6a, 0x37, 0x82, 0x56, 0x96, 0x64,
		0xfe, 0x12, 0x56, 0x25, 0x2d, 0x07, 0x38, 0xbd, 0xdb, 0xa0, 0xe5, 0x02, 0xa7, 0x9d, 0x72, 0xe5,
		0x9c, 0xe0, 0xf9, 0x43, 0x48, 0xb9, 0xc1, 0x54, 0xe1, 0x6c, 0x89, 0x73, 0x47, 0x71, 0x69, 0x5b,
		0x74, 0xd2, 0xdd, 0xa7, 0xe8, 0x71, 0xc8, 0x13, 0x57, 0xd3, 0x85, 0xca, 0xf3, 0xc4, 0x33, 0xe7,
		0x9c, 0x93, 0x0c, 0x9e, 0x39, 0xcb, 0x3b, 0x4a, 0xfa, 0x2e, 0x1a, 0x44, 0xfe, 0x8f, 0x67, 0xa4,
		0x74, 0x6b, 0x13, 0xe9, 0x04, 0x6e, 0x61, 0x62, 0x77, 0xd2, 0xac, 0x8e, 0xf4, 0xee, 0x49, 0x03,
		0x93, 0xbb, 0x27, 0x55, 0xa7, 0x76, 0x6f, 0x10, 0x3b, 0x4b, 0xfc, 0xc4, 0x5d, 0x78, 0xc5, 0x69,
		0xde, 0x93, 0x3d, 0x4c, 0xf2, 0x9e, 0xd4, 0x58, 0xd4, 0x24, 0xda, 0xc1, 0x6a, 0x45, 0x19, 0xfc,
		0x6b, 0x72, 0x5d, 0xed, 0xb8, 0x0f, 0x11, 0xef, 0xc9, 0x01, 0x86, 0x5d, 0x26, 0xcd, 0x8b, 0x76,
		0xd3, 0xbd, 0x68, 0x8e, 0xf7, 0x9c, 0xf2, 0x9a, 0x85, 0x7c, 0x1e, 0xa6, 0x4d, 0xce, 0xf2, 0x9b,
		0x22, 0x8f, 0x19, 0xc4, 0x55, 0x2c, 0x90, 0xdd, 0x2e, 0x10, 0x50, 0xa5, 0x8a, 0x4f, 0x41, 0x70,
		0x62, 0x0f, 0xd2, 0xea, 0x1a, 0x06, 0x1f, 0x07, 0x69, 0x15, 0x28, 0x0c, 0x14, 0x06, 0x0a, 0x37,
		0x0d, 0x85, 0x41, 0x58, 0x8d, 0x87, 0x75, 0x80, 0x84, 0x55, 0x00, 0x6e, 0x3d, 0x80, 0x9b, 0x8e,
		0x0d, 0x81, 0xb2, 0x0a, 0xe8, 0xa5, 0x8a, 0x02, 0x94, 0xd5, 0xa5, 0x58, 0x2c, 0x83, 0x14, 0x35,
		0xef, 0xb1, 0x0f, 0xbc, 0x28, 0xc0, 0xb0, 0x02, 0x0c, 0x93, 0x39, 0x51, 0xdf, 0xe2, 0x29, 0x66,
		0xb2, 0x30, 0xa2, 0x5e, 0x7c, 0x36, 0x54, 0x12, 0x1d, 0x3e, 0x08, 0xfe, 0xc6, 0xe4, 0x08, 0xd9,
		0x1b, 0x93, 0xfd, 0xe3, 0x6e, 0xcc, 0xbc, 0x0b, 0x86, 0xc6, 0x72, 0x3d, 0x0c, 0x55, 0x4f, 0x83,
		0xef, 0x71, 0x94, 0xf2, 0x3c, 0x4a, 0x9a, 0xdd, 0xb2, 0x9e, 0x48, 0x15, 0x56, 0x58, 0xc1, 0x33,
		0x29, 0xe5, 0xa1, 0x54, 0x2d, 0x32, 0xae, 0xc7, 0x52, 0xa9, 0xcc, 0xb6, 0x75, 0xbd, 0x15, 0x8f,
		0xe1, 0xe4, 0x0b, 0x69, 0xb3, 0x57, 0xc8, 0xcc, 0x70, 0xfc, 0x74, 0x6c, 0x6d, 0x24, 0xa6, 0xba,
		0x3d, 0x6a, 0x37, 0xf2, 0xb6, 0x48, 0xea, 0x71, 0xe9, 0x26, 0x94, 0x82, 0x61, 0x84, 0x61, 0xac,
		0xcb, 0x30, 0xd6, 0x4e, 0x6a, 0x2c, 0x77, 0x3c, 0xcb, 0x58, 0xa8, 0x55, 0x10, 0x1a, 0x89, 0xfc,
		0x05, 0x70, 0x1a, 0x0b, 0x21, 0x31, 0x93, 0x12, 0x16, 0x07, 0x7b, 0x28, 0xef, 0xd4, 0x89, 0x8e,
		0xff, 0x08, 0x1f, 0xf3, 0x50, 0xf8, 0x06, 0xd4, 0x47, 0x55, 0x95, 0xd9, 0x0e, 0xf5, 0xb1, 0x58,
		0x35, 0xd8, 0x64, 0xc8, 0x02, 0x4d, 0xd8, 0x25, 0x37, 0x92, 0x38, 0x3e, 0xea, 0xb8, 0x38, 0x8c,
		0xc9, 0xcc, 0xfc, 0x8b, 0xb5, 0x7d, 0x53, 0x06, 0xb3, 0x7b, 0x3b, 0x7c, 0x49, 0xd9, 0x40, 0xbe,
		0xa4, 0xac, 0x9c, 0x2f, 0x99, 0x9b, 0xf4, 0x42, 0x11, 0x3e, 0x31, 0x36, 0x57, 0x31, 0x5b, 0x52,
		0xee, 0x21, 0x5b, 0x52, 0xd6, 0xc6, 0x96, 0x34, 0xbe, 0xea, 0x72, 0x62, 0xda, 0x93, 0x68, 0xbe,
		0x98, 0x34, 0x84, 0x8c, 0xbe, 0xfb, 0x70, 0x36, 0x26, 0x0f, 0x30, 0x28, 0x2b, 0x41, 0x46, 0x28,
		0x19, 0x9f, 0xc2, 0x89, 0x58, 0xb9, 0x78, 0x13, 0xc8, 0x08, 0x0c, 0xf7, 0xfb, 0xd8, 0x59, 0xb9,
		0x80, 0x60, 0x40, 0x30, 0x20, 0xb8, 0x69, 0x10, 0x0c, 0x56, 0xee, 0x0c, 0x83, 0x8f, 0x83, 0x95,
		0x0b, 0x14, 0x06, 0x0a, 0x03, 0x85, 0xe1, 0x08, 0x37, 0x13, 0x84, 0xc7, 0x96, 0xf3, 0x42, 0x07,
		0xdf, 0xa8, 0xf5, 0x3e, 0x50, 0xc2, 0x00, 0xba, 0x0a, 0xa0, 0x4b, 0xa6, 0x84, 0x79, 0xae, 0x30,
		0xcc, 0xb1, 0x69, 0xd0, 0x4f, 0x79, 0x96, 0x67, 0x67, 0xa9, 0xfb, 0x21, 0x9c, 0x68, 0xcb, 0x23,
		0x3c, 0xd1, 0x96, 0x7b, 0x48, 0xf5, 0xa2, 0xfa, 0x08, 0x2a, 0xbe, 0x82, 0xaa, 0xcf, 0xc0, 0xf7,
		0x1d, 0x4a, 0xf9, 0x10, 0x25, 0x0d, 0x68, 0x59, 0x9f, 0xa2, 0x0a, 0x7b, 0xaa, 0xe0, 0x63, 0x94,
		0xf2, 0x35, 0x2a, 0x17, 0x59, 0xe7, 0xa2, 0x87, 0x2a, 0x86, 0xdb, 0xb1, 0x61, 0x15, 0xb1, 0x0f,
		0xe2, 0x5b, 0xb4, 0x36, 0xbe, 0x21, 0xf8, 0x41, 0xad, 0x8d, 0x87, 0xb2, 0x9f, 0x02, 0x6b, 0x7e,
		0x81, 0xcd, 0xda, 0xeb, 0x8f, 0xe1, 0x93, 0x91, 0x7d, 0x05, 0x1f, 0xaf, 0x39, 0x1b, 0xeb, 0x94,
		0xe2, 0x23, 0xf9, 0x0a, 0x3b, 0x6c, 0xaa, 0x28, 0x90, 0x7c, 0x15, 0x0f, 0xeb, 0xc9, 0x61, 0xe4,
		0x5d, 0x85, 0x8d, 0xb1, 0xbf, 0x3e, 0xf6, 0xfd, 0xb5, 0x3e, 0x99, 0x48, 0x31, 0xd1, 0x7d, 0xa1,
		0x4d, 0xf5, 0xef, 0xe6, 0x34, 0x98, 0x6a, 0x8f, 0xa6, 0x2f, 0x75, 0x5f, 0x81, 0x37, 0xbe, 0xf9,
		0x51, 0xbc, 0x7d, 0x77, 0x17, 0xfb, 0xee, 0x63, 0xdf, 0x77, 0x53, 0xd5, 0x77, 0xde, 0x61, 0xe4,
		0xbc, 0xd8, 0x96, 0x69, 0x7f, 0xe3, 0x8b, 0x7c, 0x7e, 0xd8, 0x33, 0x7b, 0x02, 0x53, 0x60, 0xa9,
		0x8c, 0xc2, 0x0e, 0xb7, 0xaf, 0xa2, 0xd9, 0xe3, 0x2a, 0x7e, 0x99, 0x05, 0x50, 0x6e, 0x21, 0x94,
		0x5d, 0x10, 0x95, 0x2d, 0x8c, 0xca, 0x16, 0x48, 0xe9, 0x85, 0xa2, 0xb8, 0x37, 0x66, 0xce, 0x34,
		0x3b, 0x70, 0xb5, 0x36, 0xcf, 0xe4, 0x7a, 0x30, 0x9b, 0xb4, 0xfa, 0x4a, 0xa1, 0x2b, 0xaf, 0x5e,
		0x4c, 0xf9, 0xb0, 0x56, 0x25, 0xe1, 0xad, 0x8a, 0x62, 0x36, 0x6b, 0x5e, 0x6d, 0xd9, 0xe7, 0x54,
		0x10, 0xc0, 0x29, 0x11, 0xfe, 0xaa, 0x24, 0x0c, 0xb6, 0x2d, 0xd1, 0xf6, 0x2e, 0x06, 0xbd, 0xc1,
		0xe5, 0xd5, 0xc5, 0xa0, 0xdf, 0x20, 0x19, 0x9f, 0xd4, 0xd3, 0xeb, 0x7e, 0x4b, 0x41, 0x39, 0xce,
		0x26, 0x31, 0x70, 0xcb, 0x19, 0xeb, 0xa4, 0x3f, 0x4c, 0x35, 0x4c, 0x35, 0x4c, 0x35, 0x4c, 0x35,
		0x4c, 0x35, 0x4c, 0x35, 0x4c, 0xf5, 0xdb, 0x8e, 0x36, 0xeb, 0xcc, 0x73, 0xb0, 0x79, 0x3f, 0xb5,
		0xf3, 0xb0, 0x27, 0xc7, 0x7b, 0x5f, 0x36, 0xd2, 0xd4, 0x52, 0x3b, 0x30, 0xfb, 0xb7, 0xe3, 0x3d,
		0xdc, 0xcc, 0xbe, 0xfa, 0xcf, 0xf8, 0x9b, 0x7f, 0x4b, 0xbe, 0xb8, 0xc6, 0x8b, 0x1d, 0x74, 0xe9,
		0x2a, 0x04, 0xe7, 0xa4, 0x8b, 0x30, 0x1c, 0xc2, 0x70, 0x5b, 0x0e, 0xc3, 0xb9, 0x52, 0x88, 0x69,
		0x94, 0xb5, 0xa2, 0x19, 0xba, 0xab, 0x3f, 0x9a, 0x96, 0xe9, 0xbf, 0xaa, 0xbb, 0xf9, 0xd9, 0x8f,
		0x53, 0xf7, 0xfa, 0x19, 0x05, 0x10, 0xe1, 0xf8, 0xc3, 0xf1, 0x6f, 0xbc, 0xe3, 0xcf, 0x2f, 0xae,
		0xb8, 0x06, 0xf2, 0xdd, 0x06, 0x44, 0x03, 0x52, 0xcb, 0xfc, 0x39, 0xb0, 0x6c, 0x21, 0xab, 0x04,
		0x8e, 0xe5, 0x27, 0x02, 0x3b, 0x80, 0x1d, 0xc0, 0x8e, 0x83, 0xc2, 0x0e, 0xd3, 0x91, 0x25, 0xb1,
		0x22, 0x79, 0x02, 0xa2, 0x89, 0x00, 0x06, 0x00, 0x03, 0xa2, 0x89, 0x88, 0x26, 0x1e, 0x6e, 0x34,
		0xb1, 0x8b, 0x28, 0x22, 0xa2, 0x88, 0xb3, 0x28, 0x22, 0x39, 0x24, 0x56, 0x26, 0x5e, 0x28, 0xdd,
		0x3a, 0x63, 0x83, 0x93, 0x40, 0x97, 0xba, 0xed, 0x0b, 0x31, 0x52, 0xe7, 0xf1, 0x65, 0x3c, 0x03,
		0x91, 0x43, 0x44, 0x0e, 0xb7, 0x1b, 0x39, 0x04, 0x81, 0x0f, 0x7e, 0x3c, 0xfc, 0x78, 0xf8, 0xf1,
		0xf0, 0xe3, 0xe1, 0xc7, 0x13, 0x44, 0x0b, 0x56, 0xc0, 0x6e, 0xc3, 0x6e, 0x20, 0xf0, 0xc1, 0x54,
		0xc3, 0x54, 0xc3, 0x54, 0xc3, 0x54, 0xc3, 0x54, 0xc3, 0x54, 0x23, 0xf4, 0xc6, 0x0c, 0xbd, 0x29,
		0x87, 0x98, 0x4a, 0x44, 0xe2, 0xfe, 0x31, 0xff, 0xce, 0x1d, 0x70, 0xf6, 0x66, 0x3c, 0x45, 0x29,
		0x9e, 0x02, 0xe1, 0xf9, 0xe1, 0xb8, 0x75, 0x7b, 0xf4, 0x62, 0x8e, 0x22, 0xd9, 0x31, 0x03, 0x74,
		0x79, 0x0f, 0x43, 0xa4, 0x0e, 0x91, 0x3a, 0x44, 0xea, 0xe0, 0xfe, 0xc3, 0xfd, 0x87, 0xfb, 0x0f,
		0xf7, 0x1f, 0xee, 0x3f, 0xdc, 0x7f, 0x44, 0xea, 0x10, 0xa9, 0x83, 0xa9, 0x86, 0xa9, 0x86, 0xa9,
		0x86, 0xa9, 0x86, 0xa9, 0x86, 0xa9, 0x46, 0xa4, 0x8e, 0x13, 0xa9, 0x2b, 0x1f, 0x6b, 0x2a, 0x11,
		0xb2, 0x4b, 0x72, 0x6c, 0x3f, 0xcd, 0xbe, 0xfb, 0xb7, 0xf9, 0x57, 0xd7, 0x18, 0xba, 0x7b, 0x32,
		0x4c, 0x7e, 0x88, 0x2e, 0xec, 0x44, 0x0d, 0xc0, 0x2c, 0x5c, 0xa5, 0x01, 0x6e, 0xa8, 0x47, 0xf8,
		0x8e, 0x87, 0x08, 0xea, 0x37, 0xd4, 0xb3, 0x5d, 0x19, 0x05, 0x17, 0x46, 0xd1, 0x75, 0xd9, 0xd3,
		0xfb, 0xe9, 0x3b, 0xb8, 0x9f, 0x9e, 0x2b, 0xb2, 0xeb, 0x3e, 0x6e, 0xa7, 0x57, 0x6b, 0xd1, 0x8c,
		0xdb, 0xe9, 0x8b, 0x2f, 0x11, 0x56, 0x37, 0xff, 0xa8, 0x85, 0xbf, 0xde, 0x79, 0x97, 0xb5, 0xf0,
		0xf3, 0x55, 0x81, 0x5d, 0x08, 0x3f, 0x6f, 0xfa, 0x77, 0x5a, 0x05, 0x9f, 0x32, 0x34, 0xda, 0x90,
		0x48, 0x15, 0xf0, 0x83, 0x47, 0xcf, 0x90, 0xe6, 0xa3, 0x90, 0x39, 0xf5, 0xef, 0x17, 0x6d, 0xea,
		0xa8, 0x7e, 0x1f, 0x3c, 0x36, 0xb0, 0xfc, 0x7d, 0xf0, 0x58, 0x59, 0xfd, 0xfb, 0x80, 0x50, 0xf5,
		0x3e, 0x68, 0x46, 0xad, 0xfb, 0xcc, 0xa9, 0xe0, 0x3a, 0xcf, 0x75, 0x17, 0xbb, 0xcf, 0x9a, 0x2a,
		0x35, 0x70, 0x2e, 0xac, 0x76, 0x7f, 0x24, 0x85, 0x3d, 0x73, 0xd5, 0x40, 0x75, 0x2f, 0xb5, 0xeb,
		0x4b, 0xf0, 0xf3, 0xd4, 0xa4, 0x1a, 0x1f, 0x08, 0xa5, 0x3d, 0x2b, 0xf4, 0xdd, 0x51, 0x78, 0x24,
		0x63, 0xfb, 0x82, 0xd2, 0x9e, 0xd1, 0xb0, 0x84, 0xad, 0x3f, 0x5a, 0x82, 0x51, 0xf7, 0x69, 0xd6,
		0xa1, 0xa8, 0x8c, 0xc5, 0x22, 0x36, 0x36, 0xd6, 0x2d, 0x0f, 0x60, 0x0d, 0xb0, 0x56, 0xba, 0xc2,
		0x86, 0x78, 0x65, 0x8d, 0xaa, 0xf2, 0xfb, 0x42, 0xba, 0xd2, 0xf4, 0x04, 0x47, 0xff, 0xe7, 0x7d,
		0xa0, 0xd2, 0x50, 0xe9, 0xb9, 0xa4, 0x2d, 0xa1, 0x8f, 0xa5, 0x18, 0x73, 0x54, 0x9a, 0x10, 0x8e,
		0x6d, 0xdf, 0xce, 0xf6, 0xb8, 0xc2, 0xf6, 0x87, 0x0b, 0xdd, 0xcb, 0x7a, 0x6b, 0x8e, 0x50, 0x13,
		0x10, 0x6b, 0xa2, 0x49, 0x6b, 0x22, 0x08, 0xaa, 0x2f, 0x05, 0x78, 0xab, 0xfb, 0xbe, 0x90, 0x36,
		0xd9, 0x25, 0x6f, 0xdf, 0x75, 0xb4, 0x81, 0xae, 0x8d, 0x6f, 0xb4, 0x8f, 0xf7, 0x3f, 0xae, 0xdf,
		0xb4, 0xf4, 0xdb, 0x1e, 0xe7, 0x6d, 0xf7, 0xe2, 0xad, 0xbd, 0x13, 0x17, 0xcd, 0x9c, 0x7a, 0x26,
		0x63, 0x0d, 0x86, 0xad, 0x69, 0xab, 0xb0, 0x8f, 0x55, 0xb8, 0x7f, 0xab, 0x90, 0x5c, 0x1f, 0x4e,
		0x26, 0x07, 0x78, 0xcc, 0xf3, 0xef, 0xb8, 0x1b, 0xef, 0x34, 0xbb, 0xd7, 0xc8, 0xd3, 0x6c, 0x92,
		0x82, 0xa9, 0x2a, 0x5a, 0x69, 0x85, 0x2b, 0xad, 0x78, 0xea, 0x0a, 0xc8, 0xdc, 0x97, 0x6e, 0x2b,
		0x1d, 0x25, 0x44, 0x2a, 0x2d, 0x52, 0x37, 0x6d, 0x2c, 0x9d, 0xa9, 0x3a, 0xd1, 0x75, 0xf5, 0x41,
		0xc7, 0xc0, 0x5a, 0x65, 0x29, 0x77, 0x59, 0x25, 0xaf, 0x4c, 0xd9, 0x2b, 0x53, 0xfa, 0xf2, 0xca,
		0xcf, 0x5b, 0x04, 0x0a, 0x61, 0xad, 0x56, 0x75, 0xbc, 0xd5, 0xcb, 0x5e, 0x09, 0xde, 0xea, 0x35,
		0x78, 0xab, 0x6a, 0x8f, 0x01, 0x6f, 0x75, 0xeb, 0xa2, 0xe5, 0x9d, 0xa1, 0xd7, 0x2e, 0xed, 0x23,
		0x4a, 0x36, 0x49, 0xd9, 0x50, 0xdf, 0xa9, 0xc4, 0x14, 0xfb, 0x0e, 0x0c, 0x31, 0x0c, 0x31, 0x0c,
		0x31, 0x0c, 0x31, 0x0c, 0x31, 0x0c, 0x31, 0x52, 0x49, 0x2a, 0xdb, 0x68, 0x57, 0x94, 0x4a, 0xa2,
		0x0b, 0xff, 0xab, 0x90, 0xda, 0x82, 0xa1, 0xf6, 0x3e, 0xf5, 0x32, 0x10, 0xef, 0x43, 0x53, 0xfe,
		0x3e, 0x8e, 0x06, 0xd5, 0x98, 0xb3, 0xf1, 0x62, 0x5a, 0x23, 0x43, 0x97, 0x23, 0x7e, 0xe0, 0x6a,
		0xde, 0x13, 0xb1, 0x2b, 0xc4, 0xae, 0x6a, 0x89, 0x5d, 0xb1, 0x75, 0x35, 0xdb, 0x5d, 0x66, 0x2a,
		0x2e, 0xdc, 0x65, 0xb8, 0xcb, 0x7b, 0xe0, 0x2e, 0x93, 0xf9, 0x78, 0x9b, 0xf4, 0xba, 0xab, 0xe2,
		0x2f, 0x33, 0xf9, 0x7a, 0x07, 0xee, 0x30, 0x77, 0xe1, 0x30, 0x6f, 0x4d, 0xb4, 0x70, 0x8f, 0xe1,
		0x1e, 0xbf, 0x9f, 0x9b, 0xee, 0x43, 0x48, 0x1c, 0xa3, 0x8c, 0x78, 0x1b, 0x0c, 0x23, 0x72, 0x21,
		0x38, 0x6e, 0xe1, 0x37, 0xce, 0x5d, 0x36, 0x60, 0x26, 0x55, 0xe8, 0xed, 0xec, 0x01, 0x33, 0x89,
		0x9a, 0x42, 0xcd, 0x48, 0x9d, 0x66, 0x06, 0xeb, 0x1a, 0x9e, 0x2b, 0xd0, 0x41, 0xae, 0xc0, 0xdc,
		0xd6, 0x77, 0x3a, 0xc8, 0x16, 0x48, 0xa0, 0xda, 0x19, 0x9b, 0x96, 0xf0, 0x38, 0x50, 0x9d, 0xf4,
		0xa0, 0xc1, 0x6f, 0x17, 0xf0, 0xbb, 0x7f, 0xf0, 0x4b, 0xa6, 0xa4, 0xe9, 0x86, 0x21, 0x3c, 0x4f,
		0x4b, 0x74, 0x82, 0x1f, 0xe2, 0x5b, 0xe9, 0x7f, 0x08, 0x37, 0x26, 0x23, 0xd0, 0xd7, 0xec, 0x40,
		0x9f, 0xa2, 0xca, 0x56, 0xa3, 0xba, 0x08, 0xf5, 0x21, 0xd4, 0xb7, 0x07, 0xa1, 0x3e, 0x7a, 0xea,
		0xcb, 0x46, 0x6c, 0x56, 0xb9, 0x5c, 0x71, 0x9e, 0x1a, 0xa3, 0xbb, 0xc3, 0xe5, 0xe5, 0x95, 0xfd,
		0x89, 0x39, 0x6a, 0x37, 0x80, 0x68, 0xa3, 0x5b, 0x96, 0xf3, 0x22, 0x4a, 0x9c, 0x19, 0xcc, 0x1e,
		0xa0, 0x7e, 0xaf, 0x6b, 0xa8, 0xcb, 0x40, 0x20, 0x20, 0xd0, 0xe1, 0x20, 0x10, 0x3d, 0x9f, 0x74,
		0x23, 0x02, 0x75, 0xf7, 0x22, 0xb8, 0x99, 0xdc, 0x79, 0xa4, 0xe6, 0x08, 0x93, 0xee, 0x43, 0xca,
		0x0a, 0x3e, 0xd0, 0xee, 0x47, 0xca, 0xda, 0xab, 0x2b, 0xdf, 0x97, 0xb4, 0xf6, 0x30, 0xd2, 0xfd,
		0x49, 0x0d, 0x8f, 0x19, 0xcf, 0x36, 0xc3, 0xef, 0x95, 0xbd, 0xc1, 0x95, 0xdb, 0x8b, 0x6e, 0xa2,
		0x2f, 0xfc, 0x3c, 0xff, 0x92, 0x87, 0xd4, 0xcb, 0xff, 0x88, 0x87, 0xdb, 0xe4, 0xfb, 0x1e, 0x6e,
		0xa2, 0xef, 0x4b, 0xde, 0xd6, 0x49, 0xe7, 0xd0, 0x5d, 0xbb, 0xc4, 0x76, 0x2f, 0xd5, 0xf9, 0x10,
		0xae, 0xd7, 0xc4, 0x5e, 0xaf, 0x56, 0xac, 0x54, 0xbf, 0x60, 0x93, 0xef, 0xd0, 0xaa, 0x38, 0xb2,
		0x69, 0x07, 0xd6, 0x1e, 0xa6, 0x94, 0x3d, 0xf3, 0xbd, 0x39, 0xaa, 0xf5, 0xea, 0x5c, 0xa7, 0x44,
		0x98, 0x26, 0xdd, 0x19, 0xeb, 0x16, 0xeb, 0xf6, 0x60, 0xd7, 0xed, 0x93, 0xe3, 0x0d, 0x53, 0xca,
		0x9e, 0xf9, 0xbe, 0xde, 0x75, 0xeb, 0x09, 0x23, 0x90, 0xa6, 0xff, 0xaa, 0xbe, 0x78, 0xd7, 0x9e,
		0x80, 0x15, 0x8c, 0x15, 0x7c, 0xb0, 0x2b, 0xd8, 0x13, 0xc6, 0x70, 0x55, 0xe3, 0x37, 0x7f, 0x58,
		0xef, 0x5a, 0x0e, 0x5c, 0xf5, 0x55, 0x9c, 0xea, 0x8b, 0xf5, 0x8b, 0xf5, 0x7b, 0xb0, 0xeb, 0x37,
		0x70, 0x87, 0x0b, 0x55, 0x5f, 0x7f, 0x67, 0x1e, 0x07, 0x33, 0x8b, 0x78, 0xc8, 0xae, 0x1e, 0x40,
		0xd8, 0x06, 0xed, 0x6b, 0x51, 0x97, 0x44, 0x77, 0x6d, 0x3a, 0xa1, 0x60, 0xb9, 0x1b, 0x48, 0x5d,
		0x20, 0x75, 0xe1, 0x0a, 0x58, 0x42, 0x37, 0xd0, 0xba, 0xd6, 0x44, 0xf1, 0xa1, 0x0b, 0x52, 0x57,
		0xbc, 0x67, 0x94, 0xcf, 0xa6, 0x3d, 0xd1, 0x5c, 0x6b, 0xca, 0xc0, 0xe1, 0xa5, 0x5e, 0x20, 0x77,
		0x81, 0xdc, 0x35, 0x35, 0x0c, 0x85, 0x82, 0xf8, 0x86, 0x81, 0x0d, 0x0a, 0x36, 0x28, 0xf5, 0x6d,
		0x50, 0xe8, 0x0a, 0xd7, 0x42, 0xe1, 0xac, 0xca, 0xdd, 0x89, 0x2a, 0x4c, 0xa9, 0x82, 0x7b, 0x51,
		0xca, 0xcd, 0xa8, 0x5a, 0x64, 0x83, 0xc1, 0x00, 0x95, 0xb3, 0xca, 0xc4, 0xc5, 0xa6, 0xb6, 0x8a,
		0xa1, 0xb1, 0x61, 0x68, 0x60, 0x68, 0xea, 0x34, 0x34, 0x36, 0x0c, 0x0d, 0x0c, 0x0d, 0x0c, 0xcd,
		0x1e, 0x1b, 0x1a, 0x5f, 0x57, 0x30, 0x34, 0x61, 0x27, 0x18, 0x1a, 0x18, 0x9a, 0xda, 0x0c, 0x0d,
		0x5d, 0xe1, 0x60, 0x68, 0x60, 0x68, 0xb6, 0x64, 0x68, 0xa2, 0xff, 0x60, 0x6d, 0xb6, 0x13, 0x82,
		0xdb, 0xf2, 0xe9, 0x21, 0x23, 0x92, 0xdb, 0x62, 0x9f, 0x20, 0x7e, 0x8e, 0x1f, 0x7e, 0x1b, 0x3e,
		0x1b, 0x55, 0x81, 0xd7, 0x3a, 0xef, 0xa2, 0x2a, 0x70, 0x81, 0x3e, 0xd0, 0xcb, 0x01, 0xe7, 0x4f,
		0xfd, 0x4e, 0x2a, 0x01, 0xe7, 0x8d, 0xad, 0xb8, 0x18, 0x70, 0xce, 0x80, 0x28, 0x05, 0x81, 0x73,
		0x08, 0x3b, 0xc5, 0xc4, 0x9c, 0xad, 0x14, 0x04, 0x76, 0xa5, 0xd3, 0xbc, 0x82, 0xc0, 0xe1, 0x8f,
		0xaa, 0xac, 0x20, 0x70, 0x31, 0x47, 0x8a, 0xce, 0x89, 0xaa, 0xb5, 0x40, 0x70, 0xf6, 0xd4, 0x70,
		0x1d, 0xea, 0x9a, 0x0b, 0x04, 0x67, 0x4e, 0x9d, 0x1a, 0x4e, 0x17, 0x16, 0x08, 0x4e, 0x72, 0x64,
		0x0c, 0xc7, 0xf6, 0xa5, 0x63, 0xd1, 0x0f, 0x26, 0x57, 0xfa, 0xed, 0x01, 0x43, 0x24, 0x5f, 0x15,
		0x54, 0xf7, 0x58, 0x3b, 0x3e, 0x9a, 0xcc, 0x55, 0x95, 0x6a, 0xfc, 0x22, 0x30, 0x44, 0x2a, 0xf4,
		0xea, 0x51, 0x24, 0x78, 0x5d, 0x14, 0x1f, 0x2e, 0xc0, 0x10, 0x89, 0x6a, 0xb5, 0x8b, 0xd0, 0x0b,
		0x72, 0x49, 0x3b, 0x90, 0x45, 0xa9, 0xf6, 0x54, 0x27, 0x80, 0x30, 0x40, 0x18, 0x20, 0x0c, 0x10,
		0x56, 0x12, 0x05, 0x2e, 0x5f, 0x4b, 0x50, 0xd8, 0xf4, 0x5c, 0x4b, 0x7f, 0xd5, 0x92, 0xdd, 0x2a,
		0x15, 0x86, 0xd3, 0xbd, 0x80, 0xc3, 0xc0, 0x61, 0xe0, 0x30, 0x70, 0x58, 0x45, 0x14, 0xd7, 0x80,
		0xe1, 0xd6, 0x61, 0x16, 0x44, 0x07, 0xe4, 0xd6, 0x05, 0xb9, 0x8b, 0x10, 0xa4, 0x56, 0x7d, 0x65,
		0x74, 0x20, 0x2f, 0xc2, 0x10, 0x07, 0x8d, 0xbc, 0x81, 0x27, 0xa4, 0xe6, 0x5a, 0xba, 0xcd, 0x70,
		0x7f, 0x53, 0x7d, 0x80, 0xc4, 0x40, 0x62, 0x38, 0xbf, 0x80, 0x60, 0x15, 0x51, 0x5c, 0xf4, 0xfb,
		0x47, 0x84, 0xc1, 0x20, 0x5c, 0x54, 0x4a, 0xb8, 0x58, 0xba, 0x93, 0x20, 0xe3, 0x25, 0x9d, 0x71,
		0xf1, 0x1f, 0x37, 0xc9, 0xc8, 0x7f, 0xc8, 0x78, 0xb5, 0x13, 0xc2, 0x05, 0x75, 0x40, 0xc5, 0x03,
		0xd9, 0xc8, 0xb0, 0x38, 0x49, 0xfd, 0xcc, 0x4d, 0x3f, 0xaf, 0x6d, 0x7a, 0x1f, 0xf5, 0x6f, 0xe2,
		0x93, 0xe3, 0xac, 0x1b, 0xaa, 0xd5, 0x9f, 0xdc, 0x4e, 0xff, 0x69, 0xe9, 0x57, 0xfd, 0x2e, 0x9e,
		0x4d, 0x23, 0xf9, 0x21, 0x6f, 0x27, 0x6f, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00,
		0xff, 0xff, 0xb7, 0x80, 0x48, 0x7d, 0xd3, 0x7c, 0x02, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
}

