// Code generated by GENERATOR. DO NOT EDIT.
/*
Package enterprise_1_0_0 is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/smbaker/gopath/pkg/mod/github.com/openconfig/ygot@v0.6.1-0.20200103195725-e3c44fa43926/genutil/names.go
using the following YANG input files:
	- device-range@2020-11-18.yang
	- device-group@2020-11-18.yang
Imported modules were sourced from:
	- yang/...
*/
package enterprise_1_0_0

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Device{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	DeviceGroup	*DeviceGroup_DeviceGroup	`path:"device-group" module:"device-group"`
	DeviceRange	*DeviceRange_DeviceRange	`path:"device-range" module:"device-range"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// DeviceGroup_DeviceGroup represents the /device-group/device-group YANG schema element.
type DeviceGroup_DeviceGroup struct {
	DeviceGroup	map[string]*DeviceGroup_DeviceGroup_DeviceGroup	`path:"device-group" module:"device-group"`
}

// IsYANGGoStruct ensures that DeviceGroup_DeviceGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*DeviceGroup_DeviceGroup) IsYANGGoStruct() {}

// NewDeviceGroup creates a new entry in the DeviceGroup list of the
// DeviceGroup_DeviceGroup struct. The keys of the list are populated from the input
// arguments.
func (t *DeviceGroup_DeviceGroup) NewDeviceGroup(Id string) (*DeviceGroup_DeviceGroup_DeviceGroup, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DeviceGroup == nil {
		t.DeviceGroup = make(map[string]*DeviceGroup_DeviceGroup_DeviceGroup)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DeviceGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DeviceGroup", key)
	}

	t.DeviceGroup[key] = &DeviceGroup_DeviceGroup_DeviceGroup{
		Id: &Id,
	}

	return t.DeviceGroup[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DeviceGroup_DeviceGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["DeviceGroup_DeviceGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *DeviceGroup_DeviceGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// DeviceGroup_DeviceGroup_DeviceGroup represents the /device-group/device-group/device-group YANG schema element.
type DeviceGroup_DeviceGroup_DeviceGroup struct {
	Description	*string	`path:"description" module:"device-group"`
	DisplayName	*string	`path:"display-name" module:"device-group"`
	Id	*string	`path:"id" module:"device-group"`
}

// IsYANGGoStruct ensures that DeviceGroup_DeviceGroup_DeviceGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*DeviceGroup_DeviceGroup_DeviceGroup) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the DeviceGroup_DeviceGroup_DeviceGroup struct, which is a YANG list entry.
func (t *DeviceGroup_DeviceGroup_DeviceGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DeviceGroup_DeviceGroup_DeviceGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["DeviceGroup_DeviceGroup_DeviceGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *DeviceGroup_DeviceGroup_DeviceGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// DeviceRange_DeviceRange represents the /device-range/device-range YANG schema element.
type DeviceRange_DeviceRange struct {
	DeviceRange	map[string]*DeviceRange_DeviceRange_DeviceRange	`path:"device-range" module:"device-range"`
}

// IsYANGGoStruct ensures that DeviceRange_DeviceRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*DeviceRange_DeviceRange) IsYANGGoStruct() {}

// NewDeviceRange creates a new entry in the DeviceRange list of the
// DeviceRange_DeviceRange struct. The keys of the list are populated from the input
// arguments.
func (t *DeviceRange_DeviceRange) NewDeviceRange(Id string) (*DeviceRange_DeviceRange_DeviceRange, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DeviceRange == nil {
		t.DeviceRange = make(map[string]*DeviceRange_DeviceRange_DeviceRange)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DeviceRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DeviceRange", key)
	}

	t.DeviceRange[key] = &DeviceRange_DeviceRange_DeviceRange{
		Id: &Id,
	}

	return t.DeviceRange[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DeviceRange_DeviceRange) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["DeviceRange_DeviceRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *DeviceRange_DeviceRange) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// DeviceRange_DeviceRange_DeviceRange represents the /device-range/device-range/device-range YANG schema element.
type DeviceRange_DeviceRange_DeviceRange struct {
	DeviceGroup	map[string]*DeviceRange_DeviceRange_DeviceRange_DeviceGroup	`path:"device-group" module:"device-range"`
	DisplayName	*string	`path:"display-name" module:"device-range"`
	Enabled	*bool	`path:"enabled" module:"device-range"`
	Id	*string	`path:"id" module:"device-range"`
	ImsiRangeFrom	*uint64	`path:"imsi-range-from" module:"device-range"`
	ImsiRangeTo	*uint64	`path:"imsi-range-to" module:"device-range"`
	ImsiWildcard	*string	`path:"imsi-wildcard" module:"device-range"`
	Priority	*uint32	`path:"priority" module:"device-range"`
}

// IsYANGGoStruct ensures that DeviceRange_DeviceRange_DeviceRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*DeviceRange_DeviceRange_DeviceRange) IsYANGGoStruct() {}

// NewDeviceGroup creates a new entry in the DeviceGroup list of the
// DeviceRange_DeviceRange_DeviceRange struct. The keys of the list are populated from the input
// arguments.
func (t *DeviceRange_DeviceRange_DeviceRange) NewDeviceGroup(DeviceGroup string) (*DeviceRange_DeviceRange_DeviceRange_DeviceGroup, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DeviceGroup == nil {
		t.DeviceGroup = make(map[string]*DeviceRange_DeviceRange_DeviceRange_DeviceGroup)
	}

	key := DeviceGroup

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DeviceGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DeviceGroup", key)
	}

	t.DeviceGroup[key] = &DeviceRange_DeviceRange_DeviceRange_DeviceGroup{
		DeviceGroup: &DeviceGroup,
	}

	return t.DeviceGroup[key], nil
}

// ΛListKeyMap returns the keys of the DeviceRange_DeviceRange_DeviceRange struct, which is a YANG list entry.
func (t *DeviceRange_DeviceRange_DeviceRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DeviceRange_DeviceRange_DeviceRange) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["DeviceRange_DeviceRange_DeviceRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *DeviceRange_DeviceRange_DeviceRange) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// DeviceRange_DeviceRange_DeviceRange_DeviceGroup represents the /device-range/device-range/device-range/device-group YANG schema element.
type DeviceRange_DeviceRange_DeviceRange_DeviceGroup struct {
	Allowed	*bool	`path:"allowed" module:"device-range"`
	DeviceGroup	*string	`path:"device-group" module:"device-range"`
}

// IsYANGGoStruct ensures that DeviceRange_DeviceRange_DeviceRange_DeviceGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*DeviceRange_DeviceRange_DeviceRange_DeviceGroup) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the DeviceRange_DeviceRange_DeviceRange_DeviceGroup struct, which is a YANG list entry.
func (t *DeviceRange_DeviceRange_DeviceRange_DeviceGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DeviceGroup == nil {
		return nil, fmt.Errorf("nil value for key DeviceGroup")
	}

	return map[string]interface{}{
		"device-group": *t.DeviceGroup,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DeviceRange_DeviceRange_DeviceRange_DeviceGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["DeviceRange_DeviceRange_DeviceRange_DeviceGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *DeviceRange_DeviceRange_DeviceRange_DeviceGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }



var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5c, 0xcd, 0x6e, 0xe3, 0x36,
		0x10, 0xbe, 0xfb, 0x29, 0x04, 0x9e, 0x63, 0xac, 0x9c, 0x38, 0x89, 0xd7, 0xb7, 0xb4, 0x69, 0x5a,
		0x60, 0x37, 0x6d, 0x90, 0x16, 0xbd, 0x04, 0xc1, 0x82, 0xb1, 0x68, 0x2f, 0x51, 0x59, 0x32, 0x28,
		0xaa, 0x89, 0xb1, 0xf0, 0xbb, 0x2f, 0xf4, 0x63, 0x45, 0xb2, 0xf5, 0x33, 0x43, 0xc9, 0x8a, 0x77,
		0x33, 0x37, 0x4b, 0xe2, 0x88, 0xe4, 0xcc, 0xc7, 0xe1, 0xcc, 0xc7, 0xb1, 0xbe, 0x0d, 0x2c, 0xcb,
		0xb2, 0xd8, 0x9f, 0x7c, 0x29, 0xd8, 0xd4, 0x62, 0x8e, 0xf8, 0x5f, 0xce, 0x04, 0x3b, 0x49, 0xee,
		0x7e, 0x92, 0x9e, 0xc3, 0xa6, 0xd6, 0x28, 0xbd, 0xfc, 0xd5, 0xf7, 0xe6, 0x72, 0xc1, 0xa6, 0x96,
		0x9d, 0xde, 0xb8, 0x96, 0x8a, 0x4d, 0xad, 0xe4, 0x15, 0xf1, 0x8d, 0x44, 0x7c, 0xb8, 0x50, 0x7e,
		0xb8, 0x2a, 0x3c, 0x29, 0xe9, 0x24, 0x6d, 0x75, 0x52, 0x6c, 0x53, 0xec, 0x32, 0xbb, 0xbd, 0xdb,
		0x75, 0xf6, 0xe0, 0x4e, 0x89, 0xb9, 0x7c, 0xd9, 0xeb, 0xab, 0xd0, 0xdf, 0x4a, 0xf9, 0x3b, 0xdd,
		0xc4, 0x8f, 0xff, 0xf6, 0x43, 0x35, 0x13, 0xa5, 0xa2, 0xc9, 0x50, 0xc4, 0xfa, 0xd9, 0x57, 0x4e,
		0xf2, 0x86, 0xb8, 0x97, 0x93, 0xf2, 0x86, 0x7f, 0xf0, 0xe0, 0x4a, 0x2d, 0xc2, 0xa5, 0xf0, 0x34,
		0x9b, 0x5a, 0x5a, 0x85, 0xa2, 0xa2, 0x61, 0xae, 0x55, 0x3c, 0xa8, 0xbd, 0x56, 0x9b, 0xc2, 0x9d,
		0xcd, 0xce, 0x5c, 0x77, 0xd5, 0x0d, 0x53, 0x3b, 0x46, 0xfd, 0x0d, 0x66, 0x68, 0x34, 0x07, 0xc4,
		0x2c, 0x40, 0xf3, 0x40, 0xcd, 0x84, 0x36, 0x17, 0xda, 0x6c, 0x70, 0xf3, 0x95, 0x9b, 0xb1, 0xc2,
		0x9c, 0x8d, 0x66, 0xcd, 0x99, 0x37, 0x98, 0x29, 0xb9, 0xd2, 0xd2, 0xf7, 0x9a, 0xd5, 0xf0, 0x6a,
		0xe5, 0x57, 0xa1, 0x86, 0x79, 0xa5, 0xc6, 0xb6, 0x1b, 0x9a, 0x35, 0x19, 0x1d, 0x63, 0x7c, 0x24,
		0x08, 0xb0, 0x60, 0x30, 0x06, 0x85, 0x31, 0x38, 0xf0, 0x20, 0xa9, 0x07, 0x4b, 0x03, 0x68, 0xb2,
		0xee, 0xfe, 0x59, 0xaf, 0x04, 0x4e, 0xd3, 0x81, 0x56, 0xd2, 0x5b, 0x40, 0x94, 0xbd, 0x75, 0x02,
		0x13, 0x40, 0xdb, 0xcf, 0xc2, 0x5b, 0xe8, 0xaf, 0x6c, 0x6a, 0x3d, 0x80, 0xd4, 0x04, 0x33, 0x5f,
		0xfc, 0xe6, 0x5b, 0xe9, 0x81, 0xed, 0x8d, 0x84, 0xf4, 0x9e, 0xd8, 0xbf, 0xdc, 0x0d, 0x45, 0xb5,
		0xdf, 0xab, 0x94, 0xbb, 0x51, 0x7c, 0x16, 0xad, 0xb4, 0x6b, 0xb9, 0x90, 0x3a, 0x88, 0x3a, 0x06,
		0xcb, 0x6f, 0x4e, 0x10, 0xaa, 0xe0, 0x2f, 0xfd, 0xab, 0xc2, 0xb6, 0x7b, 0x54, 0xc6, 0xa0, 0x9b,
		0x56, 0x8f, 0x03, 0x33, 0xf9, 0x1a, 0x63, 0x30, 0x47, 0x06, 0x2b, 0x97, 0xaf, 0x87, 0x5e, 0xb2,
		0x8e, 0xa0, 0x6e, 0x38, 0x2f, 0x45, 0x7e, 0x98, 0xfc, 0x30, 0xf9, 0x61, 0xf2, 0xc3, 0x26, 0xaa,
		0x98, 0x90, 0x1b, 0x8e, 0xa7, 0x25, 0x1d, 0xb8, 0xf3, 0x95, 0x0e, 0xb9, 0x5c, 0x72, 0xb9, 0xe5,
		0x99, 0xef, 0xb0, 0x11, 0x1c, 0xe4, 0x7b, 0xc9, 0xf7, 0x26, 0xaa, 0x38, 0x3b, 0x7d, 0x47, 0xbe,
		0x17, 0xc5, 0x5d, 0x7c, 0x12, 0xeb, 0x5a, 0x47, 0xcb, 0x3e, 0xcb, 0x40, 0x5f, 0x69, 0xdd, 0xc0,
		0x70, 0xdc, 0x4a, 0xef, 0x37, 0x57, 0x44, 0xbe, 0x23, 0x52, 0x96, 0x17, 0xba, 0x6e, 0xcd, 0x0e,
		0x70, 0xcb, 0x5f, 0xe0, 0x8d, 0xff, 0x52, 0x8e, 0x50, 0xc2, 0xf9, 0x65, 0x9d, 0x36, 0x45, 0xcd,
		0xee, 0xca, 0xf3, 0x7c, 0xcd, 0x1b, 0x79, 0x17, 0x16, 0xcc, 0xbe, 0x8a, 0x25, 0x5f, 0xf1, 0x78,
		0xf1, 0xb3, 0x0f, 0x79, 0x37, 0x53, 0x7d, 0x51, 0xc7, 0x79, 0x05, 0x5a, 0x85, 0x33, 0x9d, 0x66,
		0x1a, 0xec, 0x3a, 0x96, 0xfa, 0x3d, 0x12, 0xfa, 0x52, 0xf1, 0xbb, 0xdc, 0xd7, 0x6e, 0x90, 0x04,
		0x63, 0xc3, 0x7c, 0xc1, 0xf3, 0x2c, 0x63, 0x5b, 0x41, 0x53, 0x2a, 0x4e, 0xe3, 0x75, 0xb0, 0xb9,
		0x81, 0x6e, 0x9d, 0xb8, 0xe2, 0xde, 0x42, 0x34, 0x72, 0xcc, 0x49, 0xab, 0x1e, 0x38, 0xe6, 0x20,
		0x7c, 0x3a, 0x3e, 0x8e, 0x39, 0x1a, 0x54, 0xc7, 0x1c, 0x73, 0xb9, 0xda, 0x31, 0xea, 0x7f, 0x13,
		0x8e, 0xb9, 0xdc, 0x3c, 0x47, 0xce, 0x31, 0x97, 0x9a, 0xef, 0x60, 0x1c, 0x33, 0xe0, 0x08, 0xc1,
		0xe4, 0x28, 0x01, 0x68, 0xee, 0x7e, 0x42, 0xed, 0x7a, 0x18, 0xfc, 0xa0, 0xa1, 0x76, 0x2d, 0x4c,
		0xba, 0x09, 0xb5, 0x9b, 0xe0, 0x93, 0x35, 0xe4, 0xae, 0xeb, 0x3f, 0x0b, 0x07, 0xae, 0xba, 0xad,
		0x65, 0xb6, 0x82, 0xc0, 0xf9, 0x5f, 0x8b, 0x39, 0x0f, 0xdd, 0x78, 0xfa, 0x91, 0xd6, 0xa0, 0x62,
		0xb8, 0x38, 0x10, 0x8c, 0x45, 0x13, 0x4c, 0x1a, 0x62, 0xd3, 0x14, 0xa3, 0xad, 0xb1, 0xda, 0x1a,
		0xb3, 0xe6, 0xd8, 0x45, 0x86, 0xc6, 0x40, 0x5b, 0x81, 0xd3, 0xc7, 0x3d, 0x4b, 0x3d, 0xf9, 0xbe,
		0x2b, 0xb8, 0x87, 0xb1, 0xd6, 0xd6, 0xf9, 0x8d, 0x3a, 0x8a, 0xee, 0x01, 0x93, 0xc4, 0xb9, 0xf4,
		0x36, 0xae, 0x9d, 0x96, 0x17, 0x2d, 0xaf, 0x0e, 0x97, 0x97, 0x2b, 0xf8, 0x5c, 0x89, 0xb9, 0xc9,
		0xf2, 0xba, 0x44, 0xc8, 0xdc, 0x65, 0x69, 0xcc, 0x62, 0x5a, 0xcc, 0x64, 0xf6, 0xaf, 0xa5, 0xc3,
		0xba, 0x5a, 0xb8, 0xad, 0xf6, 0xe1, 0x34, 0xdd, 0xc6, 0x84, 0x5d, 0xa0, 0x04, 0xdc, 0x28, 0x11,
		0x37, 0x4a, 0xc8, 0x71, 0x89, 0x39, 0x54, 0x2f, 0xc0, 0x44, 0xbd, 0x21, 0x91, 0x8d, 0xb3, 0x95,
		0xe6, 0x0b, 0xa8, 0x4b, 0x2c, 0x4d, 0x79, 0xef, 0xa3, 0x37, 0x7d, 0xa9, 0xff, 0x5d, 0x93, 0xd1,
		0xb7, 0xe3, 0xce, 0xdf, 0xc7, 0x11, 0x26, 0x05, 0xf9, 0x7d, 0xf1, 0xe9, 0x74, 0x84, 0x49, 0x34,
		0x3a, 0x42, 0x15, 0x74, 0x84, 0x99, 0x4c, 0x4b, 0x78, 0xfc, 0xc9, 0x15, 0x88, 0x73, 0xcc, 0xad,
		0x40, 0x53, 0x96, 0xfe, 0x9a, 0x14, 0xcf, 0xb9, 0x1b, 0x90, 0xb3, 0x26, 0x67, 0x6d, 0x94, 0xb5,
		0x02, 0xb3, 0x55, 0x3a, 0xbf, 0x27, 0x08, 0xf7, 0x0b, 0xe1, 0x30, 0xec, 0xfe, 0xd0, 0xfe, 0x8e,
		0x6b, 0x2d, 0x94, 0x07, 0x0e, 0x37, 0xd8, 0x83, 0x3d, 0xfc, 0xc8, 0x87, 0xf3, 0xab, 0xe1, 0xcd,
		0xe3, 0xb7, 0xc9, 0x66, 0x98, 0xbf, 0x1c, 0x63, 0x2e, 0x47, 0xa7, 0x1b, 0xf6, 0x36, 0x15, 0x34,
		0xcb, 0x40, 0x22, 0xd6, 0x60, 0xd4, 0x1a, 0xb6, 0x0a, 0xcf, 0x69, 0x15, 0xfe, 0xc4, 0xd4, 0x7e,
		0xfd, 0xc9, 0x5f, 0xa5, 0x5d, 0xea, 0x8e, 0x00, 0xab, 0x80, 0x34, 0x26, 0x02, 0x91, 0x08, 0x44,
		0x28, 0x30, 0x0b, 0x7e, 0x2d, 0x61, 0x6a, 0x86, 0x73, 0xe5, 0x2f, 0xf1, 0xaa, 0xcf, 0xbb, 0xbc,
		0xfc, 0x8b, 0x4e, 0x7a, 0xc9, 0x92, 0xb0, 0x60, 0x6e, 0x03, 0xea, 0x96, 0xe0, 0x6e, 0x0b, 0xf2,
		0xce, 0xc0, 0xde, 0x19, 0xe8, 0xdb, 0x83, 0x1f, 0xb7, 0x08, 0x0c, 0x52, 0x76, 0x33, 0x56, 0x7d,
		0x3f, 0x86, 0x92, 0x9e, 0xbe, 0x18, 0x9b, 0x18, 0x3b, 0xc5, 0xf5, 0xc4, 0x40, 0xf4, 0x3e, 0xdd,
		0x3b, 0x1e, 0x8c, 0x8c, 0x62, 0x06, 0x2e, 0x63, 0xc6, 0xa7, 0xa3, 0x05, 0x5d, 0x49, 0x83, 0xb4,
		0x7d, 0x4f, 0x0b, 0x56, 0xa4, 0x25, 0xfc, 0x5a, 0x33, 0x48, 0x87, 0x56, 0xed, 0x68, 0x32, 0x1e,
		0x5f, 0x5c, 0x8e, 0xc7, 0xf6, 0xe5, 0xd9, 0xa5, 0xfd, 0xf1, 0xfc, 0x7c, 0x74, 0x31, 0x3a, 0x3f,
		0x22, 0x6d, 0x0f, 0xfa, 0x91, 0x7a, 0x1c, 0x1c, 0xe6, 0xfd, 0x18, 0x7e, 0x31, 0xb7, 0x87, 0x6a,
		0xbf, 0x93, 0xad, 0x58, 0xfb, 0xb4, 0x11, 0xd3, 0x46, 0x4c, 0x1b, 0x31, 0x6d, 0xc4, 0xb4, 0x11,
		0xd3, 0x46, 0xfc, 0xbe, 0x37, 0xe2, 0x4e, 0x13, 0x6d, 0x64, 0xf1, 0x44, 0x26, 0x67, 0x56, 0x44,
		0x11, 0xed, 0xe8, 0x1f, 0x12, 0x52, 0xa8, 0xc7, 0x5a, 0xb8, 0x67, 0xe9, 0x3a, 0x33, 0xae, 0x0c,
		0x0a, 0x53, 0x33, 0x49, 0xa2, 0xb0, 0x88, 0xc2, 0xea, 0x85, 0xc2, 0x42, 0x63, 0xb5, 0x3c, 0x6a,
		0x46, 0x02, 0x97, 0xa2, 0x66, 0x8a, 0x9a, 0x7f, 0x80, 0xa8, 0x19, 0x5c, 0x72, 0x54, 0x85, 0xeb,
		0x91, 0x49, 0xd8, 0x8c, 0x2c, 0x49, 0xfa, 0xc9, 0xe3, 0xe6, 0x11, 0xc5, 0xcd, 0x07, 0x53, 0x2d,
		0x45, 0xc9, 0x14, 0x25, 0x6f, 0xa3, 0xe4, 0x6c, 0x07, 0x3f, 0x8a, 0xda, 0xf3, 0x7e, 0x6a, 0xac,
		0xe3, 0x72, 0x83, 0x03, 0x14, 0x3d, 0xac, 0x94, 0xf4, 0x95, 0xd4, 0x6b, 0x78, 0xe1, 0x43, 0x26,
		0x01, 0xaf, 0xba, 0xb3, 0xa9, 0x5c, 0x89, 0xca, 0x95, 0x8a, 0x0c, 0xdf, 0xd9, 0x29, 0xa2, 0x60,
		0x09, 0xf0, 0xf7, 0x15, 0x24, 0x83, 0x77, 0xe4, 0xc5, 0xd1, 0x36, 0x15, 0x47, 0xe7, 0xbe, 0xb3,
		0x67, 0xd3, 0x57, 0x46, 0xe8, 0x2b, 0x23, 0x83, 0x6e, 0x37, 0x54, 0xec, 0x57, 0x46, 0x6a, 0xff,
		0x9f, 0xf4, 0x96, 0x5f, 0x19, 0x01, 0x4d, 0x0d, 0x36, 0xa5, 0xca, 0xaf, 0x8c, 0x0c, 0x72, 0xc3,
		0xad, 0x1a, 0x26, 0x93, 0xc1, 0x0d, 0xff, 0x4f, 0xdc, 0xfb, 0xfe, 0xfe, 0x76, 0xb5, 0x3b, 0x74,
		0x96, 0x7f, 0x54, 0x32, 0xb2, 0x64, 0x20, 0x9b, 0xc1, 0xe6, 0x3b, 0x00, 0x00, 0x00, 0xff, 0xff,
		0x01, 0x00, 0x00, 0xff, 0xff, 0x09, 0x31, 0xa8, 0x5b, 0x86, 0x5b, 0x00, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
}

