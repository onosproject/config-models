// Code generated by GENERATOR. DO NOT EDIT.
/*
Package enterprise_1_0_0 is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/smbaker/gopath/pkg/mod/github.com/openconfig/ygot@v0.6.1-0.20200103195725-e3c44fa43926/genutil/names.go
using the following YANG input files:
	- enterprise-subscriber@2020-11-18.yang
	- device-group@2020-11-18.yang
Imported modules were sourced from:
	- yang/...
*/
package enterprise_1_0_0

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Device{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// AetherSubscriber_Subscriber represents the /aether-subscriber/subscriber YANG schema element.
type AetherSubscriber_Subscriber struct {
	Ue	map[string]*AetherSubscriber_Subscriber_Ue	`path:"ue" module:"aether-subscriber"`
}

// IsYANGGoStruct ensures that AetherSubscriber_Subscriber implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*AetherSubscriber_Subscriber) IsYANGGoStruct() {}

// NewUe creates a new entry in the Ue list of the
// AetherSubscriber_Subscriber struct. The keys of the list are populated from the input
// arguments.
func (t *AetherSubscriber_Subscriber) NewUe(Id string) (*AetherSubscriber_Subscriber_Ue, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ue == nil {
		t.Ue = make(map[string]*AetherSubscriber_Subscriber_Ue)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ue", key)
	}

	t.Ue[key] = &AetherSubscriber_Subscriber_Ue{
		Id: &Id,
	}

	return t.Ue[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *AetherSubscriber_Subscriber) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["AetherSubscriber_Subscriber"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *AetherSubscriber_Subscriber) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// AetherSubscriber_Subscriber_Ue represents the /aether-subscriber/subscriber/ue YANG schema element.
type AetherSubscriber_Subscriber_Ue struct {
	DeviceGroup	map[string]*AetherSubscriber_Subscriber_Ue_DeviceGroup	`path:"device-group" module:"aether-subscriber"`
	DisplayName	*string	`path:"display-name" module:"aether-subscriber"`
	Enabled	*bool	`path:"enabled" module:"aether-subscriber"`
	Id	*string	`path:"id" module:"aether-subscriber"`
	ImsiRangeFrom	*uint64	`path:"imsi-range-from" module:"aether-subscriber"`
	ImsiRangeTo	*uint64	`path:"imsi-range-to" module:"aether-subscriber"`
	ImsiWildcard	*string	`path:"imsi-wildcard" module:"aether-subscriber"`
	Priority	*uint32	`path:"priority" module:"aether-subscriber"`
}

// IsYANGGoStruct ensures that AetherSubscriber_Subscriber_Ue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*AetherSubscriber_Subscriber_Ue) IsYANGGoStruct() {}

// NewDeviceGroup creates a new entry in the DeviceGroup list of the
// AetherSubscriber_Subscriber_Ue struct. The keys of the list are populated from the input
// arguments.
func (t *AetherSubscriber_Subscriber_Ue) NewDeviceGroup(DeviceGroup string) (*AetherSubscriber_Subscriber_Ue_DeviceGroup, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DeviceGroup == nil {
		t.DeviceGroup = make(map[string]*AetherSubscriber_Subscriber_Ue_DeviceGroup)
	}

	key := DeviceGroup

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DeviceGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DeviceGroup", key)
	}

	t.DeviceGroup[key] = &AetherSubscriber_Subscriber_Ue_DeviceGroup{
		DeviceGroup: &DeviceGroup,
	}

	return t.DeviceGroup[key], nil
}

// ΛListKeyMap returns the keys of the AetherSubscriber_Subscriber_Ue struct, which is a YANG list entry.
func (t *AetherSubscriber_Subscriber_Ue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *AetherSubscriber_Subscriber_Ue) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["AetherSubscriber_Subscriber_Ue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *AetherSubscriber_Subscriber_Ue) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// AetherSubscriber_Subscriber_Ue_DeviceGroup represents the /aether-subscriber/subscriber/ue/device-group YANG schema element.
type AetherSubscriber_Subscriber_Ue_DeviceGroup struct {
	Allowed	*bool	`path:"allowed" module:"aether-subscriber"`
	DeviceGroup	*string	`path:"device-group" module:"aether-subscriber"`
}

// IsYANGGoStruct ensures that AetherSubscriber_Subscriber_Ue_DeviceGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*AetherSubscriber_Subscriber_Ue_DeviceGroup) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the AetherSubscriber_Subscriber_Ue_DeviceGroup struct, which is a YANG list entry.
func (t *AetherSubscriber_Subscriber_Ue_DeviceGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DeviceGroup == nil {
		return nil, fmt.Errorf("nil value for key DeviceGroup")
	}

	return map[string]interface{}{
		"device-group": *t.DeviceGroup,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *AetherSubscriber_Subscriber_Ue_DeviceGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["AetherSubscriber_Subscriber_Ue_DeviceGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *AetherSubscriber_Subscriber_Ue_DeviceGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Device represents the /device YANG schema element.
type Device struct {
	DeviceGroup	*DeviceGroup_DeviceGroup	`path:"device-group" module:"device-group"`
	Subscriber	*AetherSubscriber_Subscriber	`path:"subscriber" module:"aether-subscriber"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// DeviceGroup_DeviceGroup represents the /device-group/device-group YANG schema element.
type DeviceGroup_DeviceGroup struct {
	DeviceGroup	map[string]*DeviceGroup_DeviceGroup_DeviceGroup	`path:"device-group" module:"device-group"`
}

// IsYANGGoStruct ensures that DeviceGroup_DeviceGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*DeviceGroup_DeviceGroup) IsYANGGoStruct() {}

// NewDeviceGroup creates a new entry in the DeviceGroup list of the
// DeviceGroup_DeviceGroup struct. The keys of the list are populated from the input
// arguments.
func (t *DeviceGroup_DeviceGroup) NewDeviceGroup(Id string) (*DeviceGroup_DeviceGroup_DeviceGroup, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DeviceGroup == nil {
		t.DeviceGroup = make(map[string]*DeviceGroup_DeviceGroup_DeviceGroup)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DeviceGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DeviceGroup", key)
	}

	t.DeviceGroup[key] = &DeviceGroup_DeviceGroup_DeviceGroup{
		Id: &Id,
	}

	return t.DeviceGroup[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DeviceGroup_DeviceGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["DeviceGroup_DeviceGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *DeviceGroup_DeviceGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// DeviceGroup_DeviceGroup_DeviceGroup represents the /device-group/device-group/device-group YANG schema element.
type DeviceGroup_DeviceGroup_DeviceGroup struct {
	Description	*string	`path:"description" module:"device-group"`
	DisplayName	*string	`path:"display-name" module:"device-group"`
	Id	*string	`path:"id" module:"device-group"`
}

// IsYANGGoStruct ensures that DeviceGroup_DeviceGroup_DeviceGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*DeviceGroup_DeviceGroup_DeviceGroup) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the DeviceGroup_DeviceGroup_DeviceGroup struct, which is a YANG list entry.
func (t *DeviceGroup_DeviceGroup_DeviceGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DeviceGroup_DeviceGroup_DeviceGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["DeviceGroup_DeviceGroup_DeviceGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *DeviceGroup_DeviceGroup_DeviceGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }



var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5c, 0x4d, 0x6f, 0xe2, 0x48,
		0x13, 0xbe, 0xf3, 0x2b, 0xac, 0x3e, 0xc7, 0xc2, 0x24, 0x24, 0x61, 0xb8, 0xf1, 0xbe, 0xd9, 0xec,
		0x4a, 0x33, 0xd9, 0x8d, 0x66, 0x76, 0xf7, 0x12, 0x45, 0xa3, 0x06, 0x37, 0xa4, 0xb5, 0xc6, 0x46,
		0xed, 0xf6, 0x26, 0x68, 0xc4, 0x7f, 0x5f, 0x61, 0x83, 0x31, 0xe0, 0x8f, 0xaa, 0xb6, 0xf1, 0x30,
		0x93, 0xba, 0x61, 0xbb, 0xcb, 0xed, 0xae, 0x7a, 0xba, 0x3e, 0x1e, 0x17, 0xfe, 0xd6, 0xb1, 0x2c,
		0xcb, 0x62, 0xbf, 0xf3, 0xb9, 0x60, 0x43, 0x8b, 0xb9, 0xe2, 0x5f, 0x39, 0x11, 0xec, 0x22, 0x39,
		0xfb, 0x51, 0xfa, 0x2e, 0x1b, 0x5a, 0xbd, 0xcd, 0xe1, 0xff, 0x03, 0x7f, 0x2a, 0x67, 0x6c, 0x68,
		0x39, 0x9b, 0x13, 0x77, 0x52, 0xb1, 0xa1, 0x95, 0xdc, 0x22, 0x3e, 0x91, 0x88, 0xdb, 0x33, 0x15,
		0x44, 0x8b, 0xbd, 0x2b, 0x39, 0x93, 0x6c, 0x46, 0x5d, 0xec, 0x8f, 0xd9, 0x9f, 0x32, 0x3d, 0x7d,
		0x38, 0x75, 0x7a, 0xe1, 0x51, 0x89, 0xa9, 0x7c, 0x3b, 0x9a, 0x6b, 0x6f, 0xbe, 0x85, 0x0a, 0x0e,
		0xa6, 0x89, 0x2f, 0x7f, 0x09, 0x22, 0x35, 0x11, 0xb9, 0xa2, 0xc9, 0xa3, 0x88, 0xe5, 0x6b, 0xa0,
		0xdc, 0xe4, 0x0e, 0xf1, 0x2c, 0x17, 0xf9, 0x03, 0x7f, 0xe3, 0xe1, 0x48, 0xcd, 0xa2, 0xb9, 0xf0,
		0x35, 0x1b, 0x5a, 0x5a, 0x45, 0xa2, 0x60, 0x60, 0x66, 0x54, 0xfc, 0x50, 0x47, 0xa3, 0x56, 0x7b,
		0x67, 0x56, 0x07, 0x6b, 0x3d, 0x54, 0x37, 0x4c, 0xed, 0x18, 0xf5, 0x57, 0x98, 0xa1, 0xd2, 0x1c,
		0x10, 0xb3, 0x00, 0xcd, 0x03, 0x35, 0x13, 0xda, 0x5c, 0x68, 0xb3, 0xc1, 0xcd, 0x97, 0x6f, 0xc6,
		0x02, 0x73, 0x56, 0x9a, 0x35, 0x63, 0xde, 0x70, 0xa2, 0xe4, 0x42, 0xcb, 0xc0, 0xaf, 0x56, 0xc3,
		0xce, 0xca, 0x3b, 0xa1, 0x8a, 0x75, 0x6d, 0x8c, 0xed, 0x54, 0x0c, 0xab, 0x32, 0x3a, 0xc6, 0xf8,
		0x48, 0x10, 0x60, 0xc1, 0x60, 0x0c, 0x0a, 0x63, 0x70, 0xe0, 0x41, 0x52, 0x0e, 0x96, 0x0a, 0xd0,
		0xa4, 0xd3, 0xfd, 0xb9, 0x5c, 0x08, 0x9c, 0xa6, 0x43, 0xad, 0xa4, 0x3f, 0x83, 0x28, 0x7b, 0xeb,
		0x04, 0x06, 0x80, 0xb1, 0x9f, 0x84, 0x3f, 0xd3, 0x2f, 0x6c, 0x68, 0x3d, 0x81, 0xd4, 0x04, 0x33,
		0x5f, 0x7c, 0xe7, 0x07, 0xe9, 0x83, 0xed, 0x8d, 0x84, 0xf4, 0x91, 0xd8, 0xdf, 0xdc, 0x8b, 0x44,
		0xb1, 0xdf, 0x2b, 0x94, 0xbb, 0x57, 0x7c, 0xb2, 0xde, 0x69, 0x77, 0x72, 0x26, 0x75, 0xb8, 0x9e,
		0x18, 0x2c, 0xbf, 0xba, 0x40, 0xa8, 0x82, 0xbf, 0xb5, 0xaf, 0x0a, 0xc7, 0x69, 0x51, 0x19, 0x9d,
		0x66, 0x46, 0x3d, 0x77, 0xcc, 0xe4, 0x4b, 0x8c, 0xc1, 0x5c, 0x19, 0x2e, 0x3c, 0xbe, 0xb4, 0xfd,
		0x64, 0x1f, 0x41, 0xdd, 0x70, 0x56, 0x8a, 0xfc, 0x30, 0xf9, 0x61, 0xf2, 0xc3, 0xe4, 0x87, 0x4d,
		0x54, 0x31, 0x20, 0x37, 0x1c, 0x2f, 0x4b, 0xba, 0x70, 0xe7, 0x2b, 0x5d, 0x72, 0xb9, 0xe4, 0x72,
		0xf3, 0x2b, 0x5f, 0xbb, 0x12, 0x1c, 0xe4, 0x7b, 0xc9, 0xf7, 0x26, 0xaa, 0xb8, 0xba, 0x7c, 0x47,
		0xbe, 0x17, 0xc5, 0x5d, 0x7c, 0x14, 0xcb, 0x52, 0x47, 0xcb, 0x3e, 0xc9, 0x50, 0x8f, 0xb4, 0xae,
		0x60, 0x38, 0x1e, 0xa4, 0xff, 0x8b, 0x27, 0xd6, 0xbe, 0x63, 0xad, 0x2c, 0x3f, 0xf2, 0xbc, 0x92,
		0x08, 0xf0, 0xc0, 0xdf, 0xe0, 0x83, 0xff, 0x50, 0xae, 0x50, 0xc2, 0xfd, 0xdf, 0x72, 0x33, 0x14,
		0xb5, 0xba, 0x91, 0xef, 0x07, 0x9a, 0x57, 0xf2, 0x2e, 0x2c, 0x9c, 0xbc, 0x88, 0x39, 0x5f, 0xf0,
		0x78, 0xf3, 0xb3, 0x6e, 0xd6, 0xcd, 0x14, 0x1f, 0x94, 0x71, 0x5e, 0xa1, 0x56, 0xd1, 0x44, 0x6f,
		0x2a, 0x0d, 0x76, 0x17, 0x4b, 0xfd, 0xba, 0x16, 0xfa, 0x5a, 0xf0, 0x3b, 0xdf, 0xd7, 0xae, 0x90,
		0x04, 0x63, 0xc5, 0x7a, 0xc1, 0xeb, 0xcc, 0x63, 0x5b, 0x41, 0x4b, 0xda, 0x5f, 0xc6, 0xee, 0x61,
		0x33, 0x0f, 0xca, 0xc2, 0x68, 0x1c, 0x4e, 0x94, 0x1c, 0x0b, 0x55, 0xcc, 0x30, 0x67, 0xc6, 0xb4,
		0xc0, 0x2f, 0x87, 0xd1, 0xf8, 0xfc, 0xf8, 0xe5, 0xf5, 0x43, 0x35, 0xc5, 0x2f, 0x47, 0xa2, 0x9a,
		0x55, 0x8e, 0xc4, 0x39, 0x70, 0xc9, 0xf9, 0xa6, 0x38, 0x73, 0x2e, 0x39, 0xd7, 0x54, 0x27, 0xe3,
		0x92, 0x01, 0xaf, 0x0a, 0x4c, 0x5e, 0x19, 0x00, 0xcd, 0xdd, 0x4e, 0x4a, 0x5d, 0x0e, 0x83, 0x1f,
		0x34, 0xa5, 0x2e, 0x85, 0x49, 0x33, 0x29, 0x75, 0x15, 0x7c, 0xd2, 0x81, 0xdc, 0xf3, 0x82, 0x57,
		0xe1, 0xc2, 0x55, 0xb7, 0xb5, 0xcc, 0x56, 0x10, 0xb8, 0xfe, 0x3b, 0x31, 0xe5, 0x91, 0x17, 0x2f,
		0x7f, 0xad, 0x35, 0xa8, 0x18, 0x2e, 0xdf, 0x03, 0x63, 0xd1, 0x04, 0x93, 0x86, 0xd8, 0x34, 0xc5,
		0x68, 0x6d, 0xac, 0xd6, 0xc6, 0xac, 0x39, 0x76, 0x91, 0x29, 0x30, 0xd0, 0x56, 0xe0, 0x32, 0xf1,
		0xc8, 0x52, 0xe3, 0x20, 0xf0, 0x04, 0xf7, 0x31, 0xd6, 0xda, 0x3a, 0xbf, 0x5e, 0x43, 0x59, 0x3c,
		0x60, 0x91, 0x38, 0x97, 0x5e, 0xc7, 0xb5, 0xd3, 0xf6, 0xa2, 0xed, 0xd5, 0xe0, 0xf6, 0xf2, 0x04,
		0x9f, 0x2a, 0x31, 0x35, 0xd9, 0x5e, 0xb7, 0x08, 0x99, 0xc7, 0xb4, 0x5c, 0x99, 0x0d, 0xf7, 0x2b,
		0x96, 0xe3, 0x63, 0xe9, 0xb2, 0xa6, 0x36, 0x6e, 0xad, 0x38, 0xbc, 0x29, 0xab, 0x31, 0x69, 0x17,
		0xa8, 0xd0, 0x36, 0x2a, 0xb8, 0x8d, 0x0a, 0x6f, 0x5c, 0x01, 0x0e, 0xd5, 0x0b, 0xb0, 0x20, 0x2f,
		0x2a, 0x58, 0xb9, 0xd0, 0x2f, 0x42, 0xd9, 0xbb, 0xea, 0xb0, 0x9b, 0xf9, 0x19, 0x89, 0x2e, 0xd2,
		0x17, 0x1e, 0xd4, 0xb4, 0xa3, 0xf8, 0xee, 0x5f, 0xd2, 0x3b, 0x7e, 0xcd, 0xfc, 0xfc, 0x4b, 0x54,
		0x57, 0xeb, 0xf5, 0x78, 0xf1, 0xf7, 0xf1, 0x7a, 0x92, 0x12, 0xfb, 0xb6, 0xb8, 0x72, 0x7a, 0x3d,
		0x49, 0x14, 0x39, 0x42, 0x15, 0xf4, 0x7a, 0x32, 0x59, 0x96, 0xf0, 0xf9, 0xd8, 0x13, 0x88, 0x77,
		0x94, 0x5b, 0x81, 0xaa, 0xca, 0x7c, 0x57, 0x08, 0x4f, 0xb9, 0x17, 0x92, 0xb3, 0x26, 0x67, 0x6d,
		0x54, 0xa9, 0x02, 0x2b, 0x54, 0x7a, 0x37, 0x4f, 0x10, 0x6e, 0x17, 0xc2, 0x51, 0xd4, 0xfc, 0x0b,
		0xf9, 0x47, 0xae, 0xb5, 0x50, 0x3e, 0x38, 0xdd, 0x60, 0x4f, 0x8e, 0xfd, 0x81, 0xdb, 0xd3, 0x91,
		0x7d, 0xff, 0xfc, 0x6d, 0xb0, 0xb2, 0xb3, 0x87, 0x7d, 0xcc, 0x61, 0xef, 0x72, 0xc5, 0xbe, 0x4f,
		0x77, 0xcc, 0x3c, 0x94, 0x88, 0x3d, 0xb8, 0x1e, 0x0d, 0xdb, 0x85, 0xd7, 0xb4, 0x0b, 0x7f, 0x62,
		0x3a, 0x5f, 0x71, 0x7f, 0x26, 0xf0, 0xdc, 0x61, 0x22, 0x86, 0x23, 0x0d, 0xfb, 0x44, 0x1a, 0x12,
		0x69, 0x08, 0x05, 0xe6, 0x9e, 0x5f, 0xb3, 0x63, 0xb8, 0xd9, 0x53, 0x15, 0xcc, 0xf1, 0xaa, 0xcf,
		0xba, 0xbc, 0xec, 0x8d, 0x2e, 0x5a, 0xa9, 0x92, 0xb0, 0x60, 0xae, 0x03, 0xea, 0x9a, 0xe0, 0xae,
		0x0b, 0xf2, 0xc6, 0xc0, 0xde, 0x18, 0xe8, 0xeb, 0x83, 0x1f, 0xb7, 0x09, 0x0c, 0x4a, 0x76, 0x33,
		0x26, 0xfd, 0x38, 0x87, 0x92, 0xbe, 0xbe, 0xe9, 0x9b, 0x18, 0x7b, 0x83, 0xeb, 0x81, 0x81, 0xe8,
		0xe7, 0x4d, 0xec, 0x78, 0x32, 0x32, 0x8a, 0x19, 0xb8, 0x8c, 0x19, 0x9f, 0x86, 0x36, 0x74, 0x21,
		0x0d, 0x52, 0xf7, 0x3e, 0x35, 0x58, 0x91, 0x9a, 0xf0, 0xab, 0xcd, 0x20, 0x9d, 0x5a, 0xb5, 0xbd,
		0x41, 0xbf, 0x7f, 0x73, 0xdb, 0xef, 0x3b, 0xb7, 0x57, 0xb7, 0xce, 0x87, 0xeb, 0xeb, 0xde, 0x4d,
		0xef, 0xfa, 0x8c, 0xb4, 0xdd, 0x69, 0x47, 0xea, 0xb9, 0x73, 0x9a, 0xfb, 0x63, 0xf8, 0xc5, 0x4c,
		0x0c, 0xd5, 0x41, 0x23, 0xa1, 0x58, 0x07, 0x14, 0x88, 0x29, 0x10, 0x53, 0x20, 0xa6, 0x40, 0x4c,
		0x81, 0x98, 0x02, 0xf1, 0xfb, 0x0e, 0xc4, 0x8d, 0x16, 0xda, 0xc8, 0x86, 0x89, 0x54, 0x0e, 0xd9,
		0x38, 0xb1, 0x0e, 0xe5, 0xdd, 0x84, 0x0d, 0x6a, 0xb1, 0xf1, 0xed, 0x55, 0x7a, 0xee, 0x84, 0x2b,
		0x83, 0x2e, 0xd4, 0x54, 0x92, 0xb8, 0x2b, 0xe2, 0xae, 0x5a, 0xe1, 0xae, 0xd0, 0x58, 0xcd, 0x4f,
		0x97, 0x91, 0xc0, 0xa5, 0x74, 0x99, 0xd2, 0xe5, 0x1f, 0x20, 0x5d, 0x06, 0xf7, 0x1a, 0x15, 0xe1,
		0xba, 0x67, 0x92, 0x2f, 0x23, 0x7b, 0x91, 0x7e, 0xf2, 0x84, 0xb9, 0x47, 0x09, 0xf3, 0xc9, 0x54,
		0x4b, 0xe9, 0x31, 0xa5, 0xc7, 0xdd, 0x34, 0x74, 0x9f, 0x45, 0x87, 0xf9, 0x89, 0x3b, 0xa9, 0xe3,
		0xce, 0x82, 0x13, 0xf4, 0x37, 0x2c, 0x94, 0x0c, 0x94, 0xd4, 0x4b, 0x78, 0x8f, 0x43, 0x2a, 0x01,
		0x6f, 0xb0, 0x73, 0xa8, 0x33, 0x89, 0x3a, 0x93, 0xf6, 0xc9, 0xbc, 0xab, 0x4b, 0x44, 0x6f, 0x12,
		0xe0, 0xdf, 0x29, 0x48, 0xb2, 0xee, 0xcc, 0xfb, 0xa0, 0x1d, 0xea, 0x83, 0xce, 0x7c, 0x2e, 0xcf,
		0xa1, 0x8f, 0x85, 0xd0, 0xc7, 0x42, 0x3a, 0x0d, 0x45, 0x52, 0xf8, 0x57, 0x42, 0xca, 0xff, 0x7e,
		0xf4, 0x5d, 0x3e, 0x10, 0x52, 0xb6, 0xb6, 0xea, 0x6f, 0x84, 0x94, 0x2c, 0xa8, 0xf0, 0x3b, 0x21,
		0x9d, 0xcc, 0x53, 0x17, 0x3d, 0x2d, 0x93, 0xe1, 0x3d, 0xff, 0x47, 0x7c, 0x0e, 0x82, 0xe3, 0x48,
		0x75, 0xb8, 0x02, 0x96, 0xbd, 0x94, 0xf3, 0x05, 0x93, 0xe4, 0x41, 0x56, 0x9d, 0xd5, 0x7f, 0x00,
		0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xba, 0xd7, 0xa2, 0x98, 0x48, 0x5b, 0x00,
		0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
}

