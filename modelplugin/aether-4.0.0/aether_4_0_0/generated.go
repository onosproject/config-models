// Code generated by YGOT. DO NOT EDIT.
/*
Package aether_4_0_0 is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/smbaker/gopath/pkg/mod/github.com/openconfig/ygot@v0.12.0/genutil/names.go
using the following YANG input files:
	- onf-enterprise.yang
	- onf-connectivity-service.yang
	- onf-aether-types.yang
	- onf-application.yang
	- onf-device-group.yang
	- onf-ip-domain.yang
	- onf-site.yang
	- onf-upf.yang
	- onf-template.yang
	- onf-vcs.yang
	- onf-traffic-class.yang
Imported modules were sourced from:
	- /home/smbaker/projects/aether/roc-helm-charts/config-models/aether-4.x/files/yang/...
*/
package aether_4_0_0

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Device{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	Application	*OnfApplication_Application	`path:"application" module:"onf-application"`
	ConnectivityService	*OnfConnectivityService_ConnectivityService	`path:"connectivity-service" module:"onf-connectivity-service"`
	DeviceGroup	*OnfDeviceGroup_DeviceGroup	`path:"device-group" module:"onf-device-group"`
	Enterprise	*OnfEnterprise_Enterprise	`path:"enterprise" module:"onf-enterprise"`
	IpDomain	*OnfIpDomain_IpDomain	`path:"ip-domain" module:"onf-ip-domain"`
	Site	*OnfSite_Site	`path:"site" module:"onf-site"`
	Template	*OnfTemplate_Template	`path:"template" module:"onf-template"`
	TrafficClass	*OnfTrafficClass_TrafficClass	`path:"traffic-class" module:"onf-traffic-class"`
	Upf	*OnfUpf_Upf	`path:"upf" module:"onf-upf"`
	Vcs	*OnfVcs_Vcs	`path:"vcs" module:"onf-vcs"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfApplication_Application represents the /onf-application/application YANG schema element.
type OnfApplication_Application struct {
	Application	map[string]*OnfApplication_Application_Application	`path:"application" module:"onf-application"`
}

// IsYANGGoStruct ensures that OnfApplication_Application implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfApplication_Application) IsYANGGoStruct() {}

// NewApplication creates a new entry in the Application list of the
// OnfApplication_Application struct. The keys of the list are populated from the input
// arguments.
func (t *OnfApplication_Application) NewApplication(Id string) (*OnfApplication_Application_Application, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[string]*OnfApplication_Application_Application)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Application[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Application", key)
	}

	t.Application[key] = &OnfApplication_Application_Application{
		Id: &Id,
	}

	return t.Application[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfApplication_Application) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfApplication_Application"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfApplication_Application) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfApplication_Application_Application represents the /onf-application/application/application YANG schema element.
type OnfApplication_Application_Application struct {
	Address	*string	`path:"address" module:"onf-application"`
	Description	*string	`path:"description" module:"onf-application"`
	DisplayName	*string	`path:"display-name" module:"onf-application"`
	Endpoint	map[string]*OnfApplication_Application_Application_Endpoint	`path:"endpoint" module:"onf-application"`
	Enterprise	*string	`path:"enterprise" module:"onf-application"`
	Id	*string	`path:"id" module:"onf-application"`
}

// IsYANGGoStruct ensures that OnfApplication_Application_Application implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfApplication_Application_Application) IsYANGGoStruct() {}

// NewEndpoint creates a new entry in the Endpoint list of the
// OnfApplication_Application_Application struct. The keys of the list are populated from the input
// arguments.
func (t *OnfApplication_Application_Application) NewEndpoint(Name string) (*OnfApplication_Application_Application_Endpoint, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Endpoint == nil {
		t.Endpoint = make(map[string]*OnfApplication_Application_Application_Endpoint)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Endpoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Endpoint", key)
	}

	t.Endpoint[key] = &OnfApplication_Application_Application_Endpoint{
		Name: &Name,
	}

	return t.Endpoint[key], nil
}

// ΛListKeyMap returns the keys of the OnfApplication_Application_Application struct, which is a YANG list entry.
func (t *OnfApplication_Application_Application) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfApplication_Application_Application) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfApplication_Application_Application"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfApplication_Application_Application) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfApplication_Application_Application_Endpoint represents the /onf-application/application/application/endpoint YANG schema element.
type OnfApplication_Application_Application_Endpoint struct {
	Mbr	*OnfApplication_Application_Application_Endpoint_Mbr	`path:"mbr" module:"onf-application"`
	Name	*string	`path:"name" module:"onf-application"`
	PortEnd	*uint16	`path:"port-end" module:"onf-application"`
	PortStart	*uint16	`path:"port-start" module:"onf-application"`
	Protocol	*string	`path:"protocol" module:"onf-application"`
}

// IsYANGGoStruct ensures that OnfApplication_Application_Application_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfApplication_Application_Application_Endpoint) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfApplication_Application_Application_Endpoint struct, which is a YANG list entry.
func (t *OnfApplication_Application_Application_Endpoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfApplication_Application_Application_Endpoint) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfApplication_Application_Application_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfApplication_Application_Application_Endpoint) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfApplication_Application_Application_Endpoint_Mbr represents the /onf-application/application/application/endpoint/mbr YANG schema element.
type OnfApplication_Application_Application_Endpoint_Mbr struct {
	Downlink	*uint64	`path:"downlink" module:"onf-application"`
	Uplink	*uint64	`path:"uplink" module:"onf-application"`
}

// IsYANGGoStruct ensures that OnfApplication_Application_Application_Endpoint_Mbr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfApplication_Application_Application_Endpoint_Mbr) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfApplication_Application_Application_Endpoint_Mbr) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfApplication_Application_Application_Endpoint_Mbr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfApplication_Application_Application_Endpoint_Mbr) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfConnectivityService_ConnectivityService represents the /onf-connectivity-service/connectivity-service YANG schema element.
type OnfConnectivityService_ConnectivityService struct {
	ConnectivityService	map[string]*OnfConnectivityService_ConnectivityService_ConnectivityService	`path:"connectivity-service" module:"onf-connectivity-service"`
}

// IsYANGGoStruct ensures that OnfConnectivityService_ConnectivityService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfConnectivityService_ConnectivityService) IsYANGGoStruct() {}

// NewConnectivityService creates a new entry in the ConnectivityService list of the
// OnfConnectivityService_ConnectivityService struct. The keys of the list are populated from the input
// arguments.
func (t *OnfConnectivityService_ConnectivityService) NewConnectivityService(Id string) (*OnfConnectivityService_ConnectivityService_ConnectivityService, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ConnectivityService == nil {
		t.ConnectivityService = make(map[string]*OnfConnectivityService_ConnectivityService_ConnectivityService)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ConnectivityService[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ConnectivityService", key)
	}

	t.ConnectivityService[key] = &OnfConnectivityService_ConnectivityService_ConnectivityService{
		Id: &Id,
	}

	return t.ConnectivityService[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfConnectivityService_ConnectivityService) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfConnectivityService_ConnectivityService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfConnectivityService_ConnectivityService) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfConnectivityService_ConnectivityService_ConnectivityService represents the /onf-connectivity-service/connectivity-service/connectivity-service YANG schema element.
type OnfConnectivityService_ConnectivityService_ConnectivityService struct {
	Core_5GEndpoint	*string	`path:"core-5g-endpoint" module:"onf-connectivity-service"`
	Description	*string	`path:"description" module:"onf-connectivity-service"`
	DisplayName	*string	`path:"display-name" module:"onf-connectivity-service"`
	HssEndpoint	*string	`path:"hss-endpoint" module:"onf-connectivity-service"`
	Id	*string	`path:"id" module:"onf-connectivity-service"`
	PcrfEndpoint	*string	`path:"pcrf-endpoint" module:"onf-connectivity-service"`
	SpgwcEndpoint	*string	`path:"spgwc-endpoint" module:"onf-connectivity-service"`
}

// IsYANGGoStruct ensures that OnfConnectivityService_ConnectivityService_ConnectivityService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfConnectivityService_ConnectivityService_ConnectivityService) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfConnectivityService_ConnectivityService_ConnectivityService struct, which is a YANG list entry.
func (t *OnfConnectivityService_ConnectivityService_ConnectivityService) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfConnectivityService_ConnectivityService_ConnectivityService) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfConnectivityService_ConnectivityService_ConnectivityService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfConnectivityService_ConnectivityService_ConnectivityService) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfDeviceGroup_DeviceGroup represents the /onf-device-group/device-group YANG schema element.
type OnfDeviceGroup_DeviceGroup struct {
	DeviceGroup	map[string]*OnfDeviceGroup_DeviceGroup_DeviceGroup	`path:"device-group" module:"onf-device-group"`
}

// IsYANGGoStruct ensures that OnfDeviceGroup_DeviceGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfDeviceGroup_DeviceGroup) IsYANGGoStruct() {}

// NewDeviceGroup creates a new entry in the DeviceGroup list of the
// OnfDeviceGroup_DeviceGroup struct. The keys of the list are populated from the input
// arguments.
func (t *OnfDeviceGroup_DeviceGroup) NewDeviceGroup(Id string) (*OnfDeviceGroup_DeviceGroup_DeviceGroup, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DeviceGroup == nil {
		t.DeviceGroup = make(map[string]*OnfDeviceGroup_DeviceGroup_DeviceGroup)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DeviceGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DeviceGroup", key)
	}

	t.DeviceGroup[key] = &OnfDeviceGroup_DeviceGroup_DeviceGroup{
		Id: &Id,
	}

	return t.DeviceGroup[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfDeviceGroup_DeviceGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfDeviceGroup_DeviceGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfDeviceGroup_DeviceGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfDeviceGroup_DeviceGroup_DeviceGroup represents the /onf-device-group/device-group/device-group YANG schema element.
type OnfDeviceGroup_DeviceGroup_DeviceGroup struct {
	Description	*string	`path:"description" module:"onf-device-group"`
	DisplayName	*string	`path:"display-name" module:"onf-device-group"`
	Id	*string	`path:"id" module:"onf-device-group"`
	Imsis	map[string]*OnfDeviceGroup_DeviceGroup_DeviceGroup_Imsis	`path:"imsis" module:"onf-device-group"`
	IpDomain	*string	`path:"ip-domain" module:"onf-device-group"`
	Site	*string	`path:"site" module:"onf-device-group"`
}

// IsYANGGoStruct ensures that OnfDeviceGroup_DeviceGroup_DeviceGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfDeviceGroup_DeviceGroup_DeviceGroup) IsYANGGoStruct() {}

// NewImsis creates a new entry in the Imsis list of the
// OnfDeviceGroup_DeviceGroup_DeviceGroup struct. The keys of the list are populated from the input
// arguments.
func (t *OnfDeviceGroup_DeviceGroup_DeviceGroup) NewImsis(Name string) (*OnfDeviceGroup_DeviceGroup_DeviceGroup_Imsis, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Imsis == nil {
		t.Imsis = make(map[string]*OnfDeviceGroup_DeviceGroup_DeviceGroup_Imsis)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Imsis[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Imsis", key)
	}

	t.Imsis[key] = &OnfDeviceGroup_DeviceGroup_DeviceGroup_Imsis{
		Name: &Name,
	}

	return t.Imsis[key], nil
}

// ΛListKeyMap returns the keys of the OnfDeviceGroup_DeviceGroup_DeviceGroup struct, which is a YANG list entry.
func (t *OnfDeviceGroup_DeviceGroup_DeviceGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfDeviceGroup_DeviceGroup_DeviceGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfDeviceGroup_DeviceGroup_DeviceGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfDeviceGroup_DeviceGroup_DeviceGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfDeviceGroup_DeviceGroup_DeviceGroup_Imsis represents the /onf-device-group/device-group/device-group/imsis YANG schema element.
type OnfDeviceGroup_DeviceGroup_DeviceGroup_Imsis struct {
	ImsiRangeFrom	*uint64	`path:"imsi-range-from" module:"onf-device-group"`
	ImsiRangeTo	*uint64	`path:"imsi-range-to" module:"onf-device-group"`
	Name	*string	`path:"name" module:"onf-device-group"`
}

// IsYANGGoStruct ensures that OnfDeviceGroup_DeviceGroup_DeviceGroup_Imsis implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfDeviceGroup_DeviceGroup_DeviceGroup_Imsis) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfDeviceGroup_DeviceGroup_DeviceGroup_Imsis struct, which is a YANG list entry.
func (t *OnfDeviceGroup_DeviceGroup_DeviceGroup_Imsis) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfDeviceGroup_DeviceGroup_DeviceGroup_Imsis) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfDeviceGroup_DeviceGroup_DeviceGroup_Imsis"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfDeviceGroup_DeviceGroup_DeviceGroup_Imsis) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfEnterprise_Enterprise represents the /onf-enterprise/enterprise YANG schema element.
type OnfEnterprise_Enterprise struct {
	Enterprise	map[string]*OnfEnterprise_Enterprise_Enterprise	`path:"enterprise" module:"onf-enterprise"`
}

// IsYANGGoStruct ensures that OnfEnterprise_Enterprise implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfEnterprise_Enterprise) IsYANGGoStruct() {}

// NewEnterprise creates a new entry in the Enterprise list of the
// OnfEnterprise_Enterprise struct. The keys of the list are populated from the input
// arguments.
func (t *OnfEnterprise_Enterprise) NewEnterprise(Id string) (*OnfEnterprise_Enterprise_Enterprise, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Enterprise == nil {
		t.Enterprise = make(map[string]*OnfEnterprise_Enterprise_Enterprise)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Enterprise[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Enterprise", key)
	}

	t.Enterprise[key] = &OnfEnterprise_Enterprise_Enterprise{
		Id: &Id,
	}

	return t.Enterprise[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfEnterprise_Enterprise) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfEnterprise_Enterprise"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfEnterprise_Enterprise) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfEnterprise_Enterprise_Enterprise represents the /onf-enterprise/enterprise/enterprise YANG schema element.
type OnfEnterprise_Enterprise_Enterprise struct {
	ConnectivityService	map[string]*OnfEnterprise_Enterprise_Enterprise_ConnectivityService	`path:"connectivity-service" module:"onf-enterprise"`
	Description	*string	`path:"description" module:"onf-enterprise"`
	DisplayName	*string	`path:"display-name" module:"onf-enterprise"`
	Id	*string	`path:"id" module:"onf-enterprise"`
}

// IsYANGGoStruct ensures that OnfEnterprise_Enterprise_Enterprise implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfEnterprise_Enterprise_Enterprise) IsYANGGoStruct() {}

// NewConnectivityService creates a new entry in the ConnectivityService list of the
// OnfEnterprise_Enterprise_Enterprise struct. The keys of the list are populated from the input
// arguments.
func (t *OnfEnterprise_Enterprise_Enterprise) NewConnectivityService(ConnectivityService string) (*OnfEnterprise_Enterprise_Enterprise_ConnectivityService, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ConnectivityService == nil {
		t.ConnectivityService = make(map[string]*OnfEnterprise_Enterprise_Enterprise_ConnectivityService)
	}

	key := ConnectivityService

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ConnectivityService[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ConnectivityService", key)
	}

	t.ConnectivityService[key] = &OnfEnterprise_Enterprise_Enterprise_ConnectivityService{
		ConnectivityService: &ConnectivityService,
	}

	return t.ConnectivityService[key], nil
}

// ΛListKeyMap returns the keys of the OnfEnterprise_Enterprise_Enterprise struct, which is a YANG list entry.
func (t *OnfEnterprise_Enterprise_Enterprise) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfEnterprise_Enterprise_Enterprise) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfEnterprise_Enterprise_Enterprise"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfEnterprise_Enterprise_Enterprise) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfEnterprise_Enterprise_Enterprise_ConnectivityService represents the /onf-enterprise/enterprise/enterprise/connectivity-service YANG schema element.
type OnfEnterprise_Enterprise_Enterprise_ConnectivityService struct {
	ConnectivityService	*string	`path:"connectivity-service" module:"onf-enterprise"`
	Enabled	*bool	`path:"enabled" module:"onf-enterprise"`
}

// IsYANGGoStruct ensures that OnfEnterprise_Enterprise_Enterprise_ConnectivityService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfEnterprise_Enterprise_Enterprise_ConnectivityService) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfEnterprise_Enterprise_Enterprise_ConnectivityService struct, which is a YANG list entry.
func (t *OnfEnterprise_Enterprise_Enterprise_ConnectivityService) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ConnectivityService == nil {
		return nil, fmt.Errorf("nil value for key ConnectivityService")
	}

	return map[string]interface{}{
		"connectivity-service": *t.ConnectivityService,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfEnterprise_Enterprise_Enterprise_ConnectivityService) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfEnterprise_Enterprise_Enterprise_ConnectivityService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfEnterprise_Enterprise_Enterprise_ConnectivityService) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfIpDomain_IpDomain represents the /onf-ip-domain/ip-domain YANG schema element.
type OnfIpDomain_IpDomain struct {
	IpDomain	map[string]*OnfIpDomain_IpDomain_IpDomain	`path:"ip-domain" module:"onf-ip-domain"`
}

// IsYANGGoStruct ensures that OnfIpDomain_IpDomain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfIpDomain_IpDomain) IsYANGGoStruct() {}

// NewIpDomain creates a new entry in the IpDomain list of the
// OnfIpDomain_IpDomain struct. The keys of the list are populated from the input
// arguments.
func (t *OnfIpDomain_IpDomain) NewIpDomain(Id string) (*OnfIpDomain_IpDomain_IpDomain, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpDomain == nil {
		t.IpDomain = make(map[string]*OnfIpDomain_IpDomain_IpDomain)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IpDomain[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IpDomain", key)
	}

	t.IpDomain[key] = &OnfIpDomain_IpDomain_IpDomain{
		Id: &Id,
	}

	return t.IpDomain[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfIpDomain_IpDomain) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfIpDomain_IpDomain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfIpDomain_IpDomain) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfIpDomain_IpDomain_IpDomain represents the /onf-ip-domain/ip-domain/ip-domain YANG schema element.
type OnfIpDomain_IpDomain_IpDomain struct {
	AdminStatus	*string	`path:"admin-status" module:"onf-ip-domain"`
	Description	*string	`path:"description" module:"onf-ip-domain"`
	DisplayName	*string	`path:"display-name" module:"onf-ip-domain"`
	Dnn	*string	`path:"dnn" module:"onf-ip-domain"`
	DnsPrimary	*string	`path:"dns-primary" module:"onf-ip-domain"`
	DnsSecondary	*string	`path:"dns-secondary" module:"onf-ip-domain"`
	Enterprise	*string	`path:"enterprise" module:"onf-ip-domain"`
	Id	*string	`path:"id" module:"onf-ip-domain"`
	Mtu	*uint16	`path:"mtu" module:"onf-ip-domain"`
	Subnet	*string	`path:"subnet" module:"onf-ip-domain"`
}

// IsYANGGoStruct ensures that OnfIpDomain_IpDomain_IpDomain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfIpDomain_IpDomain_IpDomain) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfIpDomain_IpDomain_IpDomain struct, which is a YANG list entry.
func (t *OnfIpDomain_IpDomain_IpDomain) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfIpDomain_IpDomain_IpDomain) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfIpDomain_IpDomain_IpDomain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfIpDomain_IpDomain_IpDomain) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfSite_Site represents the /onf-site/site YANG schema element.
type OnfSite_Site struct {
	Site	map[string]*OnfSite_Site_Site	`path:"site" module:"onf-site"`
}

// IsYANGGoStruct ensures that OnfSite_Site implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfSite_Site) IsYANGGoStruct() {}

// NewSite creates a new entry in the Site list of the
// OnfSite_Site struct. The keys of the list are populated from the input
// arguments.
func (t *OnfSite_Site) NewSite(Id string) (*OnfSite_Site_Site, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Site == nil {
		t.Site = make(map[string]*OnfSite_Site_Site)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Site[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Site", key)
	}

	t.Site[key] = &OnfSite_Site_Site{
		Id: &Id,
	}

	return t.Site[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSite_Site) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfSite_Site"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfSite_Site) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfSite_Site_Site represents the /onf-site/site/site YANG schema element.
type OnfSite_Site_Site struct {
	Description	*string	`path:"description" module:"onf-site"`
	DisplayName	*string	`path:"display-name" module:"onf-site"`
	Enterprise	*string	`path:"enterprise" module:"onf-site"`
	Id	*string	`path:"id" module:"onf-site"`
	ImsiDefinition	*OnfSite_Site_Site_ImsiDefinition	`path:"imsi-definition" module:"onf-site"`
	Monitoring	*OnfSite_Site_Site_Monitoring	`path:"monitoring" module:"onf-site"`
	SmallCell	map[string]*OnfSite_Site_Site_SmallCell	`path:"small-cell" module:"onf-site"`
}

// IsYANGGoStruct ensures that OnfSite_Site_Site implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfSite_Site_Site) IsYANGGoStruct() {}

// NewSmallCell creates a new entry in the SmallCell list of the
// OnfSite_Site_Site struct. The keys of the list are populated from the input
// arguments.
func (t *OnfSite_Site_Site) NewSmallCell(Name string) (*OnfSite_Site_Site_SmallCell, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SmallCell == nil {
		t.SmallCell = make(map[string]*OnfSite_Site_Site_SmallCell)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SmallCell[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SmallCell", key)
	}

	t.SmallCell[key] = &OnfSite_Site_Site_SmallCell{
		Name: &Name,
	}

	return t.SmallCell[key], nil
}

// ΛListKeyMap returns the keys of the OnfSite_Site_Site struct, which is a YANG list entry.
func (t *OnfSite_Site_Site) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSite_Site_Site) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfSite_Site_Site"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfSite_Site_Site) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfSite_Site_Site_ImsiDefinition represents the /onf-site/site/site/imsi-definition YANG schema element.
type OnfSite_Site_Site_ImsiDefinition struct {
	Enterprise	*uint32	`path:"enterprise" module:"onf-site"`
	Format	*string	`path:"format" module:"onf-site"`
	Mcc	*string	`path:"mcc" module:"onf-site"`
	Mnc	*string	`path:"mnc" module:"onf-site"`
}

// IsYANGGoStruct ensures that OnfSite_Site_Site_ImsiDefinition implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfSite_Site_Site_ImsiDefinition) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSite_Site_Site_ImsiDefinition) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfSite_Site_Site_ImsiDefinition"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfSite_Site_Site_ImsiDefinition) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfSite_Site_Site_Monitoring represents the /onf-site/site/site/monitoring YANG schema element.
type OnfSite_Site_Site_Monitoring struct {
	EdgeClusterPrometheusUrl	*string	`path:"edge-cluster-prometheus-url" module:"onf-site"`
	EdgeDevice	map[string]*OnfSite_Site_Site_Monitoring_EdgeDevice	`path:"edge-device" module:"onf-site"`
	EdgeMonitoringPrometheusUrl	*string	`path:"edge-monitoring-prometheus-url" module:"onf-site"`
}

// IsYANGGoStruct ensures that OnfSite_Site_Site_Monitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfSite_Site_Site_Monitoring) IsYANGGoStruct() {}

// NewEdgeDevice creates a new entry in the EdgeDevice list of the
// OnfSite_Site_Site_Monitoring struct. The keys of the list are populated from the input
// arguments.
func (t *OnfSite_Site_Site_Monitoring) NewEdgeDevice(Name string) (*OnfSite_Site_Site_Monitoring_EdgeDevice, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EdgeDevice == nil {
		t.EdgeDevice = make(map[string]*OnfSite_Site_Site_Monitoring_EdgeDevice)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EdgeDevice[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EdgeDevice", key)
	}

	t.EdgeDevice[key] = &OnfSite_Site_Site_Monitoring_EdgeDevice{
		Name: &Name,
	}

	return t.EdgeDevice[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSite_Site_Site_Monitoring) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfSite_Site_Site_Monitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfSite_Site_Site_Monitoring) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfSite_Site_Site_Monitoring_EdgeDevice represents the /onf-site/site/site/monitoring/edge-device YANG schema element.
type OnfSite_Site_Site_Monitoring_EdgeDevice struct {
	Description	*string	`path:"description" module:"onf-site"`
	DisplayName	*string	`path:"display-name" module:"onf-site"`
	Name	*string	`path:"name" module:"onf-site"`
}

// IsYANGGoStruct ensures that OnfSite_Site_Site_Monitoring_EdgeDevice implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfSite_Site_Site_Monitoring_EdgeDevice) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfSite_Site_Site_Monitoring_EdgeDevice struct, which is a YANG list entry.
func (t *OnfSite_Site_Site_Monitoring_EdgeDevice) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSite_Site_Site_Monitoring_EdgeDevice) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfSite_Site_Site_Monitoring_EdgeDevice"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfSite_Site_Site_Monitoring_EdgeDevice) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfSite_Site_Site_SmallCell represents the /onf-site/site/site/small-cell YANG schema element.
type OnfSite_Site_Site_SmallCell struct {
	Address	*string	`path:"address" module:"onf-site"`
	Enable	*bool	`path:"enable" module:"onf-site"`
	Name	*string	`path:"name" module:"onf-site"`
	Tac	*string	`path:"tac" module:"onf-site"`
}

// IsYANGGoStruct ensures that OnfSite_Site_Site_SmallCell implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfSite_Site_Site_SmallCell) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfSite_Site_Site_SmallCell struct, which is a YANG list entry.
func (t *OnfSite_Site_Site_SmallCell) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfSite_Site_Site_SmallCell) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfSite_Site_Site_SmallCell"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfSite_Site_Site_SmallCell) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfTemplate_Template represents the /onf-template/template YANG schema element.
type OnfTemplate_Template struct {
	Template	map[string]*OnfTemplate_Template_Template	`path:"template" module:"onf-template"`
}

// IsYANGGoStruct ensures that OnfTemplate_Template implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTemplate_Template) IsYANGGoStruct() {}

// NewTemplate creates a new entry in the Template list of the
// OnfTemplate_Template struct. The keys of the list are populated from the input
// arguments.
func (t *OnfTemplate_Template) NewTemplate(Id string) (*OnfTemplate_Template_Template, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Template == nil {
		t.Template = make(map[string]*OnfTemplate_Template_Template)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Template[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Template", key)
	}

	t.Template[key] = &OnfTemplate_Template_Template{
		Id: &Id,
	}

	return t.Template[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTemplate_Template) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTemplate_Template"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTemplate_Template) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfTemplate_Template_Template represents the /onf-template/template/template YANG schema element.
type OnfTemplate_Template_Template struct {
	Description	*string	`path:"description" module:"onf-template"`
	Device	*OnfTemplate_Template_Template_Device	`path:"device" module:"onf-template"`
	DisplayName	*string	`path:"display-name" module:"onf-template"`
	Id	*string	`path:"id" module:"onf-template"`
	Sd	*uint32	`path:"sd" module:"onf-template"`
	Slice	*OnfTemplate_Template_Template_Slice	`path:"slice" module:"onf-template"`
	Sst	*uint8	`path:"sst" module:"onf-template"`
	TrafficClass	*string	`path:"traffic-class" module:"onf-template"`
}

// IsYANGGoStruct ensures that OnfTemplate_Template_Template implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTemplate_Template_Template) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfTemplate_Template_Template struct, which is a YANG list entry.
func (t *OnfTemplate_Template_Template) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTemplate_Template_Template) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTemplate_Template_Template"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTemplate_Template_Template) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfTemplate_Template_Template_Device represents the /onf-template/template/template/device YANG schema element.
type OnfTemplate_Template_Template_Device struct {
	Mbr	*OnfTemplate_Template_Template_Device_Mbr	`path:"mbr" module:"onf-template"`
}

// IsYANGGoStruct ensures that OnfTemplate_Template_Template_Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTemplate_Template_Template_Device) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTemplate_Template_Template_Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTemplate_Template_Template_Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTemplate_Template_Template_Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfTemplate_Template_Template_Device_Mbr represents the /onf-template/template/template/device/mbr YANG schema element.
type OnfTemplate_Template_Template_Device_Mbr struct {
	Downlink	*uint64	`path:"downlink" module:"onf-template"`
	Uplink	*uint64	`path:"uplink" module:"onf-template"`
}

// IsYANGGoStruct ensures that OnfTemplate_Template_Template_Device_Mbr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTemplate_Template_Template_Device_Mbr) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTemplate_Template_Template_Device_Mbr) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTemplate_Template_Template_Device_Mbr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTemplate_Template_Template_Device_Mbr) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfTemplate_Template_Template_Slice represents the /onf-template/template/template/slice YANG schema element.
type OnfTemplate_Template_Template_Slice struct {
	Mbr	*OnfTemplate_Template_Template_Slice_Mbr	`path:"mbr" module:"onf-template"`
}

// IsYANGGoStruct ensures that OnfTemplate_Template_Template_Slice implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTemplate_Template_Template_Slice) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTemplate_Template_Template_Slice) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTemplate_Template_Template_Slice"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTemplate_Template_Template_Slice) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfTemplate_Template_Template_Slice_Mbr represents the /onf-template/template/template/slice/mbr YANG schema element.
type OnfTemplate_Template_Template_Slice_Mbr struct {
	Downlink	*uint64	`path:"downlink" module:"onf-template"`
	Uplink	*uint64	`path:"uplink" module:"onf-template"`
}

// IsYANGGoStruct ensures that OnfTemplate_Template_Template_Slice_Mbr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTemplate_Template_Template_Slice_Mbr) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTemplate_Template_Template_Slice_Mbr) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTemplate_Template_Template_Slice_Mbr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTemplate_Template_Template_Slice_Mbr) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfTrafficClass_TrafficClass represents the /onf-traffic-class/traffic-class YANG schema element.
type OnfTrafficClass_TrafficClass struct {
	TrafficClass	map[string]*OnfTrafficClass_TrafficClass_TrafficClass	`path:"traffic-class" module:"onf-traffic-class"`
}

// IsYANGGoStruct ensures that OnfTrafficClass_TrafficClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTrafficClass_TrafficClass) IsYANGGoStruct() {}

// NewTrafficClass creates a new entry in the TrafficClass list of the
// OnfTrafficClass_TrafficClass struct. The keys of the list are populated from the input
// arguments.
func (t *OnfTrafficClass_TrafficClass) NewTrafficClass(Id string) (*OnfTrafficClass_TrafficClass_TrafficClass, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrafficClass == nil {
		t.TrafficClass = make(map[string]*OnfTrafficClass_TrafficClass_TrafficClass)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TrafficClass[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TrafficClass", key)
	}

	t.TrafficClass[key] = &OnfTrafficClass_TrafficClass_TrafficClass{
		Id: &Id,
	}

	return t.TrafficClass[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTrafficClass_TrafficClass) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTrafficClass_TrafficClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTrafficClass_TrafficClass) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfTrafficClass_TrafficClass_TrafficClass represents the /onf-traffic-class/traffic-class/traffic-class YANG schema element.
type OnfTrafficClass_TrafficClass_TrafficClass struct {
	Arp	*uint8	`path:"arp" module:"onf-traffic-class"`
	Description	*string	`path:"description" module:"onf-traffic-class"`
	DisplayName	*string	`path:"display-name" module:"onf-traffic-class"`
	Id	*string	`path:"id" module:"onf-traffic-class"`
	Qci	*uint8	`path:"qci" module:"onf-traffic-class"`
}

// IsYANGGoStruct ensures that OnfTrafficClass_TrafficClass_TrafficClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfTrafficClass_TrafficClass_TrafficClass) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfTrafficClass_TrafficClass_TrafficClass struct, which is a YANG list entry.
func (t *OnfTrafficClass_TrafficClass_TrafficClass) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfTrafficClass_TrafficClass_TrafficClass) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfTrafficClass_TrafficClass_TrafficClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfTrafficClass_TrafficClass_TrafficClass) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfUpf_Upf represents the /onf-upf/upf YANG schema element.
type OnfUpf_Upf struct {
	Upf	map[string]*OnfUpf_Upf_Upf	`path:"upf" module:"onf-upf"`
}

// IsYANGGoStruct ensures that OnfUpf_Upf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfUpf_Upf) IsYANGGoStruct() {}

// NewUpf creates a new entry in the Upf list of the
// OnfUpf_Upf struct. The keys of the list are populated from the input
// arguments.
func (t *OnfUpf_Upf) NewUpf(Id string) (*OnfUpf_Upf_Upf, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Upf == nil {
		t.Upf = make(map[string]*OnfUpf_Upf_Upf)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Upf[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Upf", key)
	}

	t.Upf[key] = &OnfUpf_Upf_Upf{
		Id: &Id,
	}

	return t.Upf[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfUpf_Upf) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfUpf_Upf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfUpf_Upf) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfUpf_Upf_Upf represents the /onf-upf/upf/upf YANG schema element.
type OnfUpf_Upf_Upf struct {
	Address	*string	`path:"address" module:"onf-upf"`
	ConfigEndpoint	*string	`path:"config-endpoint" module:"onf-upf"`
	Description	*string	`path:"description" module:"onf-upf"`
	DisplayName	*string	`path:"display-name" module:"onf-upf"`
	Enterprise	*string	`path:"enterprise" module:"onf-upf"`
	Id	*string	`path:"id" module:"onf-upf"`
	Port	*uint16	`path:"port" module:"onf-upf"`
}

// IsYANGGoStruct ensures that OnfUpf_Upf_Upf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfUpf_Upf_Upf) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfUpf_Upf_Upf struct, which is a YANG list entry.
func (t *OnfUpf_Upf_Upf) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfUpf_Upf_Upf) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfUpf_Upf_Upf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfUpf_Upf_Upf) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfVcs_Vcs represents the /onf-vcs/vcs YANG schema element.
type OnfVcs_Vcs struct {
	Vcs	map[string]*OnfVcs_Vcs_Vcs	`path:"vcs" module:"onf-vcs"`
}

// IsYANGGoStruct ensures that OnfVcs_Vcs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfVcs_Vcs) IsYANGGoStruct() {}

// NewVcs creates a new entry in the Vcs list of the
// OnfVcs_Vcs struct. The keys of the list are populated from the input
// arguments.
func (t *OnfVcs_Vcs) NewVcs(Id string) (*OnfVcs_Vcs_Vcs, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vcs == nil {
		t.Vcs = make(map[string]*OnfVcs_Vcs_Vcs)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vcs[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vcs", key)
	}

	t.Vcs[key] = &OnfVcs_Vcs_Vcs{
		Id: &Id,
	}

	return t.Vcs[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfVcs_Vcs) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfVcs_Vcs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfVcs_Vcs) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfVcs_Vcs_Vcs represents the /onf-vcs/vcs/vcs YANG schema element.
type OnfVcs_Vcs_Vcs struct {
	Description	*string	`path:"description" module:"onf-vcs"`
	Device	*OnfVcs_Vcs_Vcs_Device	`path:"device" module:"onf-vcs"`
	DeviceGroup	map[string]*OnfVcs_Vcs_Vcs_DeviceGroup	`path:"device-group" module:"onf-vcs"`
	DisplayName	*string	`path:"display-name" module:"onf-vcs"`
	Enterprise	*string	`path:"enterprise" module:"onf-vcs"`
	Filter	map[string]*OnfVcs_Vcs_Vcs_Filter	`path:"filter" module:"onf-vcs"`
	Id	*string	`path:"id" module:"onf-vcs"`
	Sd	*uint32	`path:"sd" module:"onf-vcs"`
	Slice	*OnfVcs_Vcs_Vcs_Slice	`path:"slice" module:"onf-vcs"`
	Sst	*uint8	`path:"sst" module:"onf-vcs"`
	Template	*string	`path:"template" module:"onf-vcs"`
	TrafficClass	*string	`path:"traffic-class" module:"onf-vcs"`
	Upf	*string	`path:"upf" module:"onf-vcs"`
}

// IsYANGGoStruct ensures that OnfVcs_Vcs_Vcs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfVcs_Vcs_Vcs) IsYANGGoStruct() {}

// NewDeviceGroup creates a new entry in the DeviceGroup list of the
// OnfVcs_Vcs_Vcs struct. The keys of the list are populated from the input
// arguments.
func (t *OnfVcs_Vcs_Vcs) NewDeviceGroup(DeviceGroup string) (*OnfVcs_Vcs_Vcs_DeviceGroup, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DeviceGroup == nil {
		t.DeviceGroup = make(map[string]*OnfVcs_Vcs_Vcs_DeviceGroup)
	}

	key := DeviceGroup

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DeviceGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DeviceGroup", key)
	}

	t.DeviceGroup[key] = &OnfVcs_Vcs_Vcs_DeviceGroup{
		DeviceGroup: &DeviceGroup,
	}

	return t.DeviceGroup[key], nil
}

// NewFilter creates a new entry in the Filter list of the
// OnfVcs_Vcs_Vcs struct. The keys of the list are populated from the input
// arguments.
func (t *OnfVcs_Vcs_Vcs) NewFilter(Application string) (*OnfVcs_Vcs_Vcs_Filter, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Filter == nil {
		t.Filter = make(map[string]*OnfVcs_Vcs_Vcs_Filter)
	}

	key := Application

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Filter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Filter", key)
	}

	t.Filter[key] = &OnfVcs_Vcs_Vcs_Filter{
		Application: &Application,
	}

	return t.Filter[key], nil
}

// ΛListKeyMap returns the keys of the OnfVcs_Vcs_Vcs struct, which is a YANG list entry.
func (t *OnfVcs_Vcs_Vcs) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfVcs_Vcs_Vcs) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfVcs_Vcs_Vcs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfVcs_Vcs_Vcs) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfVcs_Vcs_Vcs_Device represents the /onf-vcs/vcs/vcs/device YANG schema element.
type OnfVcs_Vcs_Vcs_Device struct {
	Mbr	*OnfVcs_Vcs_Vcs_Device_Mbr	`path:"mbr" module:"onf-vcs"`
}

// IsYANGGoStruct ensures that OnfVcs_Vcs_Vcs_Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfVcs_Vcs_Vcs_Device) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfVcs_Vcs_Vcs_Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfVcs_Vcs_Vcs_Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfVcs_Vcs_Vcs_Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfVcs_Vcs_Vcs_DeviceGroup represents the /onf-vcs/vcs/vcs/device-group YANG schema element.
type OnfVcs_Vcs_Vcs_DeviceGroup struct {
	DeviceGroup	*string	`path:"device-group" module:"onf-vcs"`
	Enable	*bool	`path:"enable" module:"onf-vcs"`
}

// IsYANGGoStruct ensures that OnfVcs_Vcs_Vcs_DeviceGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfVcs_Vcs_Vcs_DeviceGroup) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfVcs_Vcs_Vcs_DeviceGroup struct, which is a YANG list entry.
func (t *OnfVcs_Vcs_Vcs_DeviceGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DeviceGroup == nil {
		return nil, fmt.Errorf("nil value for key DeviceGroup")
	}

	return map[string]interface{}{
		"device-group": *t.DeviceGroup,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfVcs_Vcs_Vcs_DeviceGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfVcs_Vcs_Vcs_DeviceGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfVcs_Vcs_Vcs_DeviceGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfVcs_Vcs_Vcs_Device_Mbr represents the /onf-vcs/vcs/vcs/device/mbr YANG schema element.
type OnfVcs_Vcs_Vcs_Device_Mbr struct {
	Downlink	*uint64	`path:"downlink" module:"onf-vcs"`
	Uplink	*uint64	`path:"uplink" module:"onf-vcs"`
}

// IsYANGGoStruct ensures that OnfVcs_Vcs_Vcs_Device_Mbr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfVcs_Vcs_Vcs_Device_Mbr) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfVcs_Vcs_Vcs_Device_Mbr) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfVcs_Vcs_Vcs_Device_Mbr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfVcs_Vcs_Vcs_Device_Mbr) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfVcs_Vcs_Vcs_Filter represents the /onf-vcs/vcs/vcs/filter YANG schema element.
type OnfVcs_Vcs_Vcs_Filter struct {
	Allow	*bool	`path:"allow" module:"onf-vcs"`
	Application	*string	`path:"application" module:"onf-vcs"`
	Priority	*uint8	`path:"priority" module:"onf-vcs"`
}

// IsYANGGoStruct ensures that OnfVcs_Vcs_Vcs_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfVcs_Vcs_Vcs_Filter) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OnfVcs_Vcs_Vcs_Filter struct, which is a YANG list entry.
func (t *OnfVcs_Vcs_Vcs_Filter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Application == nil {
		return nil, fmt.Errorf("nil value for key Application")
	}

	return map[string]interface{}{
		"application": *t.Application,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfVcs_Vcs_Vcs_Filter) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfVcs_Vcs_Vcs_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfVcs_Vcs_Vcs_Filter) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfVcs_Vcs_Vcs_Slice represents the /onf-vcs/vcs/vcs/slice YANG schema element.
type OnfVcs_Vcs_Vcs_Slice struct {
	Mbr	*OnfVcs_Vcs_Vcs_Slice_Mbr	`path:"mbr" module:"onf-vcs"`
}

// IsYANGGoStruct ensures that OnfVcs_Vcs_Vcs_Slice implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfVcs_Vcs_Vcs_Slice) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfVcs_Vcs_Vcs_Slice) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfVcs_Vcs_Vcs_Slice"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfVcs_Vcs_Vcs_Slice) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// OnfVcs_Vcs_Vcs_Slice_Mbr represents the /onf-vcs/vcs/vcs/slice/mbr YANG schema element.
type OnfVcs_Vcs_Vcs_Slice_Mbr struct {
	Downlink	*uint64	`path:"downlink" module:"onf-vcs"`
	Uplink	*uint64	`path:"uplink" module:"onf-vcs"`
}

// IsYANGGoStruct ensures that OnfVcs_Vcs_Vcs_Slice_Mbr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OnfVcs_Vcs_Vcs_Slice_Mbr) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OnfVcs_Vcs_Vcs_Slice_Mbr) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OnfVcs_Vcs_Vcs_Slice_Mbr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OnfVcs_Vcs_Vcs_Slice_Mbr) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }



var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7d, 0x6f, 0x53, 0xe3, 0x38,
		0xb3, 0xef, 0xfb, 0xf9, 0x14, 0xaa, 0x54, 0x6d, 0x9d, 0x84, 0xc5, 0x21, 0x01, 0x02, 0x43, 0xde,
		0x50, 0x1c, 0x60, 0x9e, 0x4b, 0x9d, 0x81, 0xe5, 0x59, 0x66, 0xb7, 0x6e, 0x5d, 0x92, 0xa5, 0x1c,
		0x5b, 0x09, 0xaa, 0x71, 0x6c, 0x5f, 0x4b, 0x86, 0xe1, 0x81, 0x7c, 0xf7, 0x53, 0xfe, 0x93, 0xff,
		0x76, 0xa2, 0x96, 0x9d, 0xc4, 0x09, 0xbd, 0x55, 0xcb, 0x38, 0x8e, 0x5b, 0xb1, 0xa4, 0xee, 0xfe,
		0xb5, 0x5a, 0xdd, 0xad, 0xf7, 0x2f, 0x84, 0x10, 0x52, 0xba, 0xd3, 0xfb, 0xb4, 0xd4, 0x24, 0x25,
		0x93, 0xbe, 0x30, 0x83, 0x96, 0xf6, 0xa3, 0xbb, 0xff, 0xc3, 0x6c, 0xb3, 0xd4, 0x24, 0xf5, 0xf8,
		0xe3, 0xa5, 0x63, 0x77, 0x59, 0xaf, 0xd4, 0x24, 0xb5, 0xf8, 0xc6, 0x15, 0xf3, 0x4a, 0x4d, 0x12,
		0x35, 0x11, 0xde, 0xd0, 0x5d, 0xd7, 0x62, 0x86, 0x2e, 0x98, 0x63, 0x4f, 0x7d, 0x31, 0xf5, 0x1b,
		0x93, 0x0f, 0xed, 0x4f, 0x3f, 0x72, 0x45, 0xb9, 0xe1, 0x31, 0x37, 0xa6, 0x2f, 0xfd, 0x78, 0xa6,
		0x44, 0x38, 0x2e, 0xb1, 0xe8, 0x0b, 0xb5, 0x88, 0xe1, 0xd8, 0x42, 0x67, 0x36, 0xf5, 0x66, 0xa9,
		0xa6, 0x5f, 0x73, 0x74, 0x7b, 0xf6, 0x75, 0x47, 0x5f, 0xdc, 0x7b, 0xb4, 0xcb, 0x7e, 0xcd, 0xbd,
		0xe0, 0xec, 0x4b, 0xce, 0xfc, 0x4c, 0xf8, 0xf5, 0x83, 0xe3, 0x7b, 0x06, 0x4d, 0x24, 0x8d, 0x5e,
		0x85, 0xbe, 0xbd, 0x3a, 0x5e, 0xf0, 0x36, 0x25, 0x37, 0xfa, 0x95, 0xfd, 0xe4, 0x07, 0xff, 0x8f,
		0xce, 0x2f, 0xbc, 0x9e, 0xdf, 0xa7, 0xb6, 0x28, 0x35, 0x89, 0xf0, 0x7c, 0x9a, 0xf2, 0xe0, 0xc4,
		0x53, 0xe1, 0x4b, 0xcd, 0x3d, 0x35, 0x98, 0xba, 0x33, 0x98, 0x1d, 0xd1, 0x99, 0x29, 0x92, 0x9a,
		0x2a, 0xc0, 0x94, 0xa5, 0x4d, 0xdd, 0x77, 0xc6, 0x05, 0x71, 0xba, 0x64, 0x82, 0x92, 0xa7, 0x91,
		0x26, 0xcf, 0xdf, 0xd2, 0x79, 0x94, 0x99, 0x4f, 0xc9, 0x79, 0x95, 0x9d, 0x5f, 0xf0, 0x3c, 0x83,
		0xe7, 0x5b, 0x7e, 0xde, 0x93, 0xe7, 0x3f, 0x85, 0x0f, 0x96, 0xf2, 0xc3, 0x98, 0x2f, 0x4c, 0xd3,
		0xa3, 0x9c, 0x2f, 0x1f, 0x82, 0xd1, 0x88, 0xc6, 0x04, 0x4b, 0xfa, 0x33, 0xc3, 0x1f, 0x17, 0x11,
		0x55, 0xc0, 0x22, 0xe2, 0x99, 0xf1, 0x49, 0x3e, 0xa9, 0x92, 0x6b, 0x26, 0x9e, 0xa9, 0x47, 0x74,
		0xf2, 0xec, 0x70, 0x61, 0xeb, 0x7d, 0xba, 0x4f, 0x74, 0x9b, 0xdc, 0xdc, 0xef, 0x13, 0x27, 0xb8,
		0xcb, 0xfd, 0x8e, 0x4d, 0x45, 0x75, 0xd9, 0x2f, 0xc6, 0x6c, 0x55, 0x5b, 0xf2, 0xd8, 0x32, 0xf6,
		0x82, 0xb0, 0x19, 0x90, 0xdd, 0xa0, 0x6c, 0xa7, 0xcc, 0x7e, 0xca, 0x6c, 0x08, 0x67, 0xc7, 0xc5,
		0x6c, 0xb9, 0x84, 0x3d, 0x47, 0x3f, 0x77, 0xab, 0xdb, 0xa6, 0x2e, 0x1c, 0xef, 0x2d, 0x5d, 0x2f,
		0x8c, 0x9e, 0xfd, 0xf1, 0xe6, 0x52, 0xd8, 0xac, 0x04, 0x6c, 0x25, 0x33, 0x2d, 0x43, 0xc5, 0x74,
		0x26, 0xf1, 0x6c, 0xfc, 0x16, 0x8f, 0x52, 0xc3, 0x29, 0x37, 0xcd, 0x53, 0xef, 0xcc, 0x5c, 0x4d,
		0x4e, 0xd2, 0x54, 0x7b, 0xa0, 0xd6, 0x13, 0x78, 0x8f, 0x12, 0x7a, 0xf6, 0x72, 0xac, 0xd0, 0xb7,
		0xb9, 0x3e, 0x7e, 0x55, 0xa0, 0xbd, 0xd7, 0x85, 0xa0, 0x9e, 0x0d, 0xee, 0xee, 0xa8, 0x81, 0x72,
		0xf9, 0xb1, 0xa6, 0x9d, 0xb5, 0x3f, 0x1e, 0xeb, 0xda, 0x59, 0x3b, 0xba, 0xac, 0x87, 0xff, 0x44,
		0xd7, 0x87, 0x8f, 0x35, 0xed, 0x78, 0x78, 0xdd, 0x78, 0xac, 0x69, 0x8d, 0x76, 0xa5, 0xd5, 0xaa,
		0x56, 0xde, 0x8f, 0x06, 0x70, 0xc2, 0xf2, 0x6f, 0x8f, 0xad, 0x96, 0xfb, 0x7e, 0x37, 0x08, 0xfe,
		0x7e, 0x1f, 0xb4, 0x7f, 0xaf, 0x9c, 0x97, 0xc0, 0x6f, 0xdd, 0x06, 0x51, 0x0c, 0xf6, 0xd7, 0xc8,
		0x05, 0x27, 0x5b, 0xcc, 0x05, 0xcd, 0x8f, 0x60, 0xae, 0x74, 0xad, 0x7b, 0xa1, 0x7d, 0x6b, 0xbf,
		0xd7, 0xf6, 0x8f, 0x07, 0x95, 0x66, 0xa5, 0x3c, 0x7b, 0xaf, 0x59, 0x79, 0xaf, 0xed, 0x37, 0x06,
		0xe5, 0x72, 0xc2, 0x37, 0xe7, 0x49, 0x6d, 0x54, 0x3e, 0xca, 0xe5, 0x72, 0x3c, 0xff, 0x53, 0x3c,
		0xf1, 0x58, 0xab, 0xb7, 0xcf, 0xc3, 0xcb, 0xe8, 0xef, 0x88, 0xab, 0xa4, 0x1e, 0xae, 0x24, 0xf2,
		0xd2, 0xbe, 0xb2, 0x08, 0xfc, 0xd3, 0x6c, 0xff, 0xde, 0xac, 0xbc, 0x9f, 0x0c, 0x86, 0xd7, 0xe1,
		0xdf, 0xca, 0x47, 0xb9, 0xba, 0xd7, 0x6a, 0x55, 0xab, 0x7b, 0x95, 0xa8, 0x23, 0xf1, 0x73, 0x7b,
		0xd1, 0xb7, 0xe7, 0xcd, 0xe6, 0xdc, 0xad, 0x4a, 0xf9, 0xb7, 0xea, 0x3a, 0xd8, 0xfa, 0x4b, 0xbe,
		0xed, 0x4a, 0x8a, 0x89, 0x82, 0xda, 0x37, 0x9d, 0xbe, 0xce, 0x6c, 0x2d, 0x30, 0x82, 0x54, 0xf4,
		0x3e, 0x40, 0x1a, 0x4a, 0xdf, 0xa9, 0xdd, 0x13, 0xcf, 0xeb, 0xd0, 0xfc, 0xb7, 0xcc, 0x96, 0xb6,
		0x75, 0x14, 0xcd, 0xba, 0x54, 0xf2, 0xbf, 0x75, 0xcb, 0xa7, 0xcb, 0xad, 0x8a, 0x54, 0xfa, 0x6f,
		0x9e, 0x6e, 0x04, 0x56, 0xea, 0x15, 0xeb, 0x31, 0x11, 0x98, 0xc9, 0x35, 0x70, 0x3b, 0x03, 0x05,
		0x15, 0x75, 0xab, 0xff, 0xda, 0xf8, 0x90, 0x1d, 0x36, 0x8e, 0x36, 0x38, 0x68, 0xab, 0x12, 0x70,
		0x80, 0x84, 0xa8, 0xe2, 0x44, 0x29, 0xd0, 0x7d, 0xba, 0xf6, 0x9f, 0x0b, 0xed, 0xff, 0xd5, 0xb4,
		0xb3, 0xa7, 0xf6, 0xc4, 0x87, 0x56, 0x4b, 0x7b, 0x6a, 0x07, 0xa8, 0x70, 0x52, 0x1f, 0x54, 0xce,
		0xc7, 0xf7, 0xdb, 0x81, 0x3e, 0xdf, 0x53, 0xa1, 0x3a, 0xaf, 0x7c, 0xb4, 0x5a, 0xd5, 0x52, 0xde,
		0x1a, 0xee, 0x4b, 0xb6, 0x76, 0xd2, 0xe9, 0x17, 0x48, 0x43, 0xc9, 0x9c, 0x5a, 0x34, 0x4a, 0x2e,
		0x48, 0x27, 0x89, 0x60, 0x8b, 0xd2, 0x09, 0xca, 0xa4, 0x85, 0x29, 0x2e, 0x38, 0x77, 0x77, 0xc1,
		0x09, 0x5f, 0x44, 0xca, 0xb3, 0x19, 0x14, 0x91, 0xa1, 0x48, 0x0c, 0x30, 0x2b, 0x54, 0x90, 0x57,
		0x11, 0x3e, 0x54, 0x91, 0x36, 0x0b, 0x58, 0x00, 0x90, 0x55, 0x09, 0x51, 0x33, 0x0f, 0x45, 0xed,
		0xf0, 0x78, 0x8d, 0xa3, 0x51, 0x64, 0xcd, 0xce, 0xb8, 0x6b, 0xe9, 0x6f, 0x91, 0x61, 0x2b, 0xaf,
		0xda, 0x27, 0xa9, 0x80, 0xba, 0x3d, 0x22, 0x25, 0x01, 0x29, 0x11, 0x0e, 0xf1, 0x39, 0x25, 0xcc,
		0x26, 0xff, 0xfa, 0xeb, 0x86, 0x38, 0x1e, 0xb9, 0xfc, 0x7e, 0x83, 0xda, 0x1d, 0xb5, 0xfb, 0x78,
		0xa4, 0xb9, 0xf0, 0x98, 0xdd, 0x43, 0xc5, 0x8e, 0x8a, 0x5d, 0x6a, 0x28, 0xbe, 0xd6, 0x50, 0xad,
		0x07, 0xdd, 0xa2, 0xb6, 0xe9, 0x3a, 0x2c, 0x94, 0x6b, 0x49, 0x95, 0x3e, 0xa2, 0x90, 0x53, 0xbf,
		0x75, 0x54, 0xbf, 0xdb, 0xa7, 0x7e, 0x97, 0x6d, 0x3a, 0x8e, 0x1e, 0xec, 0x77, 0x3c, 0xf9, 0x61,
		0x1b, 0xce, 0x4a, 0x40, 0x24, 0xd9, 0xef, 0x19, 0x9b, 0xe0, 0x56, 0xff, 0xc5, 0xfa, 0x7e, 0x9f,
		0x74, 0x98, 0xf0, 0x74, 0x21, 0xeb, 0x60, 0x93, 0x64, 0x45, 0x30, 0x4b, 0xaa, 0xb0, 0xa6, 0x22,
		0x8b, 0xaa, 0xb2, 0x6a, 0x66, 0x96, 0xcd, 0xcc, 0xba, 0xea, 0x2c, 0x0c, 0x54, 0x9f, 0xb2, 0x1c,
		0xc5, 0x3c, 0xd8, 0x44, 0x99, 0xce, 0xab, 0x6d, 0x31, 0xfb, 0x27, 0x7c, 0xcc, 0xc7, 0x2e, 0xe1,
		0xb8, 0x05, 0xe0, 0x88, 0xcd, 0x30, 0xff, 0x3d, 0xf5, 0xb4, 0xab, 0x30, 0xdc, 0x87, 0xb8, 0xd4,
		0x9b, 0xf4, 0x73, 0x90, 0x7e, 0xc7, 0x23, 0xc3, 0x5f, 0x21, 0xa6, 0x2e, 0x74, 0x12, 0x88, 0x47,
		0x60, 0x2e, 0xf7, 0x3b, 0x2e, 0x74, 0x77, 0x46, 0x15, 0x5a, 0xa1, 0x62, 0x93, 0x45, 0x7c, 0x32,
		0x8a, 0x51, 0x56, 0x71, 0xca, 0x4d, 0xac, 0x72, 0x13, 0xaf, 0xec, 0x62, 0xa6, 0xe8, 0xb7, 0x05,
		0xce, 0xb5, 0xb4, 0x61, 0x9f, 0x3a, 0xd3, 0x30, 0xdd, 0x9f, 0xc4, 0xd8, 0x2a, 0x3b, 0x8e, 0x7f,
		0xea, 0x76, 0x8f, 0x2a, 0xef, 0x37, 0xaa, 0x71, 0x17, 0xc9, 0xba, 0xf5, 0x92, 0x51, 0xa2, 0x53,
		0x8d, 0xe7, 0xac, 0xed, 0xe4, 0xb0, 0xbb, 0xa0, 0xc8, 0x7f, 0x99, 0xd7, 0x1d, 0xab, 0x1e, 0xda,
		0xfa, 0xd7, 0xe3, 0xe3, 0x93, 0xd3, 0xe3, 0xe3, 0xda, 0xe9, 0xd1, 0x69, 0xed, 0xac, 0xd1, 0xa8,
		0x9f, 0xd4, 0x1b, 0x05, 0x1a, 0xed, 0x2f, 0xeb, 0xa1, 0x5a, 0xd5, 0xe6, 0x30, 0x64, 0x55, 0xea,
		0xbb, 0xd9, 0x50, 0x3f, 0xa6, 0xcf, 0x13, 0xf3, 0xb5, 0x8b, 0x19, 0xcc, 0x8f, 0x7e, 0x03, 0x11,
		0x1f, 0x11, 0x1f, 0x11, 0x1f, 0x11, 0x1f, 0x11, 0x1f, 0x11, 0x1f, 0x11, 0x7f, 0x95, 0xce, 0x83,
		0x0b, 0xdb, 0x76, 0x84, 0x2e, 0x15, 0xdd, 0x30, 0x45, 0xc7, 0x8d, 0x67, 0xda, 0xd7, 0x5d, 0x3d,
		0xdc, 0x4a, 0x28, 0x1d, 0x38, 0x76, 0x57, 0x9b, 0x58, 0xbe, 0x1f, 0xa4, 0x5d, 0x0f, 0x5d, 0xad,
		0x07, 0xf2, 0x1e, 0xb3, 0xe8, 0xe7, 0x84, 0xe7, 0x1b, 0x22, 0xde, 0xa9, 0x2b, 0xfd, 0x61, 0x77,
		0x27, 0xec, 0x86, 0xa7, 0xb4, 0xeb, 0xeb, 0xf8, 0xc7, 0x9e, 0x6e, 0x3b, 0x5e, 0x29, 0x27, 0x8f,
		0xb5, 0xc4, 0xb8, 0x96, 0xa4, 0x36, 0x14, 0xe7, 0x30, 0x01, 0x10, 0x5f, 0x37, 0x6b, 0x53, 0x05,
		0x4d, 0x8c, 0xa2, 0x45, 0x24, 0xbd, 0xd9, 0x8a, 0xc2, 0x8f, 0xae, 0xc4, 0x5d, 0x76, 0x25, 0x82,
		0x2d, 0x1b, 0xf8, 0x66, 0xe5, 0x2c, 0xdf, 0xd5, 0xbf, 0xae, 0x51, 0x32, 0x5d, 0xc7, 0x13, 0x1a,
		0x0d, 0x7f, 0x17, 0x28, 0x9d, 0x23, 0x4a, 0x35, 0x09, 0xfd, 0xae, 0x73, 0x41, 0x82, 0x36, 0x82,
		0xf5, 0x8c, 0x17, 0xda, 0x61, 0x28, 0x9e, 0x28, 0x9e, 0x6b, 0x13, 0xcf, 0x90, 0x7d, 0x6d, 0xbf,
		0xdf, 0xa1, 0x9e, 0x82, 0x8c, 0x9e, 0x00, 0x48, 0xd4, 0x16, 0x19, 0x5b, 0x1a, 0xc1, 0x5d, 0xc3,
		0x08, 0x6e, 0xe8, 0x90, 0x9d, 0x34, 0x1a, 0x47, 0x8d, 0x1d, 0x8c, 0xe1, 0x5e, 0x37, 0x8a, 0x71,
		0xa1, 0x7b, 0x42, 0x11, 0xc7, 0x22, 0x5a, 0x35, 0x24, 0xfb, 0xc6, 0x3c, 0x84, 0x32, 0x84, 0xb2,
		0xac, 0x50, 0x06, 0xc8, 0xae, 0x45, 0xf8, 0x43, 0xf8, 0x43, 0xf8, 0x43, 0xf8, 0x1b, 0xc1, 0x9f,
		0xe7, 0x08, 0xc7, 0x70, 0x2c, 0x05, 0xf0, 0x1b, 0x52, 0xaa, 0x41, 0xdf, 0x7d, 0x4c, 0x8e, 0xae,
		0x16, 0x04, 0xc0, 0x4d, 0xae, 0xe5, 0x60, 0x5c, 0x4c, 0x54, 0x93, 0x71, 0xaf, 0x68, 0x57, 0xf7,
		0xad, 0x70, 0x9c, 0x7e, 0x5c, 0xde, 0x97, 0x30, 0x8d, 0x37, 0x45, 0xa5, 0x1f, 0x21, 0x0a, 0x6e,
		0xd3, 0x90, 0x6d, 0x73, 0x12, 0xef, 0x8f, 0xcb, 0xfb, 0x8f, 0xbf, 0xae, 0xee, 0xd7, 0x9f, 0x59,
		0x9b, 0x2d, 0xf8, 0xfa, 0x7f, 0xe8, 0x9b, 0xe4, 0x0e, 0x47, 0x58, 0xb4, 0xeb, 0x42, 0x08, 0xc9,
		0x60, 0xed, 0x5b, 0x66, 0x5f, 0x5b, 0x34, 0xd0, 0xe6, 0x5c, 0x8e, 0x2b, 0x03, 0xee, 0x9f, 0xa0,
		0x50, 0xdb, 0xa9, 0x2c, 0xfd, 0xe1, 0x99, 0xd4, 0xa3, 0xe6, 0x7f, 0x07, 0xbd, 0xb2, 0x7d, 0xcb,
		0xca, 0x34, 0x38, 0xc0, 0x1d, 0xb8, 0xac, 0x3b, 0x6f, 0x32, 0xd9, 0x03, 0x99, 0x76, 0xdb, 0x4a,
		0x2b, 0xc9, 0xe9, 0x10, 0xd4, 0x73, 0x3d, 0xc6, 0x29, 0x24, 0xab, 0x63, 0x44, 0x03, 0x4b, 0xd3,
		0xfb, 0xce, 0xec, 0x9f, 0x44, 0x38, 0x64, 0xdc, 0x00, 0x11, 0xcf, 0xba, 0x20, 0xce, 0xab, 0xcd,
		0x23, 0xbb, 0xef, 0x62, 0xb2, 0x52, 0xd8, 0xad, 0xfe, 0x46, 0x3a, 0x94, 0x70, 0x2a, 0x02, 0xa2,
		0x3b, 0xc7, 0xa6, 0x84, 0x05, 0xf6, 0x21, 0x9d, 0x8a, 0x67, 0x66, 0x9c, 0xf4, 0x2c, 0xa7, 0xa3,
		0x5b, 0xc1, 0x43, 0xba, 0x65, 0x91, 0xeb, 0x51, 0xeb, 0x1c, 0xcb, 0x88, 0x61, 0x19, 0x31, 0xa2,
		0x96, 0x23, 0x68, 0x51, 0xbd, 0xeb, 0xd1, 0x2e, 0x24, 0x49, 0xf0, 0x54, 0xe2, 0xd9, 0xfb, 0xa1,
		0x76, 0xa1, 0xb6, 0x68, 0x8e, 0xe5, 0x20, 0xe9, 0x23, 0x33, 0x57, 0x21, 0xf0, 0xcc, 0x94, 0x17,
		0x74, 0x66, 0x02, 0x05, 0xfc, 0xe6, 0x8a, 0x74, 0x1d, 0x6f, 0xbe, 0xe8, 0x1f, 0x8a, 0x21, 0xa6,
		0xdf, 0x26, 0x16, 0x1c, 0xd5, 0x98, 0x89, 0x69, 0xb8, 0x8b, 0xec, 0x79, 0x4c, 0xc3, 0x1d, 0x2f,
		0x6d, 0x0e, 0xb7, 0x30, 0x0d, 0x57, 0x0e, 0x12, 0x40, 0x6b, 0x96, 0x52, 0x5c, 0x12, 0xe8, 0xa9,
		0x3d, 0x5d, 0x33, 0xa8, 0xda, 0xde, 0x93, 0xd5, 0x2d, 0xd5, 0x8f, 0x6a, 0xf5, 0xe3, 0xf1, 0x9f,
		0x5f, 0xff, 0xb7, 0x5d, 0xdd, 0xfb, 0xa8, 0x3e, 0xfe, 0xd3, 0xbf, 0x0d, 0x2f, 0xaa, 0x8f, 0xff,
		0x58, 0xdf, 0xdb, 0xd5, 0xbd, 0xd2, 0xea, 0xd2, 0x8b, 0x41, 0xf5, 0x6c, 0xe3, 0xd5, 0x4d, 0xaa,
		0x8e, 0x90, 0x5b, 0xd3, 0xc8, 0xaf, 0x65, 0x32, 0xad, 0x61, 0xe4, 0xd6, 0x2e, 0x69, 0x5d, 0x95,
		0x5c, 0xab, 0x28, 0xae, 0x51, 0x16, 0x55, 0x45, 0x56, 0x59, 0x92, 0x24, 0x33, 0xc8, 0x00, 0x58,
		0xbe, 0x7a, 0x49, 0x9f, 0x01, 0x7d, 0x4d, 0xaa, 0xe6, 0x2d, 0xdb, 0xaf, 0xe9, 0xbe, 0x8c, 0xdf,
		0x78, 0xe2, 0x6d, 0x4b, 0x86, 0x63, 0xdb, 0xd4, 0x10, 0xec, 0x85, 0x89, 0x37, 0x8d, 0x53, 0x2f,
		0xac, 0xa3, 0x9e, 0x5a, 0x03, 0x3d, 0xf1, 0xe9, 0xc2, 0x16, 0x43, 0x37, 0x78, 0xf1, 0x6a, 0xa1,
		0x1b, 0x3c, 0xb7, 0x52, 0xe8, 0x52, 0x53, 0xa7, 0x32, 0x85, 0xe9, 0x8b, 0xdc, 0xa8, 0x38, 0xfa,
		0x64, 0x13, 0x24, 0x6e, 0xa2, 0x10, 0x55, 0xd2, 0x0d, 0xbe, 0x7d, 0x45, 0xd2, 0x93, 0x18, 0x42,
		0x0d, 0x53, 0x96, 0xd6, 0x48, 0x37, 0x1c, 0x8f, 0x6a, 0x8d, 0x9e, 0x06, 0xaf, 0x76, 0x31, 0x47,
		0x09, 0x5b, 0x3c, 0xf9, 0x5e, 0xbc, 0xff, 0x45, 0x49, 0xa3, 0x47, 0x82, 0xc6, 0xb6, 0x61, 0xd9,
		0x64, 0xf0, 0xdd, 0x5b, 0x35, 0x2d, 0xe2, 0xb6, 0x4d, 0x2d, 0x9a, 0x7c, 0x8f, 0x81, 0x56, 0x4a,
		0xbb, 0x59, 0xb0, 0x31, 0x49, 0xa9, 0xa2, 0x94, 0xa0, 0x94, 0x60, 0xdd, 0x46, 0xf4, 0x2b, 0x60,
		0xdd, 0xc6, 0xcc, 0x0a, 0x1e, 0xeb, 0x36, 0xa2, 0x6e, 0x2f, 0xac, 0x6e, 0xc7, 0xaa, 0x8d, 0xa8,
		0xd6, 0x01, 0x43, 0x81, 0x55, 0x1b, 0xa3, 0x6e, 0x3d, 0x73, 0xae, 0xb0, 0x96, 0x9d, 0xa2, 0x52,
		0x5e, 0xc7, 0x3e, 0x73, 0x8e, 0x56, 0x3a, 0x6a, 0xf2, 0x02, 0xae, 0x65, 0xd7, 0xb6, 0x0d, 0x9e,
		0xb4, 0x62, 0xad, 0xa2, 0x30, 0xa0, 0x30, 0x2c, 0x72, 0x35, 0xe3, 0xb6, 0x38, 0xda, 0x39, 0xb2,
		0x43, 0x81, 0xdb, 0xe2, 0x31, 0xc1, 0x36, 0x6f, 0x8b, 0x2f, 0x40, 0x2a, 0xd7, 0xf0, 0xba, 0x0a,
		0x06, 0xdc, 0x34, 0x99, 0xb2, 0x05, 0x17, 0x34, 0x83, 0x26, 0x1c, 0xa2, 0x56, 0x01, 0x4d, 0x38,
		0xee, 0xf6, 0x5e, 0x0d, 0x05, 0xc9, 0x98, 0xa1, 0x53, 0x16, 0x8d, 0xb0, 0x1d, 0x94, 0x0d, 0x94,
		0x8d, 0x4d, 0xc9, 0x06, 0xc6, 0x52, 0xe5, 0x1e, 0x4b, 0x95, 0x64, 0x8c, 0x1f, 0x48, 0xdf, 0x04,
		0x85, 0x59, 0x5d, 0x4e, 0x34, 0xf0, 0x10, 0xd1, 0x3f, 0x49, 0xde, 0xdb, 0x58, 0xf8, 0x55, 0x96,
		0x91, 0x50, 0x1e, 0x01, 0x99, 0x00, 0x2d, 0x33, 0xac, 0x7b, 0xab, 0xf5, 0x3c, 0xc7, 0x77, 0xd3,
		0x03, 0xb3, 0xa6, 0x9e, 0x2a, 0x6c, 0x40, 0x96, 0xd9, 0x2b, 0x5e, 0x40, 0x96, 0xd9, 0xcb, 0x2d,
		0x20, 0x6b, 0xe1, 0x54, 0x41, 0xa6, 0x2c, 0x6d, 0xea, 0x86, 0x01, 0x58, 0x11, 0x29, 0x09, 0x49,
		0x0b, 0x11, 0x78, 0x65, 0xf6, 0xb6, 0x2f, 0xf0, 0x2a, 0x69, 0xe2, 0xd5, 0x00, 0x68, 0x69, 0xe0,
		0x55, 0x01, 0xc2, 0x4b, 0x26, 0x59, 0x66, 0x1b, 0x2c, 0x3a, 0xb3, 0xb7, 0x7b, 0x16, 0xdd, 0x22,
		0x8e, 0xdb, 0x94, 0x45, 0x87, 0x61, 0x25, 0xe8, 0x97, 0x03, 0x0f, 0x05, 0x86, 0x95, 0x0c, 0x15,
		0x3b, 0x86, 0x95, 0xa0, 0x6e, 0x2f, 0xac, 0x6e, 0xc7, 0xb0, 0x12, 0x54, 0xeb, 0x80, 0xa1, 0xc0,
		0xb0, 0x92, 0xa8, 0x5b, 0x6b, 0xdb, 0x40, 0x9f, 0xb4, 0xc9, 0xab, 0xa8, 0xb8, 0x51, 0x71, 0x27,
		0xb9, 0x06, 0x70, 0xc3, 0x1c, 0x35, 0xb8, 0xec, 0x50, 0xe0, 0x86, 0x79, 0x4c, 0xb0, 0xa3, 0x1b,
		0xe6, 0xac, 0xcf, 0x19, 0x07, 0x80, 0x53, 0xf8, 0x38, 0xb4, 0x90, 0x51, 0xe4, 0x62, 0x0c, 0x68,
		0xa3, 0x4a, 0xcd, 0x3c, 0xaa, 0x64, 0x64, 0x38, 0xfd, 0x61, 0x5d, 0x23, 0xc6, 0x63, 0xcc, 0x22,
		0x37, 0xe2, 0xbf, 0x38, 0xd1, 0x0d, 0x83, 0xba, 0x42, 0xef, 0x58, 0x34, 0x80, 0xb6, 0x96, 0xad,
		0x47, 0x74, 0xc1, 0xf2, 0xc4, 0xa4, 0x3d, 0x6a, 0xd3, 0xf0, 0x4c, 0x36, 0xe1, 0x90, 0x0e, 0x65,
		0x76, 0x8f, 0xe8, 0x84, 0x33, 0xbb, 0x67, 0x51, 0xb1, 0xdc, 0xaf, 0x55, 0x84, 0xc3, 0xb3, 0x11,
		0xf3, 0x54, 0x30, 0x4f, 0xfa, 0xe8, 0xec, 0x80, 0xcf, 0xb4, 0x90, 0x5f, 0xb4, 0xae, 0xe7, 0xf4,
		0xe1, 0xf5, 0x59, 0x67, 0x1b, 0xd8, 0x81, 0xb2, 0xaa, 0x66, 0xef, 0xf3, 0x55, 0x55, 0x95, 0x61,
		0x49, 0x20, 0xf4, 0xac, 0xbc, 0xa8, 0xaa, 0xcf, 0x6c, 0x71, 0x72, 0xac, 0x50, 0x52, 0xf5, 0x2b,
		0x16, 0x07, 0x4f, 0x36, 0x60, 0xb0, 0x38, 0x38, 0xdc, 0xfc, 0xcd, 0xed, 0xe0, 0x3c, 0xac, 0x15,
		0x3e, 0x07, 0x49, 0xc2, 0xc9, 0x04, 0x48, 0xc2, 0x41, 0x38, 0x42, 0x38, 0x42, 0x38, 0x42, 0x38,
		0x42, 0x38, 0x42, 0x38, 0x52, 0x84, 0xa3, 0xd5, 0x9f, 0x0c, 0x8a, 0xe0, 0x83, 0xe0, 0x93, 0x15,
		0x7c, 0x0a, 0x70, 0x96, 0x27, 0x96, 0x9b, 0x9f, 0x68, 0xa4, 0x68, 0xe5, 0xe6, 0x27, 0xb7, 0x34,
		0x0e, 0xd2, 0x3f, 0xc8, 0xb8, 0x2c, 0x49, 0x62, 0xc8, 0xed, 0x55, 0xd8, 0xcc, 0xbf, 0x82, 0x56,
		0x9e, 0xd2, 0xae, 0x6f, 0xc2, 0xd6, 0x57, 0xe1, 0x98, 0x75, 0x35, 0xd3, 0xe9, 0xeb, 0x0c, 0x10,
		0xde, 0x37, 0x26, 0x51, 0xab, 0x34, 0x3f, 0xa2, 0x27, 0x9c, 0x0a, 0xc1, 0xec, 0x5e, 0xec, 0xa7,
		0x35, 0xa9, 0xa0, 0x5e, 0x9f, 0xd9, 0x34, 0x4a, 0x72, 0x72, 0xa2, 0xa3, 0x87, 0x6e, 0xee, 0x89,
		0x6e, 0x9a, 0x1e, 0xe5, 0x9c, 0xf2, 0xfd, 0x96, 0xad, 0x73, 0xf2, 0x4a, 0x2d, 0x8b, 0xe8, 0x3c,
		0x7c, 0x2a, 0x6e, 0xc8, 0xa3, 0xdc, 0xb1, 0x5e, 0xa8, 0x37, 0xd1, 0x62, 0x18, 0x61, 0x82, 0x5b,
		0x93, 0xb8, 0x35, 0xb9, 0xae, 0xe2, 0xf1, 0xcc, 0x35, 0x9b, 0x23, 0xd6, 0x4e, 0xfa, 0xb4, 0x92,
		0xd2, 0xf1, 0x9c, 0x09, 0x40, 0xfc, 0x56, 0xf8, 0xb4, 0x9a, 0xd4, 0xca, 0x90, 0xa2, 0x38, 0x6d,
		0xab, 0x38, 0x6d, 0xf7, 0xb9, 0x0d, 0x5c, 0x34, 0x03, 0xf6, 0x9c, 0xfc, 0x37, 0x83, 0xb4, 0x61,
		0x0a, 0x57, 0xee, 0x29, 0x5c, 0x72, 0x36, 0x14, 0x28, 0x55, 0x4b, 0xc2, 0x6a, 0xda, 0x58, 0x4a,
		0x16, 0xa4, 0x87, 0xd2, 0x3d, 0x93, 0x49, 0xb9, 0x5a, 0x70, 0x72, 0xd0, 0xf2, 0x93, 0x82, 0x0a,
		0x94, 0x6e, 0x45, 0x13, 0x73, 0x80, 0x37, 0x9c, 0x6f, 0x45, 0x93, 0x4e, 0x7b, 0x52, 0x4c, 0xb8,
		0x92, 0x38, 0xe2, 0x49, 0xfe, 0x68, 0xa7, 0xb4, 0x48, 0x88, 0x31, 0x61, 0x21, 0x52, 0xad, 0xe8,
		0xc2, 0xc4, 0xee, 0x82, 0xe6, 0x5a, 0xd1, 0x45, 0x47, 0x7c, 0xe5, 0x5e, 0xe5, 0x1a, 0x50, 0x16,
		0x7d, 0x6e, 0x78, 0x81, 0xc9, 0xaf, 0xa4, 0x28, 0x61, 0x2a, 0x54, 0xee, 0x94, 0xb6, 0xed, 0xb2,
		0xd8, 0xe8, 0xb2, 0x93, 0xe1, 0xc8, 0xfa, 0x02, 0x55, 0x94, 0xd8, 0x2a, 0x0f, 0xf6, 0x5a, 0xb6,
		0xa4, 0x48, 0xac, 0xc6, 0x4f, 0x5e, 0x9f, 0xa9, 0x47, 0x83, 0xef, 0xba, 0xac, 0xe7, 0x7b, 0xd1,
		0x79, 0x72, 0xfc, 0xd9, 0xf1, 0x2d, 0x93, 0x74, 0x28, 0x71, 0x7d, 0xfe, 0x4c, 0xcd, 0x71, 0x24,
		0xf2, 0x58, 0xc7, 0xfd, 0xd7, 0x30, 0x2c, 0x99, 0xef, 0x82, 0xf7, 0x98, 0x4a, 0x9f, 0xb3, 0xbc,
		0x43, 0xee, 0x63, 0x29, 0xa9, 0x29, 0x9a, 0xff, 0x58, 0x7e, 0x71, 0xa3, 0xb2, 0xc8, 0x99, 0x5f,
		0xec, 0x18, 0xbc, 0x99, 0x9c, 0xf2, 0x9f, 0x7e, 0x7f, 0xd9, 0x62, 0x28, 0xdf, 0x6d, 0x1f, 0x6a,
		0xeb, 0x1d, 0x8b, 0x9a, 0x70, 0x15, 0x33, 0x24, 0x54, 0xd3, 0x2a, 0x17, 0x96, 0xe5, 0xbc, 0x12,
		0xc7, 0x23, 0x26, 0xe3, 0x7a, 0x78, 0x1d, 0xea, 0x8a, 0xd0, 0x15, 0xa8, 0x5a, 0xa7, 0x7e, 0xe2,
		0xb7, 0x46, 0xa7, 0x43, 0x07, 0x3c, 0x8e, 0x1a, 0x06, 0x35, 0xcc, 0xfa, 0x34, 0x4c, 0xc7, 0x71,
		0x2c, 0xaa, 0xdb, 0x2a, 0x1a, 0xa6, 0x5e, 0xa4, 0x2d, 0x2a, 0x15, 0x0b, 0x15, 0xb7, 0xac, 0x14,
		0xb6, 0xac, 0xa6, 0x0f, 0x2d, 0x4d, 0xb8, 0x54, 0x34, 0xe6, 0xe6, 0x7d, 0x15, 0xe3, 0x73, 0x7d,
		0x9f, 0x92, 0x2f, 0xa5, 0x2b, 0xe5, 0x64, 0x73, 0x83, 0x17, 0xa0, 0x4e, 0x85, 0xfc, 0x09, 0xcc,
		0x45, 0x70, 0x93, 0xe3, 0xaa, 0x6b, 0x5d, 0xfb, 0x4e, 0x58, 0xa7, 0x62, 0x09, 0x19, 0xa6, 0xc3,
		0xcd, 0x0f, 0x05, 0xd6, 0xa9, 0x18, 0x2a, 0x76, 0xac, 0x53, 0x81, 0xda, 0xbd, 0xc0, 0xda, 0x1d,
		0x2b, 0x55, 0xa0, 0x62, 0x07, 0x0c, 0x05, 0x56, 0xaa, 0x88, 0xba, 0xb5, 0xb6, 0x4a, 0x15, 0x63,
		0xab, 0xbc, 0x8a, 0x8a, 0x1b, 0x15, 0x77, 0xd2, 0xae, 0x2a, 0xd6, 0xa9, 0x40, 0xfd, 0x2d, 0x3b,
		0x14, 0x58, 0xa7, 0x22, 0x26, 0xd8, 0xe6, 0x3a, 0x15, 0x18, 0xe0, 0x95, 0x7b, 0x80, 0xd7, 0x32,
		0x8f, 0x23, 0x28, 0xb4, 0x6b, 0x99, 0x53, 0x71, 0x63, 0x71, 0x5d, 0xb2, 0x5d, 0x93, 0xec, 0x92,
		0x4c, 0x44, 0x57, 0x7a, 0x7c, 0xfe, 0xd2, 0x78, 0xfc, 0x02, 0xc5, 0x73, 0x31, 0xd7, 0x2c, 0x5e,
		0x3c, 0x57, 0xf0, 0x52, 0x79, 0xc5, 0x73, 0x2d, 0x4f, 0xa3, 0x90, 0x4e, 0x9f, 0x48, 0xad, 0x6b,
		0xe3, 0xc6, 0xd9, 0x0e, 0x85, 0x08, 0xe6, 0x4a, 0x9e, 0x51, 0xa8, 0x81, 0xba, 0xe6, 0x60, 0xae,
		0xc4, 0x19, 0x57, 0x83, 0x85, 0xa5, 0xc1, 0x5c, 0xba, 0xd9, 0x67, 0xb6, 0xc6, 0x85, 0x2e, 0x7c,
		0x40, 0xe1, 0xa3, 0x29, 0x2a, 0xd8, 0xaa, 0x27, 0x24, 0x65, 0x5c, 0x78, 0xba, 0x60, 0x2f, 0x94,
		0xc8, 0xb5, 0x51, 0x84, 0x35, 0xcf, 0x62, 0x56, 0xda, 0xd2, 0x35, 0xcf, 0x42, 0x56, 0xdb, 0xd4,
		0x9a, 0x07, 0xc0, 0x5d, 0xe0, 0x25, 0xcf, 0x44, 0x84, 0xc4, 0xf5, 0xdd, 0xc5, 0x7f, 0x7f, 0xbf,
		0x2e, 0x7d, 0xba, 0x75, 0x52, 0x0d, 0xd7, 0x49, 0xa3, 0x25, 0xe3, 0x09, 0xae, 0x93, 0x42, 0x82,
		0x48, 0x16, 0x3e, 0x6e, 0x2f, 0x6e, 0xee, 0x7e, 0x5c, 0xdf, 0x5d, 0xdc, 0x5d, 0x5e, 0x7f, 0x5c,
		0xdd, 0x3c, 0x84, 0xf2, 0xb1, 0x99, 0xfd, 0x94, 0xcd, 0x6f, 0x94, 0x8f, 0x0c, 0x19, 0x04, 0x27,
		0x04, 0x27, 0xdc, 0x27, 0x47, 0x77, 0x1c, 0xee, 0x93, 0xe7, 0xa0, 0xd7, 0x71, 0x9f, 0x1c, 0xb5,
		0x7b, 0x81, 0xb5, 0x3b, 0xee, 0x93, 0xa3, 0x62, 0x07, 0x0c, 0x05, 0xee, 0x93, 0xc7, 0x6a, 0xdd,
		0x86, 0x98, 0xe9, 0x36, 0xd4, 0x3c, 0xbf, 0xba, 0xbb, 0x3b, 0xb8, 0xb8, 0xbf, 0x43, 0x55, 0x8d,
		0xaa, 0x1a, 0xc2, 0x46, 0xa8, 0xa7, 0x51, 0x4f, 0x6f, 0xf1, 0x7e, 0xf8, 0x4a, 0xf4, 0x34, 0xd7,
		0x5c, 0x8f, 0xf5, 0xf5, 0xb0, 0x82, 0x8a, 0xb4, 0xbe, 0x1e, 0x13, 0xc1, 0xf4, 0x76, 0x4c, 0x45,
		0x4c, 0x9b, 0x87, 0x99, 0x6c, 0xd4, 0x23, 0x32, 0x26, 0x3c, 0xea, 0xf1, 0xcf, 0xa4, 0xc7, 0x99,
		0xab, 0xc5, 0x95, 0xd3, 0x20, 0xea, 0xfc, 0x4c, 0xe2, 0xd9, 0xf8, 0x5d, 0x72, 0x57, 0xe6, 0xe3,
		0x37, 0x7f, 0x39, 0x06, 0xbc, 0xbb, 0x0a, 0x24, 0x29, 0x7b, 0x74, 0x47, 0x84, 0xe5, 0xf2, 0x63,
		0x4d, 0x3b, 0x6b, 0x7f, 0x3c, 0xd6, 0xb5, 0xb3, 0x76, 0x74, 0x59, 0x0f, 0xff, 0x89, 0xae, 0x0f,
		0x1f, 0x6b, 0xda, 0xf1, 0xf0, 0xba, 0xf1, 0x58, 0xd3, 0x1a, 0xed, 0x4a, 0xab, 0x55, 0xad, 0xbc,
		0x1f, 0x0d, 0xe0, 0x84, 0xe5, 0xdf, 0x1e, 0x5b, 0x2d, 0xf7, 0xfd, 0x6e, 0x10, 0xfc, 0xfd, 0x3e,
		0x68, 0xff, 0x5e, 0x39, 0x2f, 0xe5, 0x5d, 0xf2, 0x75, 0x7f, 0x85, 0xb3, 0x79, 0xb2, 0x05, 0xb3,
		0xd9, 0xfc, 0x08, 0xc6, 0x5c, 0xd7, 0xba, 0x17, 0xda, 0xb7, 0xf6, 0x7b, 0x6d, 0xff, 0x78, 0x50,
		0x69, 0x56, 0xca, 0xb3, 0xf7, 0x9a, 0x95, 0xf7, 0xda, 0x7e, 0x63, 0x50, 0x2e, 0x27, 0x7c, 0x73,
		0x9e, 0xd4, 0x46, 0xe5, 0xa3, 0x5c, 0x2e, 0xc7, 0xf3, 0x38, 0x35, 0xb7, 0x8f, 0xb5, 0x7a, 0xfb,
		0x3c, 0xbc, 0x8c, 0xfe, 0x8e, 0xb8, 0x43, 0xea, 0xe1, 0x4a, 0x22, 0x4f, 0xec, 0x83, 0x59, 0xf8,
		0x9f, 0x66, 0xfb, 0xf7, 0x66, 0xe5, 0xfd, 0x64, 0x30, 0xbc, 0x0e, 0xff, 0x56, 0x3e, 0xca, 0xd5,
		0xbd, 0x56, 0xab, 0x5a, 0xdd, 0xab, 0x44, 0x1d, 0x88, 0x9f, 0xdb, 0x8b, 0xbe, 0x3d, 0x6f, 0x36,
		0xe7, 0x6e, 0x55, 0xca, 0xbf, 0x55, 0x57, 0xc1, 0x96, 0x1b, 0x83, 0x73, 0x4e, 0x0d, 0xc7, 0x36,
		0xc1, 0x80, 0x3e, 0x26, 0x83, 0x41, 0xfa, 0x88, 0x0e, 0x41, 0x1d, 0x41, 0x1d, 0x41, 0x1d, 0x41,
		0x1d, 0x41, 0x1d, 0x41, 0x1d, 0x41, 0x3d, 0x47, 0x50, 0x97, 0xa8, 0xb9, 0x37, 0xc7, 0xe6, 0xf2,
		0x49, 0xfd, 0x29, 0x35, 0xae, 0xc6, 0x0d, 0x44, 0x45, 0xae, 0x9d, 0x57, 0x9b, 0x47, 0x61, 0x10,
		0x37, 0xf7, 0xda, 0x15, 0x86, 0x41, 0xec, 0x38, 0xc0, 0x6f, 0x77, 0x5d, 0x5d, 0x6a, 0x8b, 0xe6,
		0x74, 0xcc, 0xfb, 0xec, 0xc7, 0xd5, 0x14, 0xb5, 0x5e, 0x5b, 0x76, 0xe0, 0x28, 0x14, 0xa9, 0x8a,
		0x42, 0x88, 0x56, 0x76, 0x42, 0x8c, 0x3e, 0xe6, 0x06, 0xe2, 0x5e, 0xc8, 0x4e, 0xef, 0x85, 0x60,
		0x6e, 0xa0, 0x34, 0x2a, 0xf5, 0x85, 0x2f, 0x0f, 0x4b, 0xc1, 0xc3, 0x30, 0x5c, 0xea, 0xeb, 0xbf,
		0x58, 0xdf, 0xef, 0x13, 0xe1, 0xe9, 0x36, 0xef, 0x33, 0xce, 0x99, 0x63, 0x13, 0xdf, 0x66, 0x02,
		0xa1, 0x09, 0xa1, 0x09, 0xc2, 0x58, 0x93, 0x4c, 0x71, 0x02, 0xcb, 0xdc, 0xa8, 0x1f, 0x9f, 0x1d,
		0xca, 0xb4, 0x0e, 0x3b, 0x4b, 0x11, 0xd3, 0x36, 0xb6, 0x05, 0xc2, 0x4e, 0x1a, 0x8d, 0xa3, 0x06,
		0xee, 0xe8, 0x87, 0x29, 0xbc, 0x7e, 0xc7, 0xa6, 0x02, 0x70, 0xb4, 0x4e, 0xf4, 0x3c, 0xd0, 0xe9,
		0x1f, 0x12, 0x11, 0xe1, 0x10, 0xdd, 0xb2, 0x1c, 0x43, 0x17, 0x34, 0x58, 0x92, 0x8c, 0xce, 0xbb,
		0x22, 0x12, 0xe7, 0xc2, 0xa3, 0xfa, 0x47, 0xf7, 0xc0, 0x22, 0x8f, 0xbb, 0xf4, 0xc0, 0x81, 0x16,
		0x31, 0x60, 0x9b, 0x70, 0x9d, 0x8e, 0xf5, 0x83, 0xf8, 0xc7, 0x2a, 0x1f, 0xe5, 0xc7, 0xba, 0x76,
		0xd8, 0x1e, 0x7e, 0x38, 0x7a, 0xac, 0x69, 0x87, 0xed, 0x4a, 0x05, 0x4b, 0x4b, 0x6c, 0x53, 0x69,
		0x89, 0xc9, 0x53, 0xd4, 0xe6, 0xae, 0x40, 0x75, 0x25, 0x6e, 0xdc, 0xc8, 0xe1, 0xfa, 0x34, 0x77,
		0xb1, 0xb1, 0x8a, 0x12, 0x72, 0x5d, 0x92, 0xe8, 0x8a, 0x4c, 0x2d, 0x89, 0xc4, 0xb3, 0xe2, 0x16,
		0x9d, 0x0d, 0x57, 0xa0, 0x0a, 0x12, 0xbc, 0x80, 0x07, 0x02, 0xf1, 0xfc, 0xce, 0x03, 0x5a, 0x78,
		0x8c, 0x9f, 0xcc, 0xf1, 0x7d, 0x69, 0x55, 0x23, 0x16, 0x91, 0xac, 0xb3, 0x5e, 0x04, 0xdf, 0xc2,
		0xb3, 0x7f, 0xf8, 0xfa, 0x8e, 0xfe, 0x29, 0x40, 0x5a, 0xee, 0xb6, 0x1c, 0xf0, 0xc8, 0x77, 0xb0,
		0x42, 0x1e, 0xc7, 0xba, 0xd5, 0xe8, 0x02, 0xdf, 0x01, 0xff, 0x01, 0xe6, 0xe3, 0x8e, 0x14, 0x3a,
		0xe6, 0xe3, 0xa2, 0x6e, 0x2f, 0xac, 0x6e, 0xc7, 0x6c, 0x5c, 0x54, 0xeb, 0x80, 0xa1, 0xc0, 0x6c,
		0xdc, 0xa8, 0x5b, 0x05, 0x8b, 0x20, 0x43, 0x8b, 0x7d, 0x97, 0xb5, 0x3a, 0x86, 0x8e, 0xa9, 0x88,
		0xe8, 0xda, 0x42, 0xc7, 0x02, 0xe1, 0xab, 0xa2, 0xf4, 0xa1, 0x4d, 0x35, 0xe9, 0x9c, 0xc3, 0x70,
		0x31, 0x34, 0xaa, 0x64, 0x87, 0x02, 0xc3, 0xc5, 0x62, 0x82, 0x1d, 0x0d, 0x17, 0x63, 0x7d, 0xce,
		0x34, 0x93, 0x76, 0x99, 0xcd, 0x60, 0x6e, 0xdd, 0x59, 0xc2, 0x2d, 0x38, 0xc3, 0x1d, 0x31, 0x46,
		0x05, 0x63, 0xa4, 0x4f, 0x70, 0x07, 0xac, 0x3b, 0xd4, 0xd7, 0x1f, 0x69, 0x46, 0xcf, 0xc4, 0x41,
		0x29, 0xdc, 0xa5, 0x06, 0xeb, 0x32, 0x83, 0x30, 0x93, 0xda, 0x82, 0x75, 0xd9, 0xdc, 0xde, 0x5f,
		0x4e, 0xca, 0x72, 0xbd, 0x27, 0x21, 0xf3, 0x4f, 0x78, 0x10, 0x32, 0xdf, 0xd8, 0x39, 0xc8, 0x80,
		0x75, 0x0d, 0xdc, 0x1a, 0x4b, 0x62, 0x7f, 0x85, 0xf4, 0x44, 0xc8, 0xc1, 0xec, 0xb0, 0x58, 0x48,
		0xb8, 0x9d, 0x96, 0xc9, 0x5e, 0xcb, 0x68, 0xac, 0xcc, 0x19, 0x2d, 0xaa, 0xf4, 0x19, 0x6c, 0x17,
		0x05, 0x7b, 0x2e, 0x93, 0x5d, 0x97, 0xf7, 0x90, 0x9d, 0x9d, 0x9d, 0x6d, 0x70, 0xd0, 0xbe, 0xac,
		0xe6, 0xe9, 0xbc, 0xf2, 0x3c, 0x25, 0x26, 0xb5, 0xd4, 0x75, 0xbc, 0xbe, 0x2e, 0xe0, 0xc8, 0x17,
		0xd3, 0xa9, 0xa1, 0xde, 0xcd, 0xed, 0xc3, 0x0d, 0x89, 0x5a, 0x20, 0x31, 0xec, 0x51, 0x6f, 0x9f,
		0x44, 0x9b, 0xa2, 0x1d, 0xca, 0xc9, 0xb3, 0xf3, 0x4a, 0xba, 0x8c, 0x5a, 0x26, 0x27, 0xba, 0x47,
		0x89, 0xab, 0x1b, 0x3f, 0xa9, 0x49, 0x98, 0x2d, 0x1c, 0xa2, 0xdb, 0x24, 0x20, 0xaf, 0x92, 0x5b,
		0x9f, 0x0b, 0xd2, 0xa1, 0x84, 0xfe, 0xd2, 0x0d, 0x61, 0xbd, 0x91, 0x7a, 0x83, 0x18, 0xcf, 0x7a,
		0x30, 0xab, 0xd4, 0xe3, 0xc4, 0x72, 0xec, 0x5e, 0x95, 0x7c, 0x73, 0xbc, 0xe0, 0xfb, 0xbe, 0x6b,
		0xd1, 0x7d, 0x72, 0x79, 0x79, 0x79, 0x77, 0x77, 0x77, 0x7d, 0x7d, 0xfd, 0x10, 0xfe, 0x57, 0x45,
		0x74, 0x45, 0x74, 0x2d, 0x32, 0xba, 0x4a, 0xef, 0x23, 0xa9, 0xb8, 0x3e, 0x54, 0x5d, 0x20, 0x5b,
		0x0e, 0xb1, 0xf5, 0x06, 0x62, 0xec, 0x56, 0x8d, 0xd9, 0x0e, 0x40, 0x6c, 0xdf, 0x30, 0xe0, 0xf8,
		0x1a, 0x10, 0xa9, 0x81, 0x6b, 0xdf, 0xe9, 0x30, 0x8b, 0x12, 0xc3, 0xf1, 0x6d, 0xe1, 0xbd, 0x11,
		0xc3, 0x31, 0x29, 0x22, 0x1d, 0x22, 0x5d, 0x91, 0x91, 0x4e, 0x9e, 0xd9, 0xc9, 0xda, 0xcb, 0xdc,
		0x84, 0xf9, 0x0d, 0xef, 0x47, 0x83, 0x52, 0x31, 0x75, 0x8b, 0xad, 0xa2, 0x5b, 0xec, 0x8c, 0xba,
		0xc5, 0xa6, 0xe2, 0xd5, 0xf1, 0x7e, 0xa2, 0x6e, 0x41, 0xdd, 0x52, 0x7c, 0xdd, 0x62, 0x17, 0x5d,
		0xb7, 0x1c, 0xee, 0x6f, 0x44, 0xbb, 0x64, 0xf2, 0xae, 0x4b, 0xa6, 0x1c, 0x8d, 0x9e, 0x4f, 0xc8,
		0xce, 0xe1, 0x4c, 0xd0, 0x83, 0xf1, 0x1f, 0xd8, 0xc6, 0x0c, 0x49, 0x4c, 0xdc, 0x79, 0x60, 0x82,
		0x3e, 0x8d, 0xff, 0xdc, 0xf4, 0x39, 0xbb, 0x1a, 0xb7, 0xb8, 0x8a, 0xaa, 0x05, 0x8e, 0xcd, 0x84,
		0x13, 0x2e, 0xd3, 0xe4, 0x8b, 0x17, 0x8c, 0x69, 0x70, 0xf3, 0xe9, 0xd3, 0x6f, 0x3e, 0x99, 0x3d,
		0xaa, 0x19, 0x96, 0xcf, 0x05, 0xf5, 0x34, 0xd7, 0x73, 0xfa, 0x54, 0x3c, 0x53, 0x9f, 0x6b, 0xbe,
		0x67, 0x29, 0xec, 0x46, 0x2d, 0x68, 0x4c, 0x0d, 0xef, 0xff, 0xfa, 0xf3, 0x3b, 0x71, 0xba, 0x24,
		0x68, 0x98, 0xc4, 0x0d, 0x93, 0x71, 0xc3, 0x08, 0xfd, 0x08, 0xfd, 0x30, 0xe8, 0x57, 0x87, 0x71,
		0xdf, 0x63, 0x4a, 0x30, 0xbe, 0x46, 0x5b, 0x3c, 0x14, 0x3f, 0x93, 0xbe, 0x30, 0x83, 0x2a, 0xca,
		0x6e, 0x4c, 0xac, 0x26, 0xab, 0xc3, 0xa4, 0xc4, 0x50, 0x58, 0xc7, 0x20, 0x43, 0xa2, 0x46, 0xa1,
		0xc2, 0x5a, 0x47, 0x61, 0xfd, 0xec, 0xc2, 0x2a, 0x0b, 0x62, 0x23, 0x02, 0x48, 0x9e, 0x65, 0xea,
		0x1c, 0xc3, 0x32, 0xe3, 0x16, 0x09, 0x84, 0x62, 0x1e, 0x66, 0x4e, 0x6e, 0x54, 0xb0, 0x64, 0x64,
		0x91, 0x90, 0x6c, 0x92, 0x92, 0x55, 0x62, 0x72, 0x93, 0x9c, 0xdc, 0x24, 0x28, 0xb3, 0x24, 0x29,
		0xfa, 0x9f, 0x81, 0x33, 0x0d, 0x86, 0xc3, 0x1c, 0xa5, 0x45, 0x75, 0xb5, 0x3b, 0xa2, 0x55, 0xdc,
		0x38, 0x1a, 0xfe, 0xa7, 0xc6, 0x62, 0x24, 0xeb, 0x46, 0x52, 0x46, 0xa9, 0x9e, 0x6b, 0x46, 0x31,
		0xf6, 0x76, 0xae, 0x9d, 0x1c, 0xf6, 0x4a, 0x14, 0xb9, 0x70, 0xc6, 0x37, 0xf3, 0xab, 0x78, 0x43,
		0x0b, 0xce, 0x7b, 0x5d, 0xe9, 0xe8, 0x7e, 0x59, 0x0f, 0x55, 0x7b, 0x45, 0x3b, 0x5f, 0x90, 0xc8,
		0x6d, 0x50, 0x9e, 0x6d, 0xba, 0x8e, 0x92, 0xcf, 0xbb, 0x5d, 0x0a, 0xe9, 0x19, 0xf3, 0x70, 0x11,
		0xdb, 0x11, 0xdb, 0xb7, 0x06, 0xdb, 0xc1, 0xf1, 0x1f, 0x08, 0xeb, 0x08, 0xeb, 0xdb, 0x03, 0xeb,
		0x5f, 0x6b, 0x08, 0xea, 0x9b, 0x00, 0xf5, 0x6c, 0x60, 0x9e, 0x03, 0x88, 0x07, 0x4d, 0xa5, 0x3b,
		0xaa, 0x10, 0xc1, 0x11, 0xc1, 0x11, 0xc1, 0x11, 0xc1, 0x11, 0xc1, 0x11, 0xc1, 0x3f, 0x13, 0x82,
		0xe7, 0xea, 0xba, 0x8f, 0x8b, 0xdf, 0x02, 0xc0, 0x5a, 0xae, 0x1c, 0x6e, 0x92, 0xc4, 0xcb, 0x95,
		0xc7, 0x4d, 0x62, 0x68, 0xe5, 0x72, 0xb9, 0x73, 0x8d, 0x49, 0x95, 0xcf, 0x55, 0x1d, 0x4c, 0x60,
		0xac, 0xcb, 0x88, 0x6e, 0x79, 0xcc, 0xcb, 0xd8, 0xf8, 0x39, 0x80, 0xef, 0xff, 0x11, 0x99, 0x10,
		0x98, 0xdb, 0xd1, 0x2f, 0x3c, 0x5d, 0x9b, 0x3d, 0x7a, 0x15, 0xfd, 0xc0, 0xba, 0x37, 0x45, 0xc7,
		0xfd, 0xcc, 0x27, 0xc6, 0x21, 0xbd, 0xbd, 0x4c, 0x61, 0x0e, 0x13, 0xb6, 0x28, 0x06, 0x39, 0xe0,
		0xbe, 0xa9, 0xaa, 0xbe, 0xd8, 0xde, 0x20, 0x87, 0x82, 0x85, 0x04, 0x4a, 0x47, 0xca, 0x01, 0x55,
		0xe1, 0x2a, 0x22, 0x01, 0x79, 0x5f, 0xb7, 0x2c, 0xcd, 0xa0, 0x96, 0x05, 0x38, 0xd5, 0x62, 0x4c,
		0x03, 0xad, 0x5e, 0x16, 0xd7, 0x9f, 0x0e, 0x1a, 0x20, 0x41, 0x03, 0xe3, 0x63, 0x2d, 0x30, 0xa8,
		0xf0, 0xd3, 0x07, 0x15, 0x0e, 0x4f, 0x0e, 0x06, 0x83, 0x2b, 0xec, 0xc8, 0xe1, 0x59, 0xae, 0xbc,
		0x88, 0xa8, 0xa7, 0x19, 0x13, 0xe1, 0x13, 0xe1, 0x73, 0x5d, 0xf0, 0xf9, 0xec, 0x70, 0x95, 0x7a,
		0x14, 0x75, 0x40, 0x09, 0x01, 0xd8, 0x41, 0xee, 0xea, 0x2e, 0x15, 0xb5, 0x23, 0xe9, 0xf3, 0xe8,
		0x61, 0xb6, 0x9e, 0xe6, 0xe0, 0x44, 0xca, 0x78, 0xa4, 0x7d, 0x9e, 0xae, 0xb4, 0xb1, 0xf6, 0x50,
		0xcc, 0xf0, 0x98, 0x6b, 0x68, 0x6b, 0x8e, 0xc0, 0xcf, 0xe6, 0xf7, 0xc8, 0xe8, 0xf1, 0xca, 0x87,
		0x7b, 0x4e, 0x76, 0x90, 0x7b, 0x3e, 0xdf, 0x91, 0xfb, 0x49, 0x22, 0xb4, 0xb9, 0x23, 0xf8, 0x73,
		0x12, 0x8b, 0x55, 0xbb, 0x1d, 0xf7, 0xd7, 0x05, 0x4f, 0xf1, 0x41, 0xce, 0x0a, 0xbb, 0x82, 0x04,
		0xb7, 0x39, 0x70, 0x9b, 0x23, 0xc9, 0x2b, 0x5c, 0xb8, 0xa1, 0x3d, 0x6c, 0x1c, 0x7d, 0xc2, 0x7d,
		0x0e, 0x05, 0x89, 0xcc, 0x8a, 0x73, 0xa5, 0x40, 0x67, 0x8f, 0xca, 0x94, 0x3e, 0xb5, 0xcb, 0xd3,
		0x35, 0x4b, 0xdb, 0x01, 0xaa, 0x9d, 0xd4, 0x07, 0x95, 0xf3, 0xf1, 0xfd, 0x76, 0x80, 0x47, 0x7b,
		0x2a, 0x54, 0xe7, 0x95, 0x8f, 0x56, 0xab, 0x5a, 0x2a, 0xcc, 0x06, 0xd0, 0x3a, 0xab, 0x06, 0x50,
		0x5b, 0xef, 0x58, 0x4a, 0xe5, 0x2e, 0x43, 0x3a, 0x35, 0xf7, 0xc0, 0x75, 0x48, 0x1c, 0xa7, 0x61,
		0x80, 0xfd, 0x03, 0x13, 0xe7, 0x28, 0x07, 0x2b, 0x5b, 0x74, 0x2b, 0xa0, 0x5b, 0x61, 0x5d, 0x6e,
		0x85, 0x8e, 0xe3, 0x58, 0x54, 0xb7, 0x55, 0x3c, 0x0b, 0xf5, 0x35, 0x0a, 0x35, 0x28, 0xae, 0x4b,
		0x25, 0x9e, 0x2b, 0x2d, 0x8e, 0x0b, 0x9d, 0x7d, 0x28, 0x95, 0xeb, 0x97, 0xca, 0x37, 0xdd, 0xee,
		0x69, 0xe0, 0x52, 0xc9, 0x04, 0xcb, 0xe4, 0xad, 0x70, 0x35, 0xb1, 0xcd, 0x55, 0xf2, 0x8e, 0xb6,
		0xb8, 0x78, 0xef, 0xaa, 0x4c, 0xd2, 0xb5, 0xd4, 0xc0, 0xc9, 0x7a, 0x40, 0xc1, 0xa8, 0xa5, 0xcc,
		0x07, 0x15, 0x6c, 0xc2, 0x14, 0x17, 0xba, 0x42, 0x01, 0xaf, 0x80, 0x48, 0x0d, 0xb3, 0x03, 0x7d,
		0x4b, 0x2e, 0x2c, 0xcb, 0x31, 0xc2, 0x9d, 0x7a, 0x72, 0x89, 0x15, 0xbc, 0x10, 0xb5, 0xc1, 0xa8,
		0xbd, 0xde, 0x0a, 0x5e, 0xf2, 0xdc, 0x8e, 0xe8, 0x2e, 0x05, 0x55, 0xc7, 0x58, 0x03, 0x17, 0x3a,
		0x64, 0x5f, 0x11, 0xdd, 0x95, 0x2b, 0xdc, 0x5d, 0x68, 0xdf, 0x5a, 0xad, 0x00, 0xcf, 0xb7, 0xac,
		0xc6, 0x9d, 0x7c, 0x10, 0x35, 0x2c, 0x78, 0x1a, 0x1e, 0x34, 0x9d, 0x4b, 0xb0, 0x34, 0x2c, 0x48,
		0x7a, 0xfd, 0xd1, 0x7e, 0xd2, 0xd1, 0x70, 0x44, 0x26, 0xda, 0xef, 0x21, 0x68, 0xed, 0x32, 0x68,
		0x4c, 0x35, 0xd8, 0xef, 0x0b, 0x60, 0x58, 0x86, 0xbc, 0x92, 0x7a, 0x42, 0x9d, 0x1c, 0x87, 0xc8,
		0x73, 0x46, 0x26, 0x8e, 0x90, 0xe3, 0x84, 0xb4, 0xae, 0x4a, 0xce, 0xfc, 0xf2, 0x19, 0x2f, 0x2d,
		0x0a, 0xa7, 0x5c, 0x3c, 0xbd, 0xc9, 0x93, 0x3a, 0x3f, 0x65, 0xd3, 0x77, 0x66, 0x7a, 0xb4, 0xac,
		0x27, 0x0b, 0x7b, 0x90, 0xf0, 0xf2, 0x0b, 0x5e, 0x7a, 0xfa, 0x7d, 0xc7, 0x6f, 0x35, 0xf1, 0x46,
		0x25, 0x41, 0xfb, 0xae, 0xa5, 0x8b, 0x79, 0x23, 0x69, 0x6c, 0x08, 0x0d, 0x9f, 0x98, 0xe9, 0xc7,
		0xac, 0x8d, 0xff, 0x4c, 0x89, 0x70, 0x5c, 0x62, 0xd1, 0x17, 0x6a, 0x11, 0xc3, 0xb1, 0x85, 0xce,
		0xec, 0x39, 0x0f, 0x49, 0x4a, 0x20, 0x68, 0xaa, 0xd9, 0xbe, 0xc8, 0x3c, 0x1f, 0xbf, 0xa1, 0x9b,
		0x34, 0x2e, 0x4b, 0xcc, 0x6d, 0x69, 0xb3, 0x5a, 0xda, 0x7c, 0x9e, 0x32, 0x93, 0x85, 0x5b, 0x02,
		0xf2, 0x45, 0x5a, 0xa0, 0x65, 0xfa, 0x14, 0xc9, 0x4e, 0x55, 0xda, 0x94, 0x0d, 0x03, 0x7a, 0x5f,
		0x0c, 0x4e, 0x86, 0xa4, 0x69, 0x61, 0x2b, 0x4b, 0x22, 0x78, 0x97, 0xae, 0xbb, 0x64, 0xd6, 0x59,
		0x8b, 0x27, 0x14, 0xba, 0x8e, 0x02, 0xaf, 0x9b, 0xc0, 0xeb, 0xa4, 0xa5, 0x13, 0xae, 0xa6, 0xd5,
		0x97, 0x45, 0xdc, 0x82, 0x2a, 0x9e, 0x29, 0xd4, 0x6c, 0x92, 0xa9, 0x68, 0x36, 0xc9, 0x32, 0xdb,
		0x70, 0x62, 0xee, 0x42, 0x8e, 0x52, 0x5d, 0xa1, 0x6f, 0x38, 0xf6, 0x7b, 0x11, 0xc7, 0xe5, 0x63,
		0x8b, 0xc2, 0x4f, 0xcc, 0x85, 0x55, 0x06, 0xc3, 0x53, 0x73, 0xd7, 0xb1, 0xa4, 0x2b, 0xfa, 0xa9,
		0xb9, 0xf0, 0x4a, 0x5b, 0x85, 0x38, 0x37, 0x77, 0x05, 0xe9, 0x3c, 0x92, 0x65, 0x5c, 0x27, 0xa4,
		0x4d, 0x22, 0x73, 0x73, 0x56, 0x9d, 0xdf, 0x53, 0x2f, 0x4e, 0xf9, 0x24, 0xff, 0xfe, 0xe3, 0x81,
		0x3c, 0x50, 0x21, 0x98, 0xdd, 0xdb, 0x8a, 0x0c, 0x1e, 0xd4, 0xe2, 0x2a, 0x5a, 0x5c, 0x3a, 0x83,
		0xa7, 0xdf, 0xf1, 0x14, 0x8e, 0xf5, 0xe8, 0x78, 0x8a, 0xbb, 0x02, 0xb7, 0xfa, 0x2f, 0xd6, 0xf7,
		0xfb, 0xa4, 0xc3, 0x84, 0xa7, 0x0b, 0xba, 0x0b, 0xa5, 0x82, 0xa5, 0x18, 0x74, 0xc7, 0x36, 0x04,
		0x64, 0x18, 0x78, 0x35, 0x1b, 0x02, 0xf0, 0x52, 0xc1, 0xce, 0xab, 0x6d, 0x31, 0xfb, 0x67, 0x86,
		0xaa, 0x82, 0xc3, 0x16, 0xb2, 0x15, 0x23, 0x9a, 0xd0, 0xc1, 0xfd, 0x8e, 0x47, 0x86, 0xad, 0x12,
		0x53, 0x17, 0x3a, 0x09, 0x84, 0x81, 0x30, 0x9b, 0xf4, 0x3b, 0x2e, 0xff, 0x0c, 0x75, 0x89, 0x40,
		0x42, 0x93, 0x55, 0x78, 0x72, 0x13, 0xa2, 0xdc, 0x84, 0x29, 0xb3, 0x50, 0x29, 0xba, 0xec, 0xd7,
		0x5e, 0x97, 0x08, 0xa6, 0xe7, 0x93, 0xd8, 0x5a, 0x25, 0x60, 0x5f, 0xed, 0x2c, 0x67, 0xf8, 0x2a,
		0x22, 0x97, 0x55, 0x45, 0x4e, 0xf2, 0x9c, 0x6a, 0x6a, 0xd7, 0x30, 0x5e, 0x7f, 0x55, 0x43, 0x9b,
		0xad, 0x96, 0xcc, 0xca, 0x47, 0xfb, 0x13, 0x95, 0x1a, 0xf4, 0xdd, 0x6c, 0x18, 0x1f, 0xd3, 0xe7,
		0x8a, 0xf0, 0x51, 0x9b, 0x88, 0xef, 0x88, 0xef, 0x88, 0xef, 0x88, 0xef, 0x88, 0xef, 0x88, 0xef,
		0x88, 0xef, 0xab, 0x73, 0x0c, 0xe4, 0x58, 0x3b, 0x6f, 0xb8, 0xc9, 0x75, 0x30, 0x7f, 0x11, 0xc1,
		0xfb, 0x81, 0xbc, 0x03, 0x8c, 0x24, 0x6e, 0xd7, 0xff, 0x88, 0xdb, 0x7b, 0x9a, 0xbf, 0x88, 0x0a,
		0xe7, 0x3d, 0xdd, 0x76, 0xbc, 0xd2, 0xae, 0x14, 0xdb, 0x5a, 0x3a, 0x9e, 0x4a, 0x61, 0x38, 0x4b,
		0xc7, 0x70, 0x15, 0xc5, 0xb7, 0x40, 0xe7, 0x54, 0xa8, 0x9c, 0x4b, 0x91, 0xf7, 0x39, 0x14, 0xb8,
		0x13, 0x9b, 0x9f, 0x75, 0x57, 0xf8, 0x9d, 0x58, 0xe9, 0x2a, 0xd0, 0xb8, 0x09, 0xbb, 0x0e, 0xc0,
		0x2e, 0xfa, 0x26, 0x2c, 0xb4, 0xaa, 0xf2, 0xae, 0x6e, 0xc1, 0x32, 0x53, 0x5e, 0x95, 0xa7, 0xc6,
		0x5d, 0xa6, 0x29, 0xf0, 0x9b, 0x2b, 0xd2, 0x75, 0xbc, 0xf9, 0x08, 0x9a, 0x2a, 0x2a, 0x6e, 0x54,
		0xdc, 0xb3, 0x41, 0x7c, 0xda, 0x52, 0xf6, 0x42, 0xed, 0x8d, 0xda, 0x3b, 0x1a, 0x8a, 0xa3, 0xc3,
		0x2d, 0xd4, 0xde, 0x12, 0x0c, 0x0b, 0xcd, 0x00, 0xc9, 0x9e, 0xd7, 0x99, 0x3d, 0x9f, 0x73, 0x15,
		0xa8, 0xc4, 0x01, 0xa8, 0xc4, 0xa1, 0xa8, 0xf4, 0x60, 0x31, 0x83, 0x12, 0x93, 0x75, 0xbb, 0xd4,
		0xa3, 0xb6, 0x60, 0xba, 0x70, 0x3c, 0x04, 0x24, 0x04, 0x24, 0x69, 0x86, 0x9a, 0xe4, 0x88, 0x53,
		0x89, 0x47, 0x61, 0x2e, 0xdb, 0x82, 0xa3, 0x50, 0x0d, 0x51, 0x68, 0x04, 0xc8, 0x27, 0xa7, 0xa7,
		0xa7, 0x87, 0x50, 0xb7, 0xe8, 0xae, 0xae, 0x24, 0xb8, 0x05, 0x8a, 0xe5, 0x8c, 0x1e, 0x87, 0x87,
		0x72, 0x46, 0xda, 0x1b, 0x23, 0x39, 0x31, 0x92, 0x73, 0xe2, 0x41, 0x8c, 0xe4, 0xc4, 0x48, 0x4e,
		0xb2, 0x12, 0x06, 0x06, 0x6a, 0xde, 0x4f, 0x11, 0xc9, 0x19, 0xa9, 0x60, 0x0c, 0xe4, 0xc4, 0x40,
		0x8f, 0x6c, 0x32, 0x05, 0x93, 0x2d, 0x05, 0xab, 0x90, 0x60, 0xa0, 0x87, 0xc2, 0x74, 0x62, 0xa0,
		0x47, 0x9e, 0xfc, 0x97, 0x79, 0x95, 0xb2, 0xea, 0xa1, 0xc5, 0x40, 0x0f, 0x82, 0x81, 0x9c, 0x69,
		0x00, 0x8f, 0x71, 0x9c, 0x08, 0xef, 0x08, 0xef, 0x08, 0xef, 0x08, 0xef, 0x08, 0xef, 0x08, 0xef,
		0xab, 0x76, 0x0b, 0xac, 0x27, 0x8e, 0x33, 0xf4, 0xbc, 0xae, 0x32, 0x8c, 0x33, 0x34, 0x1f, 0x3e,
		0x4b, 0x14, 0xa7, 0x8c, 0x1f, 0x5b, 0x6d, 0x04, 0x57, 0x72, 0x80, 0x2a, 0x17, 0x00, 0x17, 0xfd,
		0xd2, 0x7a, 0xaf, 0x89, 0x5b, 0xab, 0x07, 0x0f, 0xd4, 0x0b, 0x13, 0x81, 0x44, 0x00, 0xcd, 0xb8,
		0xb1, 0x8a, 0x1b, 0xab, 0xd2, 0xfc, 0x34, 0xc9, 0x12, 0x8d, 0xcf, 0xb6, 0xb3, 0x8a, 0xf1, 0x3d,
		0x13, 0x87, 0x41, 0xe1, 0xa6, 0x6a, 0xd8, 0x2d, 0xe1, 0xe9, 0xdd, 0x2e, 0x33, 0x34, 0xc3, 0xd2,
		0x25, 0x8e, 0x1a, 0x1e, 0x6b, 0xb4, 0x29, 0x32, 0xe8, 0xb1, 0xd7, 0xf6, 0x4f, 0x22, 0x1c, 0x12,
		0xb7, 0x41, 0xa4, 0xda, 0x40, 0x35, 0xfe, 0x79, 0xd4, 0xb8, 0x45, 0xf5, 0xae, 0x47, 0xbb, 0x90,
		0x60, 0xcd, 0x53, 0xb9, 0xd8, 0xb7, 0xc8, 0xe0, 0x12, 0x46, 0x73, 0x8a, 0x7f, 0x13, 0x6f, 0x30,
		0x13, 0x4b, 0xce, 0xce, 0x13, 0x6f, 0xaa, 0xe4, 0x6c, 0xba, 0x7d, 0x0c, 0x2a, 0x3f, 0x9b, 0x6e,
		0x11, 0x6f, 0xac, 0x14, 0xad, 0x4c, 0x87, 0x24, 0x3a, 0x22, 0x55, 0x9a, 0x76, 0xa1, 0xae, 0x97,
		0xd2, 0xed, 0x58, 0xa4, 0x16, 0xac, 0x4d, 0x55, 0x8b, 0xd4, 0x4a, 0x01, 0x33, 0x08, 0x90, 0xd3,
		0xca, 0xd5, 0xca, 0x00, 0x31, 0x96, 0xab, 0xcd, 0x00, 0xa4, 0x39, 0x97, 0xab, 0xd5, 0x3d, 0x57,
		0xde, 0x52, 0x0b, 0x1e, 0x86, 0xd9, 0x67, 0x13, 0xe7, 0xca, 0xe8, 0xb6, 0x49, 0xfe, 0xa4, 0x82,
		0xda, 0xe1, 0xa7, 0x7b, 0x8f, 0x39, 0x1e, 0x13, 0x6f, 0x55, 0x52, 0x27, 0x8c, 0x13, 0xf1, 0x4c,
		0xc9, 0x33, 0xeb, 0x3d, 0x53, 0x2e, 0xaa, 0xa4, 0xde, 0x18, 0xde, 0xb2, 0x9c, 0xd7, 0xe0, 0x0e,
		0x1a, 0x74, 0x68, 0xd0, 0xc9, 0xf3, 0x20, 0xae, 0xcb, 0x71, 0x5d, 0x1e, 0x0e, 0x05, 0x2e, 0xcb,
		0x49, 0x41, 0x2a, 0x92, 0xe3, 0xf2, 0x1c, 0xb5, 0x79, 0x46, 0x36, 0x23, 0x98, 0x4f, 0x89, 0x7a,
		0x1d, 0x4b, 0x92, 0x4f, 0x6b, 0x76, 0x2c, 0x72, 0x82, 0xba, 0x1d, 0x8b, 0x9c, 0xa0, 0x5a, 0xdf,
		0x05, 0xb5, 0x8e, 0x45, 0x4e, 0xa2, 0x6e, 0xad, 0xad, 0xc8, 0xc9, 0x94, 0x51, 0x8e, 0x3e, 0x16,
		0xd4, 0xdc, 0xc9, 0x0e, 0x60, 0x2c, 0x75, 0x82, 0x3a, 0x5c, 0x76, 0x28, 0xb0, 0xd4, 0x49, 0x4c,
		0xb0, 0xa3, 0xa5, 0x4e, 0xfe, 0xbf, 0xc1, 0xe4, 0xc1, 0x29, 0x78, 0x18, 0x86, 0x4e, 0xff, 0xfe,
		0xe3, 0x81, 0x5c, 0x06, 0x3a, 0x87, 0xdc, 0x98, 0xd4, 0x16, 0xac, 0xcb, 0x28, 0x16, 0x3b, 0x41,
		0x5c, 0x02, 0x70, 0x14, 0x41, 0xdf, 0x3f, 0x02, 0xd1, 0xb6, 0x02, 0x11, 0xc6, 0x08, 0xcd, 0x11,
		0x6f, 0x2c, 0x46, 0x68, 0x3a, 0x84, 0x2b, 0xfd, 0x13, 0x2c, 0x64, 0x28, 0xa2, 0x0c, 0x21, 0xee,
		0x29, 0xf5, 0xc3, 0xe6, 0xc2, 0x87, 0x40, 0xdd, 0x04, 0x74, 0x4f, 0x26, 0xa0, 0xc8, 0x77, 0xbb,
		0xe9, 0x61, 0x44, 0xc1, 0x97, 0x85, 0x0d, 0x1e, 0x9a, 0x7f, 0x39, 0xb2, 0xf9, 0xe8, 0xa1, 0xe0,
		0xa5, 0xf2, 0x0a, 0x1f, 0x4a, 0x9a, 0x1a, 0xc9, 0x51, 0x48, 0x9a, 0xaa, 0x0b, 0x62, 0xc5, 0xc1,
		0x42, 0x01, 0xef, 0x98, 0xc4, 0x77, 0xbb, 0xa9, 0xee, 0x87, 0xb5, 0x86, 0x0a, 0xa5, 0x77, 0x81,
		0x14, 0x37, 0x56, 0x28, 0x71, 0xa2, 0xd5, 0xa0, 0x61, 0x79, 0xb0, 0x90, 0x69, 0x7a, 0x14, 0x12,
		0xda, 0x3d, 0x24, 0x00, 0x06, 0x0d, 0x45, 0x54, 0x01, 0x87, 0xfc, 0x75, 0xff, 0x6d, 0x1b, 0x16,
		0x00, 0x8b, 0x39, 0x67, 0x4b, 0x57, 0x00, 0x0b, 0x39, 0x2b, 0x9f, 0x25, 0xc0, 0xad, 0x6e, 0x9b,
		0xba, 0x70, 0xbc, 0x37, 0x89, 0x92, 0x67, 0xf0, 0xe5, 0xc2, 0xb3, 0x03, 0xca, 0xe1, 0xa9, 0x9f,
		0x49, 0x3c, 0x1b, 0xbf, 0x45, 0xee, 0xeb, 0x85, 0x91, 0x47, 0xd7, 0xd5, 0xe4, 0x84, 0x46, 0xb5,
		0x07, 0x6a, 0x3d, 0x81, 0xf7, 0x28, 0xa1, 0x67, 0x2f, 0xc7, 0x0a, 0x7d, 0x53, 0x71, 0x30, 0x66,
		0xf6, 0xdf, 0xcc, 0x35, 0x50, 0x2e, 0x3f, 0xd6, 0xb4, 0xb3, 0xf6, 0xc7, 0x63, 0x5d, 0x3b, 0x6b,
		0x47, 0x97, 0xf5, 0xf0, 0x9f, 0xe8, 0xfa, 0xf0, 0xb1, 0xa6, 0x1d, 0x0f, 0xaf, 0x1b, 0x8f, 0x35,
		0xad, 0xd1, 0xae, 0xb4, 0x5a, 0xd5, 0xca, 0xfb, 0xd1, 0x00, 0x4e, 0x58, 0xfe, 0xed, 0xb1, 0xd5,
		0x72, 0xdf, 0xef, 0x06, 0xc1, 0xdf, 0xef, 0x83, 0xf6, 0xef, 0x95, 0xf3, 0xd2, 0xaa, 0x73, 0x88,
		0xf7, 0xd7, 0xc8, 0x05, 0x27, 0x5b, 0xcc, 0x05, 0xcd, 0x8f, 0x60, 0xae, 0x74, 0xad, 0x7b, 0xa1,
		0x7d, 0x6b, 0xbf, 0xd7, 0xf6, 0x8f, 0x07, 0x95, 0x66, 0xa5, 0x3c, 0x7b, 0xaf, 0x59, 0x79, 0xaf,
		0xed, 0x37, 0x06, 0xe5, 0x72, 0xc2, 0x37, 0xe7, 0x49, 0x6d, 0x54, 0x3e, 0xca, 0xe5, 0x72, 0x3c,
		0xff, 0x53, 0x3c, 0xf1, 0x58, 0xab, 0xb7, 0xcf, 0xc3, 0xcb, 0xe8, 0xef, 0x88, 0xab, 0xa4, 0x1e,
		0xae, 0x24, 0xf2, 0xd2, 0xbe, 0xb2, 0x08, 0xfc, 0xd3, 0x6c, 0xff, 0xde, 0xac, 0xbc, 0x9f, 0x0c,
		0x86, 0xd7, 0xe1, 0xdf, 0xca, 0x47, 0xb9, 0xba, 0xd7, 0x6a, 0x55, 0xab, 0x7b, 0x95, 0xa8, 0x23,
		0xf1, 0x73, 0x7b, 0xd1, 0xb7, 0xe7, 0xcd, 0xe6, 0xdc, 0xad, 0x4a, 0xf9, 0xb7, 0xea, 0x3a, 0xd8,
		0xfa, 0x4b, 0xbe, 0xed, 0x4a, 0x8a, 0x89, 0x82, 0xda, 0x37, 0x9d, 0xbe, 0xce, 0x6c, 0x99, 0x90,
		0x8c, 0xac, 0xd2, 0x00, 0xdd, 0x7c, 0xc9, 0x20, 0xf3, 0x59, 0x8a, 0x77, 0x64, 0xac, 0x2c, 0xa1,
		0xea, 0x13, 0xcb, 0xc3, 0x1f, 0xa4, 0xa8, 0x54, 0x49, 0xd6, 0xa2, 0x1c, 0x79, 0x0d, 0xd9, 0x61,
		0xe3, 0x68, 0x83, 0x83, 0xb6, 0x2a, 0x01, 0x07, 0x48, 0x88, 0x2a, 0x4e, 0x94, 0x02, 0xdd, 0x37,
		0xda, 0xef, 0x79, 0x6a, 0x97, 0xa7, 0x37, 0x7f, 0xda, 0x01, 0x2a, 0x9c, 0xd4, 0x07, 0x95, 0xf3,
		0xf1, 0xfd, 0x76, 0xa0, 0xcf, 0xf7, 0x54, 0xa8, 0xce, 0x2b, 0x1f, 0xad, 0x56, 0xb5, 0x94, 0xb7,
		0x86, 0xdb, 0xc8, 0xb6, 0x92, 0x11, 0xae, 0xcd, 0x34, 0x6a, 0x9b, 0xae, 0xc3, 0x6c, 0x40, 0xd1,
		0x87, 0x59, 0x42, 0xd8, 0x3a, 0xd3, 0xf7, 0xac, 0x30, 0x1a, 0x22, 0x6a, 0xc5, 0xf7, 0x98, 0xdd,
		0x0b, 0xb3, 0x4e, 0x70, 0xd1, 0xb9, 0xd3, 0x8b, 0x4e, 0xf8, 0x42, 0xd2, 0xf7, 0x18, 0x28, 0x04,
		0x62, 0x37, 0x83, 0xf8, 0x51, 0x2c, 0x50, 0x2c, 0x08, 0x06, 0xef, 0xaf, 0xde, 0x08, 0xc5, 0xe0,
		0xfd, 0xdc, 0x46, 0x03, 0x83, 0xf7, 0x77, 0x2c, 0x78, 0x1f, 0xb5, 0xfb, 0xba, 0xb4, 0x3b, 0x86,
		0xef, 0xa3, 0x62, 0x07, 0x0c, 0x05, 0x86, 0xef, 0x47, 0xdd, 0xa2, 0xb6, 0xa0, 0x9e, 0xeb, 0x31,
		0x0e, 0x50, 0xea, 0x13, 0x34, 0x6a, 0xe5, 0xaf, 0xc6, 0x0d, 0x10, 0xf1, 0xac, 0x0b, 0xe2, 0xbc,
		0xda, 0x3c, 0x32, 0xda, 0x2f, 0x0c, 0x83, 0x72, 0x4e, 0xee, 0x83, 0xe5, 0x31, 0xf9, 0xce, 0x96,
		0x17, 0x49, 0x44, 0x25, 0xbf, 0xbd, 0x4a, 0x7e, 0xb5, 0xdb, 0xa9, 0xab, 0x2e, 0xa5, 0x45, 0x6d,
		0xd1, 0x1c, 0x33, 0x72, 0xd2, 0xc7, 0x0c, 0x75, 0xb4, 0x8a, 0x90, 0x70, 0xe3, 0xbb, 0xdd, 0x2a,
		0x8a, 0x1f, 0xda, 0x58, 0x53, 0x23, 0x8d, 0xe9, 0x35, 0x68, 0x63, 0xc9, 0x0e, 0x05, 0xa6, 0xd7,
		0xc4, 0x04, 0x3b, 0x9a, 0x5e, 0xe3, 0x3a, 0x1e, 0x60, 0xf3, 0x23, 0x7c, 0x1a, 0x78, 0x26, 0xa5,
		0xe3, 0x89, 0x10, 0x8f, 0xd0, 0x97, 0x8b, 0x86, 0xa0, 0x32, 0x6a, 0x05, 0x8c, 0xa7, 0xd9, 0x7e,
		0xbf, 0x43, 0x3d, 0x00, 0x74, 0x9d, 0xe0, 0xe1, 0xc3, 0x9f, 0x16, 0xb8, 0x4e, 0x1a, 0x8d, 0xa3,
		0x06, 0x66, 0xe4, 0x60, 0x46, 0x8e, 0x7a, 0x46, 0x8e, 0xef, 0x76, 0x0f, 0xe2, 0xff, 0x41, 0x39,
		0x37, 0x7f, 0xb9, 0xdd, 0xa7, 0xf8, 0xff, 0x8d, 0x25, 0xd6, 0xa4, 0xbf, 0x77, 0xea, 0xfb, 0xca,
		0xa4, 0xcc, 0xbc, 0x18, 0x0b, 0x2a, 0xef, 0x06, 0x5f, 0x16, 0x36, 0x65, 0x86, 0x5b, 0xc5, 0xcb,
		0x98, 0xe1, 0x56, 0x6e, 0x09, 0x33, 0x49, 0x13, 0x23, 0x31, 0x41, 0xe9, 0x5e, 0xbe, 0x28, 0x5d,
		0xe6, 0x85, 0x79, 0xc2, 0xd7, 0x2d, 0x62, 0x50, 0xcb, 0xf2, 0x2d, 0xdd, 0x23, 0x3c, 0x3a, 0xbb,
		0xa4, 0x10, 0x75, 0x76, 0x13, 0xa7, 0x14, 0x6a, 0xa1, 0xad, 0x39, 0x77, 0x26, 0x69, 0xca, 0xd5,
		0x74, 0xf8, 0xd2, 0xd4, 0x99, 0x02, 0xc4, 0x6f, 0xa4, 0x33, 0x5c, 0xa1, 0x6c, 0xfe, 0x85, 0x8c,
		0xb4, 0xa5, 0x26, 0xff, 0x22, 0x46, 0xdb, 0x94, 0xef, 0x09, 0xa3, 0x37, 0xd0, 0x01, 0x05, 0x1e,
		0x0a, 0x8c, 0xde, 0x18, 0xe9, 0xf3, 0x00, 0x79, 0x21, 0xaa, 0xfc, 0x65, 0xf9, 0xd1, 0x6b, 0x49,
		0xc7, 0xdb, 0x46, 0x84, 0xe4, 0xdf, 0x7f, 0x3c, 0x90, 0x07, 0x2a, 0x04, 0xb3, 0x7b, 0xb2, 0x5a,
		0xbc, 0x8e, 0x5a, 0x7c, 0xdb, 0xb4, 0xf8, 0x32, 0x33, 0x62, 0xf4, 0x60, 0xbf, 0xe3, 0xc9, 0x8f,
		0xda, 0x70, 0x4e, 0xe4, 0x4f, 0x51, 0x9c, 0x65, 0xc4, 0x5b, 0xfd, 0x17, 0xeb, 0xfb, 0x7d, 0x02,
		0x3b, 0x7d, 0x56, 0x92, 0x11, 0xc1, 0x0c, 0xa9, 0xc2, 0x98, 0x6a, 0x0c, 0xaa, 0xca, 0xa8, 0x99,
		0x19, 0x36, 0x33, 0xe3, 0x2a, 0x33, 0x30, 0x50, 0xf9, 0xca, 0xf2, 0x13, 0xf3, 0x60, 0xd3, 0x64,
		0x3a, 0xaf, 0x76, 0xb6, 0x03, 0xc6, 0x47, 0x2d, 0x64, 0x3f, 0x62, 0x3c, 0xd6, 0xc1, 0xfd, 0x8e,
		0x47, 0x86, 0xad, 0x7e, 0xce, 0x53, 0xc6, 0x41, 0x42, 0x93, 0x55, 0x78, 0x72, 0x13, 0xa2, 0xdc,
		0x84, 0x29, 0xb3, 0x50, 0xc1, 0x84, 0x4b, 0xc1, 0x2a, 0x24, 0x78, 0xca, 0xb8, 0xc2, 0x74, 0xe2,
		0x29, 0xe3, 0x79, 0xf2, 0x5f, 0xe6, 0x55, 0xca, 0xaa, 0x87, 0x16, 0x4f, 0x19, 0x27, 0xab, 0x3c,
		0x65, 0x1c, 0x60, 0x56, 0xf9, 0x6e, 0x36, 0x8c, 0x8f, 0xe9, 0x73, 0x45, 0xf8, 0xa8, 0x4d, 0xc4,
		0x77, 0xc4, 0x77, 0xc4, 0x77, 0xc4, 0x77, 0xc4, 0x77, 0xc4, 0x77, 0xc4, 0xf7, 0xd5, 0x39, 0x06,
		0x24, 0x23, 0x02, 0xe6, 0xe8, 0x12, 0x76, 0xd9, 0x5f, 0x0c, 0x7e, 0x30, 0xfc, 0x3f, 0xc2, 0xf3,
		0x03, 0x79, 0x8f, 0x17, 0x49, 0xdc, 0x8c, 0xff, 0xdb, 0xe0, 0x4f, 0xc3, 0xff, 0xaf, 0xc2, 0x26,
		0x9f, 0x6e, 0x3b, 0x5e, 0x29, 0x27, 0xbf, 0x74, 0x36, 0x5f, 0x21, 0x70, 0xe4, 0xe4, 0x46, 0x4c,
		0xc6, 0x69, 0x2b, 0x31, 0x4a, 0xa5, 0x95, 0x79, 0xdc, 0xb5, 0x9e, 0xe7, 0xf8, 0x2e, 0xd4, 0xef,
		0x1e, 0x53, 0x01, 0xcb, 0x10, 0x8e, 0xea, 0x54, 0xc6, 0xd6, 0x61, 0xd8, 0x08, 0xaf, 0x92, 0x7f,
		0x85, 0xff, 0x92, 0x57, 0x66, 0x59, 0xc4, 0xb1, 0xad, 0x37, 0xe2, 0xea, 0x9e, 0x60, 0x06, 0x73,
		0x23, 0x6b, 0xb1, 0x65, 0x8b, 0x67, 0x4a, 0xfe, 0xbe, 0x7c, 0x20, 0xac, 0x1b, 0xd6, 0x93, 0xa0,
		0xb6, 0xde, 0xb1, 0x28, 0xe9, 0x32, 0x6a, 0x99, 0x84, 0x71, 0xc2, 0xa9, 0x20, 0xc2, 0x21, 0x3f,
		0x3c, 0x9f, 0xa2, 0x2b, 0xff, 0xd3, 0xbb, 0xf2, 0x41, 0x7c, 0x9d, 0x85, 0xbf, 0xd3, 0xf8, 0x7c,
		0x98, 0x44, 0x36, 0xc9, 0xe5, 0x40, 0x0f, 0x7f, 0x0d, 0x3d, 0xfc, 0x9f, 0xdd, 0xc3, 0x0f, 0x5e,
		0x94, 0x28, 0xe4, 0x95, 0xcd, 0xa9, 0xc5, 0x53, 0x58, 0x55, 0xa7, 0x08, 0xf9, 0xcc, 0x5e, 0x73,
		0x52, 0x6a, 0x92, 0x3e, 0x2f, 0x4b, 0x34, 0x03, 0x60, 0xbc, 0x84, 0xea, 0x8c, 0xf0, 0x01, 0x2e,
		0xfb, 0x31, 0x9d, 0x9a, 0xd4, 0x5f, 0x47, 0xa0, 0x14, 0x46, 0x06, 0xa9, 0x48, 0xfe, 0x15, 0xed,
		0xea, 0xbe, 0x15, 0x1d, 0x15, 0xb1, 0x1c, 0xc8, 0x50, 0x61, 0xa0, 0xc2, 0xc8, 0x4d, 0x61, 0x74,
		0x1c, 0xc7, 0xa2, 0xba, 0xad, 0xa2, 0x30, 0xea, 0x85, 0x30, 0xdd, 0xe3, 0x88, 0x6f, 0x88, 0x6d,
		0x2a, 0x15, 0x03, 0x3e, 0xe9, 0xf0, 0x90, 0x8b, 0x05, 0x9f, 0x5c, 0xc7, 0x2b, 0xc7, 0x84, 0x8f,
		0x1a, 0x91, 0x8a, 0x0d, 0xdf, 0xe8, 0xfa, 0x46, 0xda, 0x50, 0x92, 0x59, 0xe5, 0x84, 0xeb, 0x80,
		0x12, 0x96, 0x86, 0xc1, 0xc0, 0xd1, 0x2d, 0x5e, 0xa7, 0x60, 0x61, 0x98, 0x1c, 0x5d, 0x92, 0x18,
		0x33, 0x3a, 0x3f, 0x14, 0x58, 0x18, 0x66, 0x68, 0xe5, 0x17, 0xaa, 0x30, 0xcc, 0xdf, 0x97, 0x0f,
		0xa8, 0xd4, 0x77, 0x55, 0xa9, 0x63, 0x21, 0x18, 0x15, 0x09, 0xed, 0x32, 0x4b, 0x50, 0x4f, 0x5e,
		0x3a, 0xe3, 0xe7, 0x55, 0xbd, 0xca, 0xba, 0xeb, 0x5a, 0xcc, 0x08, 0x2d, 0x5c, 0x1e, 0xc8, 0xaa,
		0x6e, 0x59, 0xce, 0x2b, 0xd1, 0x6d, 0xf3, 0xc0, 0xf1, 0x88, 0x49, 0xed, 0xb7, 0x2a, 0xf9, 0xd3,
		0xb7, 0x28, 0x27, 0xba, 0x47, 0x09, 0xfd, 0x45, 0x0d, 0x5f, 0x50, 0x33, 0xf4, 0x2f, 0xbb, 0x1e,
		0x73, 0x3c, 0x26, 0xde, 0x88, 0x13, 0x18, 0xdc, 0x55, 0xf2, 0xe3, 0x99, 0x92, 0x2e, 0xf3, 0xb8,
		0x20, 0x9e, 0x6f, 0x85, 0x06, 0x5c, 0x5f, 0x17, 0xc6, 0x73, 0xe4, 0xa1, 0x36, 0xa9, 0xa0, 0x5e,
		0x9f, 0xd9, 0x34, 0xf4, 0x45, 0x77, 0x75, 0x41, 0x5b, 0xb6, 0x13, 0x39, 0xa6, 0x5d, 0xdd, 0xf8,
		0x49, 0x45, 0x15, 0x9d, 0xd0, 0x9f, 0xde, 0x09, 0x1d, 0xf2, 0x1e, 0xdc, 0x03, 0x15, 0x91, 0xa9,
		0x39, 0xa0, 0x2e, 0x42, 0x76, 0x8f, 0x59, 0x3d, 0xc2, 0xa4, 0x09, 0x89, 0x40, 0x37, 0x14, 0xba,
		0xa1, 0xd0, 0x0d, 0x95, 0x87, 0x77, 0x79, 0x52, 0xa8, 0xe0, 0x02, 0xae, 0x22, 0x91, 0x89, 0x96,
		0xa8, 0x42, 0x4b, 0x28, 0xa4, 0x28, 0xa4, 0x60, 0x7b, 0x36, 0x07, 0xc1, 0x5e, 0xf7, 0x86, 0x94,
		0xee, 0xba, 0xcd, 0x09, 0xf1, 0x48, 0xfc, 0xbc, 0xde, 0x1d, 0xa9, 0xa1, 0x81, 0x09, 0x57, 0x18,
		0x23, 0x4a, 0x35, 0x6d, 0x71, 0x3f, 0xb2, 0x6c, 0xbb, 0x79, 0x98, 0x04, 0x35, 0x54, 0x35, 0xa8,
		0x6a, 0xd6, 0x65, 0x0f, 0xf8, 0xcc, 0x16, 0x5f, 0x15, 0x94, 0x06, 0x20, 0x36, 0x51, 0x31, 0x84,
		0x76, 0x4b, 0xcf, 0xee, 0xaa, 0xe1, 0xd9, 0x5d, 0xd0, 0x21, 0x3b, 0x6c, 0x34, 0x76, 0xf0, 0xec,
		0xae, 0x22, 0x6d, 0xda, 0xca, 0x03, 0x12, 0xee, 0xd9, 0x2e, 0xfd, 0xf1, 0x25, 0x7b, 0xb6, 0x52,
		0x0e, 0x36, 0xb2, 0x74, 0xb7, 0xf6, 0x5b, 0xd4, 0xcc, 0x36, 0x97, 0x8e, 0x7e, 0x31, 0x78, 0x15,
		0xdd, 0xf5, 0xb8, 0x07, 0x3b, 0x51, 0x3c, 0x0c, 0x0b, 0x47, 0x2f, 0xc1, 0x42, 0xdc, 0x83, 0xc5,
		0xc2, 0xd1, 0xb3, 0x04, 0x3b, 0x5a, 0x38, 0x9a, 0x03, 0x70, 0x88, 0x43, 0x71, 0xe8, 0xc1, 0x62,
		0x06, 0x25, 0x26, 0xeb, 0x76, 0xa9, 0x47, 0x6d, 0xc1, 0x74, 0xe1, 0x78, 0x55, 0x72, 0xd3, 0xef,
		0xfb, 0x42, 0xef, 0x58, 0x14, 0x71, 0x09, 0xb7, 0x91, 0xd5, 0xe2, 0x88, 0x20, 0xf8, 0x75, 0x8a,
		0xd5, 0xa3, 0x3f, 0x2d, 0x7a, 0xd5, 0x4f, 0x4e, 0x4f, 0x4f, 0x0f, 0xeb, 0x0d, 0x8c, 0x23, 0x0a,
		0x75, 0xbd, 0x05, 0x2a, 0x3c, 0x17, 0x3d, 0x0e, 0xaf, 0x3b, 0x17, 0x69, 0x7d, 0x2c, 0x3b, 0x87,
		0x61, 0x02, 0x13, 0x0f, 0x62, 0xd9, 0x39, 0x74, 0xe6, 0x93, 0x95, 0x30, 0x30, 0x50, 0xf3, 0x7e,
		0x8a, 0xb2, 0x73, 0x91, 0x0a, 0xc6, 0xaa, 0x73, 0x58, 0x95, 0x26, 0x9b, 0x4c, 0x29, 0xfa, 0xe7,
		0xb1, 0x2a, 0x4d, 0xae, 0xab, 0x88, 0x5c, 0x56, 0x15, 0x39, 0xc9, 0x73, 0x5e, 0xab, 0x8e, 0x3c,
		0x6d, 0xee, 0x8c, 0xfc, 0x97, 0x79, 0x95, 0xb2, 0xea, 0xa1, 0xc5, 0xaa, 0x34, 0x04, 0xab, 0xce,
		0xa5, 0x01, 0x3c, 0x16, 0x9d, 0x43, 0x78, 0x47, 0x78, 0x47, 0x78, 0x47, 0x78, 0x47, 0x78, 0x47,
		0x78, 0x5f, 0xb5, 0x5b, 0x60, 0x45, 0x45, 0xe7, 0x42, 0x57, 0x6b, 0xae, 0x35, 0xe7, 0x42, 0x03,
		0x61, 0x67, 0x4b, 0xce, 0xc9, 0xb8, 0xa6, 0x25, 0xc7, 0x68, 0x15, 0xc1, 0x3d, 0x9c, 0x03, 0x0e,
		0xe3, 0x0d, 0x1e, 0x56, 0xd8, 0x56, 0x3d, 0x78, 0x88, 0x8e, 0x70, 0x23, 0xe2, 0xcd, 0xa5, 0xb8,
		0xa9, 0x8a, 0x9b, 0xaa, 0x8a, 0x46, 0x17, 0x80, 0x0f, 0x09, 0x2c, 0xf4, 0x78, 0xb7, 0x76, 0x55,
		0x31, 0x26, 0x48, 0x3d, 0x54, 0x78, 0x57, 0x37, 0x54, 0x05, 0xed, 0xbb, 0x56, 0xb0, 0x30, 0x91,
		0x56, 0xf6, 0x23, 0x0a, 0xb5, 0xa2, 0x0c, 0x3e, 0xa7, 0x1e, 0x79, 0x31, 0x38, 0x19, 0xb6, 0x13,
		0xd5, 0x66, 0x78, 0xd5, 0x79, 0xf0, 0x95, 0x19, 0x3c, 0xc2, 0x6c, 0x26, 0x98, 0x6e, 0xb1, 0xff,
		0xd0, 0x96, 0x8d, 0xe5, 0x1a, 0x30, 0xfe, 0x73, 0x76, 0x9c, 0x57, 0x5d, 0x82, 0xe1, 0x45, 0x34,
		0x87, 0xcc, 0x39, 0x7b, 0xbd, 0x9a, 0xda, 0x0b, 0xc2, 0xd3, 0xbb, 0x5d, 0x66, 0x68, 0x86, 0xa5,
		0x73, 0x0e, 0x90, 0xc4, 0x29, 0x32, 0x35, 0x71, 0x8c, 0xdb, 0x20, 0x52, 0x6d, 0xa0, 0x90, 0xa1,
		0xdd, 0xb5, 0x09, 0x81, 0x14, 0x46, 0x73, 0x8a, 0xd7, 0x13, 0x6f, 0xac, 0x46, 0x34, 0x7d, 0xb7,
		0x2b, 0x2f, 0x90, 0x8b, 0x8f, 0x67, 0x5f, 0x8a, 0x8a, 0xae, 0xa5, 0xdb, 0x31, 0x1c, 0xb2, 0xbe,
		0x1b, 0x27, 0xb7, 0x0c, 0x53, 0x20, 0xba, 0x28, 0x9c, 0x88, 0x80, 0xeb, 0x12, 0x38, 0xdf, 0xed,
		0x36, 0xe3, 0x73, 0xfb, 0x47, 0xff, 0x66, 0x90, 0x2f, 0xd0, 0x69, 0xe2, 0x71, 0xaa, 0x59, 0x6a,
		0x82, 0x87, 0x5c, 0x66, 0x99, 0x7c, 0x46, 0x59, 0xa6, 0x4c, 0x32, 0xb9, 0x0c, 0xb2, 0xb4, 0xae,
		0x4a, 0xba, 0x94, 0x96, 0xb8, 0x92, 0x16, 0x1d, 0x3d, 0xbf, 0xc8, 0x79, 0x94, 0x3c, 0x9d, 0xf3,
		0x93, 0x35, 0x7d, 0x67, 0xa6, 0x2f, 0xcb, 0xfa, 0xb0, 0xe0, 0xdd, 0x13, 0xde, 0x3b, 0xf5, 0x7d,
		0xa7, 0xdf, 0x75, 0xfc, 0x46, 0xd1, 0x55, 0xfc, 0x4e, 0x69, 0xef, 0x52, 0x62, 0xfc, 0x9b, 0xfe,
		0x93, 0xfe, 0xe9, 0x38, 0xf3, 0x6a, 0x60, 0xf6, 0xfd, 0x4a, 0x93, 0x5f, 0x4d, 0xbd, 0xcc, 0xe4,
		0xe1, 0x0e, 0x83, 0x2f, 0x83, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff,
		0xd8, 0x8e, 0xa0, 0xd1, 0x5b, 0xd7, 0x02, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
}

