// Code generated by YGOT. DO NOT EDIT.
/*
Package aether_2_2_0 is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/scondon/go/pkg/mod/github.com/openconfig/ygot@v0.10.5/genutil/names.go
using the following YANG input files:
	- aether-subscriber@2020-10-22.yang
	- apn-profile@2021-03-04.yang
	- up-profile@2020-10-22.yang
	- qos-profile@2020-10-22.yang
	- access-profile@2020-10-22.yang
	- security-profile@2021-05-10.yang
	- enterprise@2020-11-30.yang
	- connectivity-service@2021-03-18.yang
	- service-group@2021-03-04.yang
	- service-policy@2021-03-04.yang
	- service-rule@2021-03-04.yang
Imported modules were sourced from:
	- ../../../sdran-helm-charts/config-models/aether-2.2.x/files/yang/...
*/
package aether_2_2_0

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Device{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// AccessProfile_AccessProfile represents the /access-profile/access-profile YANG schema element.
type AccessProfile_AccessProfile struct {
	AccessProfile	map[string]*AccessProfile_AccessProfile_AccessProfile	`path:"access-profile" module:"access-profile"`
}

// IsYANGGoStruct ensures that AccessProfile_AccessProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*AccessProfile_AccessProfile) IsYANGGoStruct() {}

// NewAccessProfile creates a new entry in the AccessProfile list of the
// AccessProfile_AccessProfile struct. The keys of the list are populated from the input
// arguments.
func (t *AccessProfile_AccessProfile) NewAccessProfile(Id string) (*AccessProfile_AccessProfile_AccessProfile, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AccessProfile == nil {
		t.AccessProfile = make(map[string]*AccessProfile_AccessProfile_AccessProfile)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AccessProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AccessProfile", key)
	}

	t.AccessProfile[key] = &AccessProfile_AccessProfile_AccessProfile{
		Id: &Id,
	}

	return t.AccessProfile[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *AccessProfile_AccessProfile) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["AccessProfile_AccessProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *AccessProfile_AccessProfile) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// AccessProfile_AccessProfile_AccessProfile represents the /access-profile/access-profile/access-profile YANG schema element.
type AccessProfile_AccessProfile_AccessProfile struct {
	Description	*string	`path:"description" module:"access-profile"`
	DisplayName	*string	`path:"display-name" module:"access-profile"`
	Filter	*string	`path:"filter" module:"access-profile"`
	Id	*string	`path:"id" module:"access-profile"`
	Type	*string	`path:"type" module:"access-profile"`
}

// IsYANGGoStruct ensures that AccessProfile_AccessProfile_AccessProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*AccessProfile_AccessProfile_AccessProfile) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the AccessProfile_AccessProfile_AccessProfile struct, which is a YANG list entry.
func (t *AccessProfile_AccessProfile_AccessProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *AccessProfile_AccessProfile_AccessProfile) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["AccessProfile_AccessProfile_AccessProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *AccessProfile_AccessProfile_AccessProfile) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// AetherSubscriber_Subscriber represents the /aether-subscriber/subscriber YANG schema element.
type AetherSubscriber_Subscriber struct {
	Ue	map[string]*AetherSubscriber_Subscriber_Ue	`path:"ue" module:"aether-subscriber"`
}

// IsYANGGoStruct ensures that AetherSubscriber_Subscriber implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*AetherSubscriber_Subscriber) IsYANGGoStruct() {}

// NewUe creates a new entry in the Ue list of the
// AetherSubscriber_Subscriber struct. The keys of the list are populated from the input
// arguments.
func (t *AetherSubscriber_Subscriber) NewUe(Id string) (*AetherSubscriber_Subscriber_Ue, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ue == nil {
		t.Ue = make(map[string]*AetherSubscriber_Subscriber_Ue)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ue", key)
	}

	t.Ue[key] = &AetherSubscriber_Subscriber_Ue{
		Id: &Id,
	}

	return t.Ue[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *AetherSubscriber_Subscriber) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["AetherSubscriber_Subscriber"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *AetherSubscriber_Subscriber) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// AetherSubscriber_Subscriber_Ue represents the /aether-subscriber/subscriber/ue YANG schema element.
type AetherSubscriber_Subscriber_Ue struct {
	DisplayName	*string	`path:"display-name" module:"aether-subscriber"`
	Enabled	*bool	`path:"enabled" module:"aether-subscriber"`
	Enterprise	*string	`path:"enterprise" module:"aether-subscriber"`
	Id	*string	`path:"id" module:"aether-subscriber"`
	ImsiRangeFrom	*uint64	`path:"imsi-range-from" module:"aether-subscriber"`
	ImsiRangeTo	*uint64	`path:"imsi-range-to" module:"aether-subscriber"`
	ImsiWildcard	*string	`path:"imsi-wildcard" module:"aether-subscriber"`
	Priority	*uint32	`path:"priority" module:"aether-subscriber"`
	Profiles	*AetherSubscriber_Subscriber_Ue_Profiles	`path:"profiles" module:"aether-subscriber"`
	RequestedApn	*string	`path:"requested-apn" module:"aether-subscriber"`
	ServingPlmn	*AetherSubscriber_Subscriber_Ue_ServingPlmn	`path:"serving-plmn" module:"aether-subscriber"`
}

// IsYANGGoStruct ensures that AetherSubscriber_Subscriber_Ue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*AetherSubscriber_Subscriber_Ue) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the AetherSubscriber_Subscriber_Ue struct, which is a YANG list entry.
func (t *AetherSubscriber_Subscriber_Ue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *AetherSubscriber_Subscriber_Ue) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["AetherSubscriber_Subscriber_Ue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *AetherSubscriber_Subscriber_Ue) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// AetherSubscriber_Subscriber_Ue_Profiles represents the /aether-subscriber/subscriber/ue/profiles YANG schema element.
type AetherSubscriber_Subscriber_Ue_Profiles struct {
	AccessProfile	map[string]*AetherSubscriber_Subscriber_Ue_Profiles_AccessProfile	`path:"access-profile" module:"aether-subscriber"`
	ApnProfile	*string	`path:"apn-profile" module:"aether-subscriber"`
	QosProfile	*string	`path:"qos-profile" module:"aether-subscriber"`
	SecurityProfile	*string	`path:"security-profile" module:"aether-subscriber"`
	UpProfile	*string	`path:"up-profile" module:"aether-subscriber"`
}

// IsYANGGoStruct ensures that AetherSubscriber_Subscriber_Ue_Profiles implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*AetherSubscriber_Subscriber_Ue_Profiles) IsYANGGoStruct() {}

// NewAccessProfile creates a new entry in the AccessProfile list of the
// AetherSubscriber_Subscriber_Ue_Profiles struct. The keys of the list are populated from the input
// arguments.
func (t *AetherSubscriber_Subscriber_Ue_Profiles) NewAccessProfile(AccessProfile string) (*AetherSubscriber_Subscriber_Ue_Profiles_AccessProfile, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AccessProfile == nil {
		t.AccessProfile = make(map[string]*AetherSubscriber_Subscriber_Ue_Profiles_AccessProfile)
	}

	key := AccessProfile

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AccessProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AccessProfile", key)
	}

	t.AccessProfile[key] = &AetherSubscriber_Subscriber_Ue_Profiles_AccessProfile{
		AccessProfile: &AccessProfile,
	}

	return t.AccessProfile[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *AetherSubscriber_Subscriber_Ue_Profiles) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["AetherSubscriber_Subscriber_Ue_Profiles"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *AetherSubscriber_Subscriber_Ue_Profiles) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// AetherSubscriber_Subscriber_Ue_Profiles_AccessProfile represents the /aether-subscriber/subscriber/ue/profiles/access-profile YANG schema element.
type AetherSubscriber_Subscriber_Ue_Profiles_AccessProfile struct {
	AccessProfile	*string	`path:"access-profile" module:"aether-subscriber"`
	Allowed	*bool	`path:"allowed" module:"aether-subscriber"`
}

// IsYANGGoStruct ensures that AetherSubscriber_Subscriber_Ue_Profiles_AccessProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*AetherSubscriber_Subscriber_Ue_Profiles_AccessProfile) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the AetherSubscriber_Subscriber_Ue_Profiles_AccessProfile struct, which is a YANG list entry.
func (t *AetherSubscriber_Subscriber_Ue_Profiles_AccessProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AccessProfile == nil {
		return nil, fmt.Errorf("nil value for key AccessProfile")
	}

	return map[string]interface{}{
		"access-profile": *t.AccessProfile,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *AetherSubscriber_Subscriber_Ue_Profiles_AccessProfile) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["AetherSubscriber_Subscriber_Ue_Profiles_AccessProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *AetherSubscriber_Subscriber_Ue_Profiles_AccessProfile) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// AetherSubscriber_Subscriber_Ue_ServingPlmn represents the /aether-subscriber/subscriber/ue/serving-plmn YANG schema element.
type AetherSubscriber_Subscriber_Ue_ServingPlmn struct {
	Mcc	*uint32	`path:"mcc" module:"aether-subscriber"`
	Mnc	*uint32	`path:"mnc" module:"aether-subscriber"`
	Tac	*uint32	`path:"tac" module:"aether-subscriber"`
}

// IsYANGGoStruct ensures that AetherSubscriber_Subscriber_Ue_ServingPlmn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*AetherSubscriber_Subscriber_Ue_ServingPlmn) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *AetherSubscriber_Subscriber_Ue_ServingPlmn) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["AetherSubscriber_Subscriber_Ue_ServingPlmn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *AetherSubscriber_Subscriber_Ue_ServingPlmn) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ApnProfile_ApnProfile represents the /apn-profile/apn-profile YANG schema element.
type ApnProfile_ApnProfile struct {
	ApnProfile	map[string]*ApnProfile_ApnProfile_ApnProfile	`path:"apn-profile" module:"apn-profile"`
}

// IsYANGGoStruct ensures that ApnProfile_ApnProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ApnProfile_ApnProfile) IsYANGGoStruct() {}

// NewApnProfile creates a new entry in the ApnProfile list of the
// ApnProfile_ApnProfile struct. The keys of the list are populated from the input
// arguments.
func (t *ApnProfile_ApnProfile) NewApnProfile(Id string) (*ApnProfile_ApnProfile_ApnProfile, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ApnProfile == nil {
		t.ApnProfile = make(map[string]*ApnProfile_ApnProfile_ApnProfile)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ApnProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ApnProfile", key)
	}

	t.ApnProfile[key] = &ApnProfile_ApnProfile_ApnProfile{
		Id: &Id,
	}

	return t.ApnProfile[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ApnProfile_ApnProfile) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ApnProfile_ApnProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ApnProfile_ApnProfile) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ApnProfile_ApnProfile_ApnProfile represents the /apn-profile/apn-profile/apn-profile YANG schema element.
type ApnProfile_ApnProfile_ApnProfile struct {
	ApnName	*string	`path:"apn-name" module:"apn-profile"`
	Description	*string	`path:"description" module:"apn-profile"`
	DisplayName	*string	`path:"display-name" module:"apn-profile"`
	DnsPrimary	*string	`path:"dns-primary" module:"apn-profile"`
	DnsSecondary	*string	`path:"dns-secondary" module:"apn-profile"`
	GxEnabled	*bool	`path:"gx-enabled" module:"apn-profile"`
	Id	*string	`path:"id" module:"apn-profile"`
	Mtu	*uint32	`path:"mtu" module:"apn-profile"`
	ServiceGroup	*string	`path:"service-group" module:"apn-profile"`
}

// IsYANGGoStruct ensures that ApnProfile_ApnProfile_ApnProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ApnProfile_ApnProfile_ApnProfile) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the ApnProfile_ApnProfile_ApnProfile struct, which is a YANG list entry.
func (t *ApnProfile_ApnProfile_ApnProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ApnProfile_ApnProfile_ApnProfile) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ApnProfile_ApnProfile_ApnProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ApnProfile_ApnProfile_ApnProfile) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ConnectivityService_ConnectivityService represents the /connectivity-service/connectivity-service YANG schema element.
type ConnectivityService_ConnectivityService struct {
	ConnectivityService	map[string]*ConnectivityService_ConnectivityService_ConnectivityService	`path:"connectivity-service" module:"connectivity-service"`
}

// IsYANGGoStruct ensures that ConnectivityService_ConnectivityService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ConnectivityService_ConnectivityService) IsYANGGoStruct() {}

// NewConnectivityService creates a new entry in the ConnectivityService list of the
// ConnectivityService_ConnectivityService struct. The keys of the list are populated from the input
// arguments.
func (t *ConnectivityService_ConnectivityService) NewConnectivityService(Id string) (*ConnectivityService_ConnectivityService_ConnectivityService, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ConnectivityService == nil {
		t.ConnectivityService = make(map[string]*ConnectivityService_ConnectivityService_ConnectivityService)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ConnectivityService[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ConnectivityService", key)
	}

	t.ConnectivityService[key] = &ConnectivityService_ConnectivityService_ConnectivityService{
		Id: &Id,
	}

	return t.ConnectivityService[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ConnectivityService_ConnectivityService) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ConnectivityService_ConnectivityService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ConnectivityService_ConnectivityService) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ConnectivityService_ConnectivityService_ConnectivityService represents the /connectivity-service/connectivity-service/connectivity-service YANG schema element.
type ConnectivityService_ConnectivityService_ConnectivityService struct {
	Description	*string	`path:"description" module:"connectivity-service"`
	DisplayName	*string	`path:"display-name" module:"connectivity-service"`
	HssEndpoint	*string	`path:"hss-endpoint" module:"connectivity-service"`
	Id	*string	`path:"id" module:"connectivity-service"`
	PcrfEndpoint	*string	`path:"pcrf-endpoint" module:"connectivity-service"`
	SpgwcEndpoint	*string	`path:"spgwc-endpoint" module:"connectivity-service"`
}

// IsYANGGoStruct ensures that ConnectivityService_ConnectivityService_ConnectivityService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ConnectivityService_ConnectivityService_ConnectivityService) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the ConnectivityService_ConnectivityService_ConnectivityService struct, which is a YANG list entry.
func (t *ConnectivityService_ConnectivityService_ConnectivityService) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ConnectivityService_ConnectivityService_ConnectivityService) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ConnectivityService_ConnectivityService_ConnectivityService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ConnectivityService_ConnectivityService_ConnectivityService) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Device represents the /device YANG schema element.
type Device struct {
	AccessProfile	*AccessProfile_AccessProfile	`path:"access-profile" module:"access-profile"`
	ApnProfile	*ApnProfile_ApnProfile	`path:"apn-profile" module:"apn-profile"`
	ConnectivityService	*ConnectivityService_ConnectivityService	`path:"connectivity-service" module:"connectivity-service"`
	Enterprise	*Enterprise_Enterprise	`path:"enterprise" module:"enterprise"`
	QosProfile	*QosProfile_QosProfile	`path:"qos-profile" module:"qos-profile"`
	SecurityProfile	*SecurityProfile_SecurityProfile	`path:"security-profile" module:"security-profile"`
	ServiceGroup	*ServiceGroup_ServiceGroup	`path:"service-group" module:"service-group"`
	ServicePolicy	*ServicePolicy_ServicePolicy	`path:"service-policy" module:"service-policy"`
	ServiceRule	*ServiceRule_ServiceRule	`path:"service-rule" module:"service-rule"`
	Subscriber	*AetherSubscriber_Subscriber	`path:"subscriber" module:"aether-subscriber"`
	UpProfile	*UpProfile_UpProfile	`path:"up-profile" module:"up-profile"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Enterprise_Enterprise represents the /enterprise/enterprise YANG schema element.
type Enterprise_Enterprise struct {
	Enterprise	map[string]*Enterprise_Enterprise_Enterprise	`path:"enterprise" module:"enterprise"`
}

// IsYANGGoStruct ensures that Enterprise_Enterprise implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Enterprise_Enterprise) IsYANGGoStruct() {}

// NewEnterprise creates a new entry in the Enterprise list of the
// Enterprise_Enterprise struct. The keys of the list are populated from the input
// arguments.
func (t *Enterprise_Enterprise) NewEnterprise(Id string) (*Enterprise_Enterprise_Enterprise, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Enterprise == nil {
		t.Enterprise = make(map[string]*Enterprise_Enterprise_Enterprise)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Enterprise[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Enterprise", key)
	}

	t.Enterprise[key] = &Enterprise_Enterprise_Enterprise{
		Id: &Id,
	}

	return t.Enterprise[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Enterprise_Enterprise) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Enterprise_Enterprise"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Enterprise_Enterprise) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Enterprise_Enterprise_Enterprise represents the /enterprise/enterprise/enterprise YANG schema element.
type Enterprise_Enterprise_Enterprise struct {
	ConnectivityService	map[string]*Enterprise_Enterprise_Enterprise_ConnectivityService	`path:"connectivity-service" module:"enterprise"`
	Description	*string	`path:"description" module:"enterprise"`
	DisplayName	*string	`path:"display-name" module:"enterprise"`
	Id	*string	`path:"id" module:"enterprise"`
}

// IsYANGGoStruct ensures that Enterprise_Enterprise_Enterprise implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Enterprise_Enterprise_Enterprise) IsYANGGoStruct() {}

// NewConnectivityService creates a new entry in the ConnectivityService list of the
// Enterprise_Enterprise_Enterprise struct. The keys of the list are populated from the input
// arguments.
func (t *Enterprise_Enterprise_Enterprise) NewConnectivityService(ConnectivityService string) (*Enterprise_Enterprise_Enterprise_ConnectivityService, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ConnectivityService == nil {
		t.ConnectivityService = make(map[string]*Enterprise_Enterprise_Enterprise_ConnectivityService)
	}

	key := ConnectivityService

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ConnectivityService[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ConnectivityService", key)
	}

	t.ConnectivityService[key] = &Enterprise_Enterprise_Enterprise_ConnectivityService{
		ConnectivityService: &ConnectivityService,
	}

	return t.ConnectivityService[key], nil
}

// ΛListKeyMap returns the keys of the Enterprise_Enterprise_Enterprise struct, which is a YANG list entry.
func (t *Enterprise_Enterprise_Enterprise) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Enterprise_Enterprise_Enterprise) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Enterprise_Enterprise_Enterprise"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Enterprise_Enterprise_Enterprise) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Enterprise_Enterprise_Enterprise_ConnectivityService represents the /enterprise/enterprise/enterprise/connectivity-service YANG schema element.
type Enterprise_Enterprise_Enterprise_ConnectivityService struct {
	ConnectivityService	*string	`path:"connectivity-service" module:"enterprise"`
	Enabled	*bool	`path:"enabled" module:"enterprise"`
}

// IsYANGGoStruct ensures that Enterprise_Enterprise_Enterprise_ConnectivityService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Enterprise_Enterprise_Enterprise_ConnectivityService) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Enterprise_Enterprise_Enterprise_ConnectivityService struct, which is a YANG list entry.
func (t *Enterprise_Enterprise_Enterprise_ConnectivityService) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ConnectivityService == nil {
		return nil, fmt.Errorf("nil value for key ConnectivityService")
	}

	return map[string]interface{}{
		"connectivity-service": *t.ConnectivityService,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Enterprise_Enterprise_Enterprise_ConnectivityService) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Enterprise_Enterprise_Enterprise_ConnectivityService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Enterprise_Enterprise_Enterprise_ConnectivityService) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// QosProfile_QosProfile represents the /qos-profile/qos-profile YANG schema element.
type QosProfile_QosProfile struct {
	QosProfile	map[string]*QosProfile_QosProfile_QosProfile	`path:"qos-profile" module:"qos-profile"`
}

// IsYANGGoStruct ensures that QosProfile_QosProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*QosProfile_QosProfile) IsYANGGoStruct() {}

// NewQosProfile creates a new entry in the QosProfile list of the
// QosProfile_QosProfile struct. The keys of the list are populated from the input
// arguments.
func (t *QosProfile_QosProfile) NewQosProfile(Id string) (*QosProfile_QosProfile_QosProfile, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QosProfile == nil {
		t.QosProfile = make(map[string]*QosProfile_QosProfile_QosProfile)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QosProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QosProfile", key)
	}

	t.QosProfile[key] = &QosProfile_QosProfile_QosProfile{
		Id: &Id,
	}

	return t.QosProfile[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *QosProfile_QosProfile) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["QosProfile_QosProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *QosProfile_QosProfile) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// QosProfile_QosProfile_QosProfile represents the /qos-profile/qos-profile/qos-profile YANG schema element.
type QosProfile_QosProfile_QosProfile struct {
	ApnAmbr	*QosProfile_QosProfile_QosProfile_ApnAmbr	`path:"apn-ambr" module:"qos-profile"`
	Arp	*QosProfile_QosProfile_QosProfile_Arp	`path:"arp" module:"qos-profile"`
	Description	*string	`path:"description" module:"qos-profile"`
	DisplayName	*string	`path:"display-name" module:"qos-profile"`
	Id	*string	`path:"id" module:"qos-profile"`
	Qci	*uint32	`path:"qci" module:"qos-profile"`
}

// IsYANGGoStruct ensures that QosProfile_QosProfile_QosProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*QosProfile_QosProfile_QosProfile) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the QosProfile_QosProfile_QosProfile struct, which is a YANG list entry.
func (t *QosProfile_QosProfile_QosProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *QosProfile_QosProfile_QosProfile) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["QosProfile_QosProfile_QosProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *QosProfile_QosProfile_QosProfile) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// QosProfile_QosProfile_QosProfile_ApnAmbr represents the /qos-profile/qos-profile/qos-profile/apn-ambr YANG schema element.
type QosProfile_QosProfile_QosProfile_ApnAmbr struct {
	Downlink	*uint32	`path:"downlink" module:"qos-profile"`
	Uplink	*uint32	`path:"uplink" module:"qos-profile"`
}

// IsYANGGoStruct ensures that QosProfile_QosProfile_QosProfile_ApnAmbr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*QosProfile_QosProfile_QosProfile_ApnAmbr) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *QosProfile_QosProfile_QosProfile_ApnAmbr) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["QosProfile_QosProfile_QosProfile_ApnAmbr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *QosProfile_QosProfile_QosProfile_ApnAmbr) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// QosProfile_QosProfile_QosProfile_Arp represents the /qos-profile/qos-profile/qos-profile/arp YANG schema element.
type QosProfile_QosProfile_QosProfile_Arp struct {
	PreemptionCapability	*bool	`path:"preemption-capability" module:"qos-profile"`
	PreemptionVulnerability	*bool	`path:"preemption-vulnerability" module:"qos-profile"`
	Priority	*uint32	`path:"priority" module:"qos-profile"`
}

// IsYANGGoStruct ensures that QosProfile_QosProfile_QosProfile_Arp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*QosProfile_QosProfile_QosProfile_Arp) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *QosProfile_QosProfile_QosProfile_Arp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["QosProfile_QosProfile_QosProfile_Arp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *QosProfile_QosProfile_QosProfile_Arp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SecurityProfile_SecurityProfile represents the /security-profile/security-profile YANG schema element.
type SecurityProfile_SecurityProfile struct {
	SecurityProfile	map[string]*SecurityProfile_SecurityProfile_SecurityProfile	`path:"security-profile" module:"security-profile"`
}

// IsYANGGoStruct ensures that SecurityProfile_SecurityProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SecurityProfile_SecurityProfile) IsYANGGoStruct() {}

// NewSecurityProfile creates a new entry in the SecurityProfile list of the
// SecurityProfile_SecurityProfile struct. The keys of the list are populated from the input
// arguments.
func (t *SecurityProfile_SecurityProfile) NewSecurityProfile(Id string) (*SecurityProfile_SecurityProfile_SecurityProfile, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SecurityProfile == nil {
		t.SecurityProfile = make(map[string]*SecurityProfile_SecurityProfile_SecurityProfile)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SecurityProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SecurityProfile", key)
	}

	t.SecurityProfile[key] = &SecurityProfile_SecurityProfile_SecurityProfile{
		Id: &Id,
	}

	return t.SecurityProfile[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SecurityProfile_SecurityProfile) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SecurityProfile_SecurityProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SecurityProfile_SecurityProfile) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SecurityProfile_SecurityProfile_SecurityProfile represents the /security-profile/security-profile/security-profile YANG schema element.
type SecurityProfile_SecurityProfile_SecurityProfile struct {
	Description	*string	`path:"description" module:"security-profile"`
	DisplayName	*string	`path:"display-name" module:"security-profile"`
	Id	*string	`path:"id" module:"security-profile"`
	ImsiRangeFrom	*uint64	`path:"imsi-range-from" module:"security-profile"`
	ImsiRangeTo	*uint64	`path:"imsi-range-to" module:"security-profile"`
	Key	*string	`path:"key" module:"security-profile"`
	Opc	*string	`path:"opc" module:"security-profile"`
	Sqn	*uint32	`path:"sqn" module:"security-profile"`
}

// IsYANGGoStruct ensures that SecurityProfile_SecurityProfile_SecurityProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SecurityProfile_SecurityProfile_SecurityProfile) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SecurityProfile_SecurityProfile_SecurityProfile struct, which is a YANG list entry.
func (t *SecurityProfile_SecurityProfile_SecurityProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SecurityProfile_SecurityProfile_SecurityProfile) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SecurityProfile_SecurityProfile_SecurityProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SecurityProfile_SecurityProfile_SecurityProfile) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ServiceGroup_ServiceGroup represents the /service-group/service-group YANG schema element.
type ServiceGroup_ServiceGroup struct {
	ServiceGroup	map[string]*ServiceGroup_ServiceGroup_ServiceGroup	`path:"service-group" module:"service-group"`
}

// IsYANGGoStruct ensures that ServiceGroup_ServiceGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ServiceGroup_ServiceGroup) IsYANGGoStruct() {}

// NewServiceGroup creates a new entry in the ServiceGroup list of the
// ServiceGroup_ServiceGroup struct. The keys of the list are populated from the input
// arguments.
func (t *ServiceGroup_ServiceGroup) NewServiceGroup(Id string) (*ServiceGroup_ServiceGroup_ServiceGroup, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServiceGroup == nil {
		t.ServiceGroup = make(map[string]*ServiceGroup_ServiceGroup_ServiceGroup)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ServiceGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ServiceGroup", key)
	}

	t.ServiceGroup[key] = &ServiceGroup_ServiceGroup_ServiceGroup{
		Id: &Id,
	}

	return t.ServiceGroup[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ServiceGroup_ServiceGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ServiceGroup_ServiceGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ServiceGroup_ServiceGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ServiceGroup_ServiceGroup_ServiceGroup represents the /service-group/service-group/service-group YANG schema element.
type ServiceGroup_ServiceGroup_ServiceGroup struct {
	Description	*string	`path:"description" module:"service-group"`
	DisplayName	*string	`path:"display-name" module:"service-group"`
	Id	*string	`path:"id" module:"service-group"`
	ServicePolicies	map[string]*ServiceGroup_ServiceGroup_ServiceGroup_ServicePolicies	`path:"service-policies" module:"service-group"`
}

// IsYANGGoStruct ensures that ServiceGroup_ServiceGroup_ServiceGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ServiceGroup_ServiceGroup_ServiceGroup) IsYANGGoStruct() {}

// NewServicePolicies creates a new entry in the ServicePolicies list of the
// ServiceGroup_ServiceGroup_ServiceGroup struct. The keys of the list are populated from the input
// arguments.
func (t *ServiceGroup_ServiceGroup_ServiceGroup) NewServicePolicies(ServicePolicy string) (*ServiceGroup_ServiceGroup_ServiceGroup_ServicePolicies, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServicePolicies == nil {
		t.ServicePolicies = make(map[string]*ServiceGroup_ServiceGroup_ServiceGroup_ServicePolicies)
	}

	key := ServicePolicy

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ServicePolicies[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ServicePolicies", key)
	}

	t.ServicePolicies[key] = &ServiceGroup_ServiceGroup_ServiceGroup_ServicePolicies{
		ServicePolicy: &ServicePolicy,
	}

	return t.ServicePolicies[key], nil
}

// ΛListKeyMap returns the keys of the ServiceGroup_ServiceGroup_ServiceGroup struct, which is a YANG list entry.
func (t *ServiceGroup_ServiceGroup_ServiceGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ServiceGroup_ServiceGroup_ServiceGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ServiceGroup_ServiceGroup_ServiceGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ServiceGroup_ServiceGroup_ServiceGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ServiceGroup_ServiceGroup_ServiceGroup_ServicePolicies represents the /service-group/service-group/service-group/service-policies YANG schema element.
type ServiceGroup_ServiceGroup_ServiceGroup_ServicePolicies struct {
	Kind	*string	`path:"kind" module:"service-group"`
	ServicePolicy	*string	`path:"service-policy" module:"service-group"`
}

// IsYANGGoStruct ensures that ServiceGroup_ServiceGroup_ServiceGroup_ServicePolicies implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ServiceGroup_ServiceGroup_ServiceGroup_ServicePolicies) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the ServiceGroup_ServiceGroup_ServiceGroup_ServicePolicies struct, which is a YANG list entry.
func (t *ServiceGroup_ServiceGroup_ServiceGroup_ServicePolicies) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ServicePolicy == nil {
		return nil, fmt.Errorf("nil value for key ServicePolicy")
	}

	return map[string]interface{}{
		"service-policy": *t.ServicePolicy,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ServiceGroup_ServiceGroup_ServiceGroup_ServicePolicies) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ServiceGroup_ServiceGroup_ServiceGroup_ServicePolicies"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ServiceGroup_ServiceGroup_ServiceGroup_ServicePolicies) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ServicePolicy_ServicePolicy represents the /service-policy/service-policy YANG schema element.
type ServicePolicy_ServicePolicy struct {
	ServicePolicy	map[string]*ServicePolicy_ServicePolicy_ServicePolicy	`path:"service-policy" module:"service-policy"`
}

// IsYANGGoStruct ensures that ServicePolicy_ServicePolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ServicePolicy_ServicePolicy) IsYANGGoStruct() {}

// NewServicePolicy creates a new entry in the ServicePolicy list of the
// ServicePolicy_ServicePolicy struct. The keys of the list are populated from the input
// arguments.
func (t *ServicePolicy_ServicePolicy) NewServicePolicy(Id string) (*ServicePolicy_ServicePolicy_ServicePolicy, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServicePolicy == nil {
		t.ServicePolicy = make(map[string]*ServicePolicy_ServicePolicy_ServicePolicy)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ServicePolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ServicePolicy", key)
	}

	t.ServicePolicy[key] = &ServicePolicy_ServicePolicy_ServicePolicy{
		Id: &Id,
	}

	return t.ServicePolicy[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ServicePolicy_ServicePolicy) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ServicePolicy_ServicePolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ServicePolicy_ServicePolicy) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ServicePolicy_ServicePolicy_ServicePolicy represents the /service-policy/service-policy/service-policy YANG schema element.
type ServicePolicy_ServicePolicy_ServicePolicy struct {
	Ambr	*ServicePolicy_ServicePolicy_ServicePolicy_Ambr	`path:"ambr" module:"service-policy"`
	Arp	*uint32	`path:"arp" module:"service-policy"`
	Description	*string	`path:"description" module:"service-policy"`
	DisplayName	*string	`path:"display-name" module:"service-policy"`
	Id	*string	`path:"id" module:"service-policy"`
	Qci	*uint32	`path:"qci" module:"service-policy"`
	Rules	map[string]*ServicePolicy_ServicePolicy_ServicePolicy_Rules	`path:"rules" module:"service-policy"`
}

// IsYANGGoStruct ensures that ServicePolicy_ServicePolicy_ServicePolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ServicePolicy_ServicePolicy_ServicePolicy) IsYANGGoStruct() {}

// NewRules creates a new entry in the Rules list of the
// ServicePolicy_ServicePolicy_ServicePolicy struct. The keys of the list are populated from the input
// arguments.
func (t *ServicePolicy_ServicePolicy_ServicePolicy) NewRules(Rule string) (*ServicePolicy_ServicePolicy_ServicePolicy_Rules, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Rules == nil {
		t.Rules = make(map[string]*ServicePolicy_ServicePolicy_ServicePolicy_Rules)
	}

	key := Rule

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Rules[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Rules", key)
	}

	t.Rules[key] = &ServicePolicy_ServicePolicy_ServicePolicy_Rules{
		Rule: &Rule,
	}

	return t.Rules[key], nil
}

// ΛListKeyMap returns the keys of the ServicePolicy_ServicePolicy_ServicePolicy struct, which is a YANG list entry.
func (t *ServicePolicy_ServicePolicy_ServicePolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ServicePolicy_ServicePolicy_ServicePolicy) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ServicePolicy_ServicePolicy_ServicePolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ServicePolicy_ServicePolicy_ServicePolicy) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ServicePolicy_ServicePolicy_ServicePolicy_Ambr represents the /service-policy/service-policy/service-policy/ambr YANG schema element.
type ServicePolicy_ServicePolicy_ServicePolicy_Ambr struct {
	Downlink	*uint32	`path:"downlink" module:"service-policy"`
	Uplink	*uint32	`path:"uplink" module:"service-policy"`
}

// IsYANGGoStruct ensures that ServicePolicy_ServicePolicy_ServicePolicy_Ambr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ServicePolicy_ServicePolicy_ServicePolicy_Ambr) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ServicePolicy_ServicePolicy_ServicePolicy_Ambr) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ServicePolicy_ServicePolicy_ServicePolicy_Ambr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ServicePolicy_ServicePolicy_ServicePolicy_Ambr) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ServicePolicy_ServicePolicy_ServicePolicy_Rules represents the /service-policy/service-policy/service-policy/rules YANG schema element.
type ServicePolicy_ServicePolicy_ServicePolicy_Rules struct {
	Enabled	*bool	`path:"enabled" module:"service-policy"`
	Rule	*string	`path:"rule" module:"service-policy"`
}

// IsYANGGoStruct ensures that ServicePolicy_ServicePolicy_ServicePolicy_Rules implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ServicePolicy_ServicePolicy_ServicePolicy_Rules) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the ServicePolicy_ServicePolicy_ServicePolicy_Rules struct, which is a YANG list entry.
func (t *ServicePolicy_ServicePolicy_ServicePolicy_Rules) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Rule == nil {
		return nil, fmt.Errorf("nil value for key Rule")
	}

	return map[string]interface{}{
		"rule": *t.Rule,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ServicePolicy_ServicePolicy_ServicePolicy_Rules) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ServicePolicy_ServicePolicy_ServicePolicy_Rules"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ServicePolicy_ServicePolicy_ServicePolicy_Rules) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ServiceRule_ServiceRule represents the /service-rule/service-rule YANG schema element.
type ServiceRule_ServiceRule struct {
	ServiceRule	map[string]*ServiceRule_ServiceRule_ServiceRule	`path:"service-rule" module:"service-rule"`
}

// IsYANGGoStruct ensures that ServiceRule_ServiceRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ServiceRule_ServiceRule) IsYANGGoStruct() {}

// NewServiceRule creates a new entry in the ServiceRule list of the
// ServiceRule_ServiceRule struct. The keys of the list are populated from the input
// arguments.
func (t *ServiceRule_ServiceRule) NewServiceRule(Id string) (*ServiceRule_ServiceRule_ServiceRule, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServiceRule == nil {
		t.ServiceRule = make(map[string]*ServiceRule_ServiceRule_ServiceRule)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ServiceRule[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ServiceRule", key)
	}

	t.ServiceRule[key] = &ServiceRule_ServiceRule_ServiceRule{
		Id: &Id,
	}

	return t.ServiceRule[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ServiceRule_ServiceRule) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ServiceRule_ServiceRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ServiceRule_ServiceRule) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ServiceRule_ServiceRule_ServiceRule represents the /service-rule/service-rule/service-rule YANG schema element.
type ServiceRule_ServiceRule_ServiceRule struct {
	ChargingRuleName	*string	`path:"charging-rule-name" module:"service-rule"`
	Description	*string	`path:"description" module:"service-rule"`
	DisplayName	*string	`path:"display-name" module:"service-rule"`
	Flow	*ServiceRule_ServiceRule_ServiceRule_Flow	`path:"flow" module:"service-rule"`
	Id	*string	`path:"id" module:"service-rule"`
	Qos	*ServiceRule_ServiceRule_ServiceRule_Qos	`path:"qos" module:"service-rule"`
}

// IsYANGGoStruct ensures that ServiceRule_ServiceRule_ServiceRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ServiceRule_ServiceRule_ServiceRule) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the ServiceRule_ServiceRule_ServiceRule struct, which is a YANG list entry.
func (t *ServiceRule_ServiceRule_ServiceRule) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ServiceRule_ServiceRule_ServiceRule) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ServiceRule_ServiceRule_ServiceRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ServiceRule_ServiceRule_ServiceRule) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ServiceRule_ServiceRule_ServiceRule_Flow represents the /service-rule/service-rule/service-rule/flow YANG schema element.
type ServiceRule_ServiceRule_ServiceRule_Flow struct {
	Specification	*string	`path:"specification" module:"service-rule"`
}

// IsYANGGoStruct ensures that ServiceRule_ServiceRule_ServiceRule_Flow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ServiceRule_ServiceRule_ServiceRule_Flow) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ServiceRule_ServiceRule_ServiceRule_Flow) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ServiceRule_ServiceRule_ServiceRule_Flow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ServiceRule_ServiceRule_ServiceRule_Flow) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ServiceRule_ServiceRule_ServiceRule_Qos represents the /service-rule/service-rule/service-rule/qos YANG schema element.
type ServiceRule_ServiceRule_ServiceRule_Qos struct {
	AggregateMaximumBitrate	*ServiceRule_ServiceRule_ServiceRule_Qos_AggregateMaximumBitrate	`path:"aggregate-maximum-bitrate" module:"service-rule"`
	Arp	*ServiceRule_ServiceRule_ServiceRule_Qos_Arp	`path:"arp" module:"service-rule"`
	GuaranteedBitrate	*ServiceRule_ServiceRule_ServiceRule_Qos_GuaranteedBitrate	`path:"guaranteed-bitrate" module:"service-rule"`
	MaximumRequestedBandwidth	*ServiceRule_ServiceRule_ServiceRule_Qos_MaximumRequestedBandwidth	`path:"maximum-requested-bandwidth" module:"service-rule"`
	Qci	*uint32	`path:"qci" module:"service-rule"`
}

// IsYANGGoStruct ensures that ServiceRule_ServiceRule_ServiceRule_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ServiceRule_ServiceRule_ServiceRule_Qos) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ServiceRule_ServiceRule_ServiceRule_Qos) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ServiceRule_ServiceRule_ServiceRule_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ServiceRule_ServiceRule_ServiceRule_Qos) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ServiceRule_ServiceRule_ServiceRule_Qos_AggregateMaximumBitrate represents the /service-rule/service-rule/service-rule/qos/aggregate-maximum-bitrate YANG schema element.
type ServiceRule_ServiceRule_ServiceRule_Qos_AggregateMaximumBitrate struct {
	Downlink	*uint32	`path:"downlink" module:"service-rule"`
	Uplink	*uint32	`path:"uplink" module:"service-rule"`
}

// IsYANGGoStruct ensures that ServiceRule_ServiceRule_ServiceRule_Qos_AggregateMaximumBitrate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ServiceRule_ServiceRule_ServiceRule_Qos_AggregateMaximumBitrate) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ServiceRule_ServiceRule_ServiceRule_Qos_AggregateMaximumBitrate) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ServiceRule_ServiceRule_ServiceRule_Qos_AggregateMaximumBitrate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ServiceRule_ServiceRule_ServiceRule_Qos_AggregateMaximumBitrate) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ServiceRule_ServiceRule_ServiceRule_Qos_Arp represents the /service-rule/service-rule/service-rule/qos/arp YANG schema element.
type ServiceRule_ServiceRule_ServiceRule_Qos_Arp struct {
	PreemptionCapability	*bool	`path:"preemption-capability" module:"service-rule"`
	PreemptionVulnerability	*bool	`path:"preemption-vulnerability" module:"service-rule"`
	Priority	*uint32	`path:"priority" module:"service-rule"`
}

// IsYANGGoStruct ensures that ServiceRule_ServiceRule_ServiceRule_Qos_Arp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ServiceRule_ServiceRule_ServiceRule_Qos_Arp) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ServiceRule_ServiceRule_ServiceRule_Qos_Arp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ServiceRule_ServiceRule_ServiceRule_Qos_Arp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ServiceRule_ServiceRule_ServiceRule_Qos_Arp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ServiceRule_ServiceRule_ServiceRule_Qos_GuaranteedBitrate represents the /service-rule/service-rule/service-rule/qos/guaranteed-bitrate YANG schema element.
type ServiceRule_ServiceRule_ServiceRule_Qos_GuaranteedBitrate struct {
	Downlink	*uint32	`path:"downlink" module:"service-rule"`
	Uplink	*uint32	`path:"uplink" module:"service-rule"`
}

// IsYANGGoStruct ensures that ServiceRule_ServiceRule_ServiceRule_Qos_GuaranteedBitrate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ServiceRule_ServiceRule_ServiceRule_Qos_GuaranteedBitrate) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ServiceRule_ServiceRule_ServiceRule_Qos_GuaranteedBitrate) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ServiceRule_ServiceRule_ServiceRule_Qos_GuaranteedBitrate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ServiceRule_ServiceRule_ServiceRule_Qos_GuaranteedBitrate) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ServiceRule_ServiceRule_ServiceRule_Qos_MaximumRequestedBandwidth represents the /service-rule/service-rule/service-rule/qos/maximum-requested-bandwidth YANG schema element.
type ServiceRule_ServiceRule_ServiceRule_Qos_MaximumRequestedBandwidth struct {
	Downlink	*uint32	`path:"downlink" module:"service-rule"`
	Uplink	*uint32	`path:"uplink" module:"service-rule"`
}

// IsYANGGoStruct ensures that ServiceRule_ServiceRule_ServiceRule_Qos_MaximumRequestedBandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ServiceRule_ServiceRule_ServiceRule_Qos_MaximumRequestedBandwidth) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ServiceRule_ServiceRule_ServiceRule_Qos_MaximumRequestedBandwidth) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ServiceRule_ServiceRule_ServiceRule_Qos_MaximumRequestedBandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ServiceRule_ServiceRule_ServiceRule_Qos_MaximumRequestedBandwidth) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// UpProfile_UpProfile represents the /up-profile/up-profile YANG schema element.
type UpProfile_UpProfile struct {
	UpProfile	map[string]*UpProfile_UpProfile_UpProfile	`path:"up-profile" module:"up-profile"`
}

// IsYANGGoStruct ensures that UpProfile_UpProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*UpProfile_UpProfile) IsYANGGoStruct() {}

// NewUpProfile creates a new entry in the UpProfile list of the
// UpProfile_UpProfile struct. The keys of the list are populated from the input
// arguments.
func (t *UpProfile_UpProfile) NewUpProfile(Id string) (*UpProfile_UpProfile_UpProfile, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UpProfile == nil {
		t.UpProfile = make(map[string]*UpProfile_UpProfile_UpProfile)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UpProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UpProfile", key)
	}

	t.UpProfile[key] = &UpProfile_UpProfile_UpProfile{
		Id: &Id,
	}

	return t.UpProfile[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *UpProfile_UpProfile) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["UpProfile_UpProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *UpProfile_UpProfile) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// UpProfile_UpProfile_UpProfile represents the /up-profile/up-profile/up-profile YANG schema element.
type UpProfile_UpProfile_UpProfile struct {
	AccessControl	*string	`path:"access-control" module:"up-profile"`
	Description	*string	`path:"description" module:"up-profile"`
	DisplayName	*string	`path:"display-name" module:"up-profile"`
	Id	*string	`path:"id" module:"up-profile"`
	UserPlane	*string	`path:"user-plane" module:"up-profile"`
}

// IsYANGGoStruct ensures that UpProfile_UpProfile_UpProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*UpProfile_UpProfile_UpProfile) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the UpProfile_UpProfile_UpProfile struct, which is a YANG list entry.
func (t *UpProfile_UpProfile_UpProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *UpProfile_UpProfile_UpProfile) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["UpProfile_UpProfile_UpProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *UpProfile_UpProfile_UpProfile) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }



var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7d, 0x5f, 0x73, 0xdb, 0xb6,
		0xd2, 0xfe, 0x7d, 0x3e, 0x05, 0x46, 0x33, 0x67, 0x7e, 0xf1, 0x39, 0x91, 0x23, 0x25, 0x76, 0x1c,
		0xeb, 0xa6, 0xe3, 0x26, 0x69, 0x7f, 0x9e, 0x26, 0xa7, 0x6e, 0xdc, 0xbc, 0x37, 0x89, 0x5f, 0x0f,
		0x4c, 0x42, 0x32, 0x26, 0x14, 0x41, 0x83, 0xa4, 0x1d, 0x4d, 0xea, 0xef, 0xfe, 0x0e, 0x29, 0x8a,
		0xa2, 0x24, 0xfe, 0x01, 0x40, 0x4a, 0xa2, 0xe4, 0xa7, 0x17, 0x29, 0x25, 0x03, 0x10, 0x01, 0x2c,
		0x9e, 0x5d, 0x2c, 0x9e, 0x5d, 0xfc, 0x7c, 0x46, 0x08, 0x21, 0x9d, 0xff, 0xd2, 0x31, 0xeb, 0x0c,
		0x48, 0xc7, 0x66, 0xf7, 0xdc, 0x62, 0x9d, 0x17, 0xd3, 0x6f, 0xff, 0xe0, 0xae, 0xdd, 0x19, 0x90,
		0x7e, 0xf2, 0xf1, 0x9d, 0x70, 0x87, 0x7c, 0xd4, 0x19, 0x90, 0x5e, 0xf2, 0xc5, 0x7b, 0x2e, 0x3b,
		0x03, 0x32, 0x6d, 0x22, 0xfe, 0x82, 0x5a, 0x16, 0xf3, 0xfd, 0xae, 0x27, 0xc5, 0x90, 0x3b, 0x6c,
		0xe1, 0x6f, 0x0b, 0x3f, 0xb3, 0x54, 0xee, 0xc5, 0x62, 0xa9, 0xf7, 0xcc, 0xb7, 0x24, 0xf7, 0x02,
		0x2e, 0xdc, 0xa8, 0xf0, 0xdf, 0xb7, 0x8c, 0x04, 0xc2, 0x23, 0x0e, 0xbb, 0x67, 0x0e, 0xb1, 0x84,
		0x1b, 0x50, 0xee, 0x32, 0xb9, 0x5c, 0x6b, 0xf1, 0x65, 0xd3, 0xaf, 0x97, 0x5f, 0x3a, 0xfd, 0xc3,
		0x85, 0x64, 0x43, 0xfe, 0x63, 0xe5, 0x1d, 0x17, 0xde, 0xd3, 0x93, 0x62, 0xe9, 0x67, 0xe2, 0x3f,
		0x5f, 0x8a, 0x50, 0x5a, 0x2c, 0xb7, 0xea, 0xf4, 0x55, 0xd8, 0xe4, 0x41, 0x48, 0x7b, 0xda, 0x42,
		0xfc, 0x2b, 0x2f, 0xf2, 0x0b, 0xfe, 0x7f, 0xea, 0x9f, 0xc9, 0x51, 0x38, 0x66, 0x6e, 0xd0, 0x19,
		0x90, 0x40, 0x86, 0xac, 0xa0, 0x60, 0xa6, 0x54, 0xfc, 0x52, 0x2b, 0xa5, 0x1e, 0x17, 0xbe, 0x79,
		0x5c, 0x1e, 0xd1, 0xa5, 0x89, 0x52, 0x9d, 0x30, 0xbd, 0x89, 0x2b, 0x9a, 0xc0, 0x8f, 0xdc, 0x0f,
		0x88, 0x18, 0x92, 0x69, 0x65, 0x92, 0x54, 0xf6, 0x8b, 0x6a, 0xe7, 0x4f, 0x64, 0xe5, 0x84, 0xaa,
		0x4c, 0xac, 0xe2, 0x04, 0xab, 0x4e, 0xb4, 0xf6, 0x84, 0x6b, 0x4f, 0xbc, 0xba, 0x00, 0xe4, 0x0b,
		0x42, 0x81, 0x40, 0x54, 0x0a, 0x46, 0x5a, 0xc0, 0x5e, 0x98, 0xca, 0x8a, 0x61, 0x98, 0xa3, 0xc8,
		0xbc, 0x52, 0x45, 0xbf, 0x96, 0x44, 0x25, 0x53, 0x33, 0x92, 0x98, 0xe0, 0x96, 0xa7, 0xf2, 0x52,
		0xd5, 0x52, 0x22, 0x36, 0xbd, 0x8a, 0x62, 0x55, 0xe2, 0xa3, 0x23, 0x46, 0x9a, 0xe2, 0xa4, 0x2b,
		0x56, 0xc6, 0xe2, 0x65, 0x2c, 0x66, 0xfa, 0xe2, 0x56, 0x2e, 0x76, 0x15, 0xe2, 0x97, 0xfe, 0xdc,
		0xdf, 0x13, 0x8f, 0xe9, 0x8d, 0xb4, 0x1f, 0x48, 0xee, 0x8e, 0x54, 0x06, 0x7b, 0x06, 0x27, 0x6f,
		0x15, 0xca, 0x7e, 0x64, 0xee, 0x28, 0xb8, 0xed, 0x0c, 0xc8, 0x57, 0xa5, 0x61, 0x52, 0x9b, 0xbe,
		0xb8, 0xe5, 0x4f, 0xdc, 0x55, 0x9e, 0x6f, 0x4d, 0x91, 0x5e, 0xa9, 0xf6, 0x3f, 0xd4, 0x09, 0x59,
		0x31, 0x82, 0x16, 0xd6, 0xfb, 0x4d, 0x52, 0x2b, 0x5a, 0x79, 0xef, 0xf9, 0x88, 0x07, 0x7e, 0xf4,
		0xc3, 0xca, 0xf5, 0x1f, 0x5f, 0x68, 0x0c, 0x05, 0xfd, 0xb1, 0xf9, 0xa1, 0xe8, 0xf5, 0x36, 0x38,
		0x18, 0xcf, 0x9a, 0x29, 0x75, 0xf5, 0xcc, 0xac, 0x7e, 0xc9, 0x64, 0x74, 0x6c, 0xee, 0x7b, 0x0e,
		0x9d, 0x74, 0xdd, 0xe9, 0x3a, 0x52, 0x05, 0xf4, 0x6c, 0x2d, 0x4d, 0x44, 0x9f, 0x56, 0x25, 0x51,
		0x55, 0x12, 0x08, 0x12, 0xfa, 0x8c, 0x70, 0x97, 0xfc, 0xfe, 0xe5, 0x9c, 0x08, 0x49, 0xde, 0x7d,
		0x3c, 0x07, 0xae, 0x03, 0xd7, 0x81, 0xeb, 0xc0, 0x75, 0xa3, 0xa1, 0x78, 0x0b, 0x58, 0x8f, 0xbb,
		0x35, 0xe4, 0x4e, 0xc0, 0xa4, 0x3a, 0xa0, 0x27, 0xe5, 0xf5, 0xa0, 0x5c, 0xad, 0x12, 0xf0, 0x1a,
		0x78, 0x0d, 0xbc, 0xce, 0x82, 0x54, 0x0f, 0x78, 0x3d, 0x1b, 0x8a, 0xd7, 0xaf, 0x80, 0xd7, 0x51,
		0xb7, 0xb8, 0xad, 0x8e, 0xd5, 0xdc, 0xd6, 0xc4, 0xe9, 0xf3, 0xf7, 0x64, 0x28, 0xe4, 0xd4, 0x79,
		0xb2, 0xe8, 0x73, 0x3b, 0x04, 0x78, 0x03, 0xbc, 0x8b, 0xbc, 0xb9, 0xdd, 0x4a, 0x41, 0x83, 0xdd,
		0x0d, 0x1c, 0x07, 0x8e, 0x67, 0xbb, 0x15, 0xa8, 0xac, 0xb9, 0x74, 0xbd, 0xc5, 0xa5, 0xf5, 0xb0,
		0x3c, 0xaa, 0x42, 0xc4, 0x10, 0x4e, 0x70, 0xe0, 0x37, 0x8c, 0x6f, 0x80, 0x36, 0x40, 0x5b, 0x15,
		0xb4, 0xb5, 0x8e, 0x41, 0xff, 0x60, 0x93, 0x52, 0x4b, 0x3b, 0x3e, 0xc2, 0x3e, 0x0b, 0x82, 0x8a,
		0xc3, 0xd2, 0x4f, 0xdc, 0xfd, 0xe0, 0xb0, 0x08, 0x32, 0xfc, 0xf2, 0x69, 0x8a, 0xa6, 0x3f, 0x53,
		0xb2, 0xff, 0xf6, 0xe8, 0xe8, 0xcd, 0xc9, 0xd1, 0x51, 0xef, 0xe4, 0xf5, 0x49, 0xef, 0xf4, 0xf8,
		0xb8, 0xff, 0xa6, 0x7f, 0x5c, 0x52, 0xf9, 0x4f, 0x69, 0x33, 0xc9, 0xec, 0x5f, 0xa3, 0x77, 0x76,
		0x43, 0xc7, 0xd1, 0xea, 0xea, 0x99, 0xeb, 0x8a, 0x80, 0x56, 0x9e, 0xe7, 0x76, 0x7c, 0xeb, 0x96,
		0x8d, 0xa9, 0x47, 0x63, 0x24, 0xe8, 0xbc, 0x5c, 0x34, 0x15, 0xcb, 0x3f, 0x96, 0x9d, 0xa8, 0xfb,
		0x81, 0x0c, 0xad, 0x20, 0x39, 0x7d, 0xe8, 0x9c, 0xc5, 0xf5, 0x2e, 0xa6, 0xd5, 0xae, 0x4b, 0x3e,
		0xe5, 0x63, 0xef, 0xa3, 0x26, 0x0d, 0xa2, 0xa2, 0xef, 0x5a, 0x7d, 0xce, 0xe3, 0x85, 0x28, 0x77,
		0x6e, 0xb1, 0x3b, 0xf3, 0x97, 0xce, 0xbc, 0x70, 0x87, 0x7a, 0xae, 0x02, 0x91, 0x26, 0x53, 0x08,
		0x2c, 0x9a, 0xad, 0xb1, 0x68, 0x4a, 0xa6, 0x4a, 0x63, 0xca, 0x8a, 0xa6, 0x2e, 0xe5, 0xcf, 0x78,
		0x2e, 0xc8, 0x33, 0xbb, 0x44, 0x9e, 0x89, 0xa6, 0x5a, 0xef, 0xa0, 0x35, 0xad, 0xa1, 0xb7, 0x4b,
		0x88, 0x24, 0x43, 0xa5, 0x1a, 0xb6, 0x07, 0xd8, 0x1e, 0x60, 0x7b, 0x80, 0xed, 0x01, 0xb6, 0x07,
		0x2f, 0x40, 0x79, 0x04, 0x9c, 0x03, 0xce, 0x01, 0xe7, 0xa0, 0x3c, 0xee, 0x3d, 0x9e, 0x83, 0xf2,
		0x08, 0x5c, 0x07, 0xae, 0x03, 0xd7, 0xf7, 0x03, 0xd7, 0x41, 0x79, 0x4c, 0x60, 0xdd, 0xf5, 0xbb,
		0x9e, 0xe4, 0x63, 0x2a, 0x27, 0x1a, 0xa8, 0x9e, 0xa9, 0xa4, 0x07, 0xea, 0x49, 0x2d, 0x62, 0xbb,
		0x3e, 0xf1, 0x99, 0xbc, 0x67, 0x12, 0x1e, 0x17, 0x40, 0xf9, 0xd2, 0x48, 0x73, 0xaf, 0x4b, 0x6d,
		0x5b, 0x32, 0xdf, 0xd7, 0x81, 0xf3, 0x53, 0x85, 0xb2, 0xc9, 0xbb, 0x34, 0x0e, 0xe6, 0xf3, 0x37,
		0xbf, 0x3f, 0xd2, 0x78, 0x77, 0x13, 0x95, 0x34, 0x97, 0x61, 0x1a, 0x04, 0x4c, 0xba, 0xca, 0xdd,
		0x49, 0x2b, 0x3e, 0x7f, 0xfe, 0xb5, 0xd7, 0x3d, 0xbd, 0xfa, 0xe7, 0x6b, 0xbf, 0x7b, 0x7a, 0x35,
		0x7d, 0xec, 0xc7, 0xff, 0x9b, 0x3e, 0xbf, 0xfa, 0xda, 0xeb, 0x1e, 0xcd, 0x9e, 0x8f, 0xbf, 0xf6,
		0xba, 0xc7, 0x57, 0x07, 0xdf, 0xbe, 0x1d, 0x1e, 0xfc, 0x7c, 0xfd, 0xa8, 0x5f, 0xf1, 0xf9, 0xbf,
		0xbe, 0x7e, 0xfb, 0xe6, 0xfd, 0xfc, 0xef, 0x63, 0xf4, 0xef, 0xc7, 0xc7, 0xab, 0xff, 0x1c, 0xfc,
		0xd2, 0x51, 0x7e, 0xdb, 0xab, 0x67, 0x0d, 0x6a, 0x1a, 0xb3, 0xd9, 0x7c, 0xb3, 0x03, 0xb3, 0x39,
		0xf8, 0x27, 0x1a, 0x73, 0xda, 0x1d, 0x9e, 0x75, 0x7f, 0xbb, 0xfa, 0xd9, 0x7b, 0x71, 0xf4, 0x78,
		0x30, 0x38, 0x78, 0xbe, 0xfc, 0xdd, 0xe0, 0xe0, 0x67, 0xef, 0xc5, 0xf1, 0xe3, 0xf3, 0xe7, 0x39,
		0x7f, 0xf9, 0x25, 0xaf, 0x8d, 0x83, 0x7f, 0x9e, 0x3f, 0x7f, 0x9e, 0xcc, 0xe3, 0xc2, 0xdc, 0x7e,
		0xed, 0xf5, 0xaf, 0x7e, 0x89, 0x1f, 0xa7, 0xff, 0xa6, 0xd2, 0xa1, 0x54, 0xf8, 0x20, 0x57, 0x26,
		0x5e, 0x68, 0x8b, 0xf0, 0xff, 0x0e, 0xae, 0xfe, 0x33, 0x38, 0xf8, 0xf9, 0xe6, 0x71, 0xf6, 0x1c,
		0xff, 0x7b, 0xf0, 0xcf, 0xf3, 0xc3, 0x7f, 0x7f, 0xfb, 0x76, 0x78, 0xf8, 0xef, 0x83, 0x69, 0x07,
		0x92, 0x72, 0xff, 0x9e, 0xfe, 0xf5, 0x97, 0xc1, 0x60, 0xe5, 0xab, 0x83, 0xe7, 0xff, 0x3a, 0x5c,
		0x87, 0x58, 0x6e, 0x4d, 0x9d, 0xfb, 0xcc, 0x12, 0xae, 0xad, 0xad, 0xd0, 0xe7, 0xd5, 0xf4, 0x54,
		0x7a, 0x5a, 0x0f, 0x4a, 0x1d, 0x4a, 0x1d, 0x4a, 0x1d, 0x4a, 0x1d, 0x4a, 0x1d, 0x4a, 0x1d, 0x4a,
		0xbd, 0x41, 0xa5, 0x3e, 0xfa, 0xd1, 0x65, 0x2e, 0xbd, 0x71, 0x98, 0x46, 0xb8, 0x4b, 0xa6, 0x8e,
		0x9e, 0x3a, 0x9f, 0xd6, 0x22, 0xa3, 0x1f, 0x84, 0xbb, 0x01, 0x93, 0x43, 0x6a, 0x29, 0x38, 0x6e,
		0x87, 0x34, 0x74, 0x62, 0xd5, 0x33, 0xa4, 0x8e, 0x0f, 0xc5, 0x0f, 0xc5, 0x9f, 0x19, 0xe9, 0x1b,
		0x21, 0x1c, 0x46, 0x5d, 0x1d, 0xad, 0xdf, 0xdf, 0xe9, 0x58, 0xb1, 0x39, 0xbf, 0x0c, 0x81, 0x62,
		0x58, 0x09, 0xf9, 0x9c, 0x45, 0x44, 0x89, 0xe1, 0xa8, 0x42, 0x75, 0x28, 0xc0, 0x28, 0x9a, 0x76,
		0x6b, 0x1c, 0x84, 0xea, 0x10, 0x1e, 0x15, 0xd6, 0xc3, 0xf0, 0x31, 0xfd, 0xc1, 0xc7, 0xe1, 0x98,
		0x04, 0x92, 0xba, 0xfe, 0x98, 0xfb, 0x3e, 0x17, 0x2e, 0x09, 0x5d, 0x1e, 0x68, 0x98, 0x3f, 0xfd,
		0xa3, 0x37, 0x3d, 0x60, 0x3e, 0x30, 0x7f, 0x3e, 0xd2, 0x21, 0x77, 0x83, 0xd7, 0xaf, 0x34, 0xb0,
		0xfe, 0x44, 0xa1, 0xe8, 0x67, 0xea, 0x8e, 0xd8, 0xbe, 0x20, 0xfd, 0x9b, 0xb7, 0x80, 0xfa, 0x74,
		0x2c, 0x8e, 0x8f, 0x5f, 0x1f, 0x03, 0xed, 0xe3, 0x28, 0x20, 0x26, 0xef, 0xb9, 0xc5, 0xba, 0x23,
		0x29, 0x42, 0x4f, 0x1d, 0xf7, 0x17, 0xab, 0xe9, 0x69, 0x80, 0x8f, 0xdc, 0xfd, 0x4e, 0x02, 0x41,
		0x92, 0x36, 0x88, 0x52, 0x1b, 0x80, 0xf3, 0xa7, 0x04, 0xe7, 0x0e, 0xa3, 0x43, 0xc9, 0x86, 0x3a,
		0xb6, 0xbb, 0x0a, 0xa0, 0x5f, 0xcc, 0x82, 0xe5, 0xfc, 0xd1, 0x60, 0x41, 0x82, 0x73, 0xbf, 0xe0,
		0x76, 0x07, 0xf1, 0x9c, 0x2b, 0x95, 0xb7, 0x12, 0xcf, 0x39, 0xdf, 0xd1, 0x15, 0x3d, 0x6b, 0x84,
		0x71, 0x7a, 0x6e, 0x1a, 0xe6, 0x98, 0xf7, 0xb8, 0x9d, 0xe8, 0x4d, 0xe5, 0x5e, 0xa9, 0xf4, 0x46,
		0x25, 0x62, 0xd3, 0x12, 0xae, 0xcb, 0xac, 0x80, 0xdf, 0xf3, 0x60, 0xd2, 0x4d, 0x64, 0xbf, 0x38,
		0x74, 0x33, 0xb7, 0x74, 0x6b, 0x63, 0x38, 0x2d, 0xbf, 0x7d, 0x21, 0x9c, 0x96, 0xdf, 0x58, 0x04,
		0xa7, 0xd2, 0xd4, 0x99, 0x4c, 0x61, 0xb1, 0xc6, 0x9e, 0xc6, 0x74, 0x66, 0x9b, 0x98, 0xa9, 0xef,
		0x56, 0x04, 0x77, 0x5a, 0xfe, 0xee, 0xc5, 0x76, 0xe6, 0x09, 0x84, 0x99, 0x02, 0xd9, 0x85, 0xbc,
		0xe8, 0x79, 0xa2, 0xb3, 0x0b, 0x36, 0x9f, 0xe5, 0xef, 0x9f, 0xc9, 0x57, 0x26, 0x79, 0xdb, 0xb2,
		0xf8, 0xc0, 0x2b, 0x87, 0xb3, 0x56, 0x67, 0x28, 0x10, 0x2f, 0x94, 0x40, 0x3b, 0xe2, 0x85, 0x80,
		0xea, 0x40, 0x75, 0xa0, 0xfa, 0x3e, 0xa0, 0x3a, 0xa2, 0x85, 0xa6, 0xdd, 0xba, 0xf5, 0xfd, 0x2e,
		0x73, 0x6d, 0x4f, 0xf0, 0x78, 0x69, 0x2b, 0x82, 0xfa, 0x42, 0x2d, 0x3d, 0x50, 0x0f, 0xa5, 0x33,
		0xb5, 0xd4, 0x19, 0xb9, 0xf5, 0x7d, 0xd8, 0xe7, 0x40, 0xf2, 0xe5, 0x71, 0x0e, 0x25, 0xd7, 0x82,
		0xf1, 0x5d, 0xa6, 0x16, 0xe5, 0xed, 0x55, 0x0f, 0xb1, 0x18, 0xb0, 0x18, 0xca, 0x5c, 0x69, 0xa0,
		0x1a, 0xc1, 0xce, 0x51, 0x1d, 0x0a, 0x50, 0x8d, 0xa6, 0xdd, 0xf2, 0x2c, 0x39, 0x34, 0x30, 0x74,
		0x16, 0xab, 0x19, 0x5b, 0x3a, 0x51, 0x33, 0x30, 0x75, 0x80, 0xee, 0x2d, 0x34, 0x75, 0x7c, 0x6f,
		0xf4, 0x60, 0x19, 0xac, 0x8c, 0xa5, 0x7a, 0xc6, 0x4b, 0x23, 0x6e, 0x07, 0x6b, 0x03, 0x6b, 0x63,
		0x5b, 0x6b, 0x03, 0x04, 0x8a, 0x46, 0x09, 0x14, 0x79, 0x06, 0xab, 0xfa, 0x97, 0xea, 0xdc, 0x8a,
		0x77, 0x99, 0xda, 0x97, 0xd3, 0xca, 0xd7, 0x8a, 0xdf, 0x6d, 0x85, 0x76, 0x51, 0x67, 0x08, 0xcc,
		0xba, 0xae, 0x42, 0xcd, 0x60, 0x6e, 0xc0, 0xa4, 0x27, 0xb9, 0x5f, 0x42, 0xc8, 0xc8, 0x94, 0x69,
		0x2d, 0x0d, 0x83, 0xe5, 0xaa, 0xa0, 0x2d, 0xf3, 0x30, 0xa2, 0xff, 0x35, 0x45, 0xc4, 0x28, 0x99,
		0x28, 0xf5, 0x09, 0x2b, 0x9a, 0xb8, 0x19, 0xe9, 0x62, 0x5e, 0xb1, 0x15, 0x54, 0x0b, 0x56, 0x6a,
		0x57, 0xb4, 0x94, 0x6b, 0x91, 0x3b, 0xe9, 0x66, 0xca, 0xa6, 0x92, 0x6c, 0xa1, 0xc5, 0xce, 0x51,
		0x72, 0x2d, 0x28, 0x1a, 0x60, 0xfd, 0x6d, 0x1a, 0x60, 0xac, 0xd2, 0xdc, 0xdc, 0x41, 0x0b, 0xac,
		0x54, 0x6c, 0x9a, 0x31, 0xc1, 0xaa, 0xc4, 0xa9, 0x9e, 0x58, 0x35, 0x21, 0x5e, 0xc5, 0xf8, 0x34,
		0xa5, 0x71, 0xe7, 0x92, 0xc2, 0xc8, 0xc3, 0x2d, 0x93, 0x2c, 0xfa, 0xdb, 0x90, 0x8f, 0x42, 0x19,
		0x6b, 0x64, 0xe2, 0xdf, 0x8a, 0xd0, 0xb1, 0xc9, 0x0d, 0x23, 0x5e, 0xe8, 0xdf, 0x32, 0x7b, 0xee,
		0x71, 0x9d, 0x63, 0xdc, 0xff, 0xf3, 0x89, 0xcd, 0xca, 0x78, 0x65, 0x35, 0x7d, 0x31, 0xca, 0xab,
		0xc0, 0x64, 0x35, 0x18, 0xae, 0x0a, 0xd3, 0xd5, 0x51, 0x7b, 0x95, 0xd4, 0x5e, 0x2d, 0xe6, 0xab,
		0x46, 0xd3, 0x3d, 0xa5, 0x38, 0x57, 0xca, 0x1b, 0x9a, 0x95, 0x99, 0x52, 0x67, 0x9c, 0xaf, 0xc0,
		0xee, 0x89, 0x5e, 0xaa, 0x8a, 0xc4, 0xf2, 0xf4, 0x07, 0xf9, 0xc6, 0x67, 0xf1, 0xf7, 0x55, 0x7c,
		0x74, 0xf5, 0x21, 0x55, 0x18, 0xce, 0x8e, 0x6a, 0x2a, 0x84, 0x1c, 0x99, 0x57, 0xc9, 0x87, 0x50,
		0x84, 0x2a, 0x67, 0x8e, 0x23, 0x1e, 0x88, 0x90, 0xc4, 0xe6, 0x3e, 0x8d, 0x9f, 0x63, 0xac, 0xf0,
		0x23, 0xa4, 0x31, 0x25, 0x12, 0x66, 0x7e, 0x2b, 0x0d, 0x21, 0x8c, 0x64, 0x1c, 0x08, 0x03, 0x84,
		0xd9, 0x1c, 0xc2, 0xa8, 0x27, 0x68, 0x58, 0x41, 0x98, 0x7e, 0x53, 0xeb, 0xbe, 0x96, 0xa9, 0x92,
		0xb8, 0x59, 0x4c, 0x2c, 0x54, 0x25, 0x07, 0x8c, 0xbe, 0x23, 0xa6, 0x11, 0x87, 0x8c, 0x9e, 0x63,
		0x46, 0x75, 0xb0, 0x14, 0x1d, 0x35, 0x45, 0x8e, 0x89, 0xb9, 0x41, 0x54, 0xf0, 0x68, 0x68, 0xc8,
		0x2d, 0x39, 0x2d, 0x3e, 0xa4, 0x0d, 0x5e, 0xe7, 0x3f, 0x2a, 0x3b, 0x6a, 0xea, 0xf9, 0xbb, 0x5b,
		0x40, 0x50, 0xaf, 0xdc, 0x9f, 0xb7, 0xca, 0xdf, 0x8d, 0xed, 0xd6, 0xa6, 0x3c, 0xde, 0xa0, 0x30,
		0x16, 0x57, 0xc3, 0xd1, 0xfe, 0xea, 0x50, 0x80, 0x98, 0x9e, 0x40, 0x3a, 0x88, 0xe9, 0xc0, 0x75,
		0xe0, 0x3a, 0x70, 0x7d, 0x3f, 0x70, 0x1d, 0xd4, 0xf4, 0x69, 0xb7, 0x36, 0x46, 0xc2, 0x9d, 0xdb,
		0xe3, 0x87, 0x00, 0x6e, 0x00, 0x77, 0xde, 0x41, 0x2a, 0x28, 0xb7, 0xc0, 0x6f, 0xd5, 0xa1, 0x78,
		0x52, 0x94, 0x5b, 0xb0, 0xa7, 0x1a, 0x65, 0x4f, 0x55, 0x39, 0xe3, 0xd4, 0xf9, 0x51, 0x55, 0xfe,
		0xb6, 0xad, 0x90, 0xa0, 0x54, 0xfb, 0xa4, 0xd2, 0x17, 0x15, 0x7a, 0xd3, 0x9d, 0xf0, 0x0b, 0x2f,
		0xa0, 0x4f, 0x51, 0x3e, 0x5b, 0xa8, 0xb5, 0x04, 0xa7, 0xfc, 0x84, 0x60, 0x5b, 0x26, 0x38, 0xe5,
		0x26, 0xf4, 0x32, 0x24, 0x38, 0x95, 0x4d, 0x95, 0xc6, 0x94, 0x15, 0x4d, 0xdd, 0x8c, 0xe2, 0x74,
		0x27, 0xd2, 0x5b, 0x84, 0x5b, 0xc1, 0x71, 0x2a, 0x4f, 0xf4, 0xd6, 0x52, 0x8e, 0x53, 0x69, 0x22,
		0xb7, 0x86, 0x39, 0x4e, 0xd4, 0x73, 0xbb, 0x74, 0x7c, 0x23, 0xd5, 0xf7, 0x02, 0x69, 0x8d, 0x1d,
		0xe0, 0x32, 0x21, 0xcf, 0x9f, 0x99, 0x2d, 0xaf, 0xcc, 0x65, 0xb2, 0xc5, 0x83, 0xeb, 0x70, 0xf7,
		0xbb, 0x3e, 0xb9, 0x20, 0xad, 0x69, 0xc6, 0x2e, 0x78, 0x2f, 0x1e, 0x5c, 0x3f, 0x90, 0x8c, 0x8e,
		0x09, 0x1d, 0x8d, 0x24, 0x1b, 0xd1, 0x80, 0x91, 0x59, 0x46, 0xe2, 0x1b, 0x1e, 0x10, 0x49, 0x03,
		0x13, 0x36, 0x41, 0x6f, 0x1f, 0xa8, 0x04, 0x6a, 0x62, 0x6f, 0x2a, 0xfe, 0xb5, 0x97, 0x41, 0xed,
		0xe5, 0x60, 0xbe, 0x2c, 0x34, 0x0d, 0xfb, 0xb5, 0x53, 0x09, 0x94, 0xb3, 0x1d, 0x2f, 0xcb, 0x9d,
		0x0e, 0x55, 0x49, 0x2f, 0xfb, 0xb1, 0xfe, 0x8e, 0xb8, 0xd6, 0xce, 0xb8, 0xe6, 0xb6, 0x70, 0x65,
		0x7b, 0x68, 0x5a, 0xbf, 0xc6, 0x2e, 0xd1, 0x60, 0xe7, 0x5c, 0x6b, 0x07, 0xdd, 0xf4, 0x90, 0x1d,
		0xbd, 0x3a, 0x3d, 0x3a, 0x7d, 0x73, 0xf2, 0xea, 0xf4, 0x78, 0x8b, 0x63, 0xf7, 0x6c, 0x3d, 0xa5,
		0xaf, 0x36, 0x48, 0xb4, 0x0b, 0x3d, 0x33, 0x55, 0x98, 0xd4, 0x33, 0x53, 0x84, 0x5f, 0x3c, 0xa8,
		0x41, 0xa8, 0x41, 0xa8, 0x41, 0xa8, 0x41, 0xa8, 0x41, 0xa8, 0xc1, 0xb5, 0xab, 0xc1, 0x6d, 0x52,
		0x29, 0x33, 0x6e, 0xa9, 0xc2, 0x67, 0x45, 0xef, 0x44, 0x8e, 0x17, 0xf4, 0x2f, 0xe1, 0xcf, 0xf2,
		0x6f, 0xe7, 0x3f, 0x9e, 0x79, 0xee, 0x59, 0xd4, 0xf2, 0x1a, 0xce, 0x62, 0xa9, 0xd4, 0xb8, 0xb1,
		0x21, 0x2a, 0xac, 0x77, 0x1a, 0xfb, 0xe1, 0x5e, 0x38, 0xf7, 0xcc, 0xee, 0x9e, 0x7d, 0xbe, 0x80,
		0xd7, 0x06, 0x5e, 0x9b, 0xa8, 0xfb, 0x6c, 0x1c, 0x4b, 0x47, 0xd7, 0xa2, 0x1e, 0xbd, 0xe1, 0x0e,
		0x0f, 0x26, 0xfa, 0x76, 0x6b, 0x7e, 0x33, 0x66, 0x66, 0xec, 0xdf, 0x32, 0x64, 0x84, 0x0f, 0x09,
		0x25, 0x37, 0x8c, 0x4a, 0x26, 0xc9, 0x03, 0x0f, 0x6e, 0x89, 0x23, 0x1e, 0x98, 0x24, 0x9e, 0xe4,
		0x42, 0xc6, 0x41, 0x22, 0x69, 0xd8, 0x99, 0x2d, 0x85, 0xe7, 0xe9, 0x84, 0xa6, 0xec, 0x5d, 0xb8,
		0x08, 0x8c, 0xdb, 0x5d, 0x31, 0x6e, 0xdb, 0x10, 0x2e, 0xf2, 0x42, 0x0b, 0x14, 0xee, 0x43, 0xc7,
		0x65, 0xb2, 0x09, 0x5c, 0x58, 0x6c, 0xc9, 0x10, 0x1a, 0x6e, 0xb9, 0x3f, 0x43, 0x85, 0x31, 0x9d,
		0x64, 0x96, 0x7f, 0xcc, 0x31, 0x5a, 0x44, 0x8c, 0x5b, 0x3e, 0xba, 0xcd, 0x40, 0x06, 0x00, 0x02,
		0x00, 0x01, 0x80, 0x68, 0x0a, 0x20, 0x92, 0x35, 0x65, 0x00, 0x08, 0xba, 0xab, 0x71, 0x01, 0x00,
		0x2e, 0xcc, 0x17, 0x33, 0xfc, 0x58, 0x58, 0xc9, 0xf0, 0x63, 0xc1, 0x8f, 0xf5, 0x94, 0xfc, 0x58,
		0x7d, 0xf8, 0xaf, 0x76, 0xd8, 0x7f, 0x55, 0xe9, 0xdc, 0x31, 0x72, 0x5d, 0x49, 0x6f, 0x4f, 0x83,
		0x7d, 0xab, 0x2f, 0x0d, 0x24, 0xb8, 0x74, 0x74, 0xb7, 0xdd, 0x5a, 0x88, 0x08, 0x6b, 0x50, 0x5b,
		0x20, 0xa2, 0x20, 0x67, 0x28, 0x10, 0xe9, 0x9b, 0xe0, 0x39, 0x22, 0x7d, 0x81, 0xeb, 0xc0, 0x75,
		0xe0, 0xfa, 0x7e, 0xe0, 0x3a, 0x22, 0x7d, 0xa7, 0xdd, 0xda, 0x58, 0xa4, 0x6f, 0x26, 0xfa, 0xe3,
		0x10, 0xc8, 0x0d, 0xe4, 0xce, 0x8d, 0x28, 0x42, 0xac, 0x2f, 0x10, 0x5c, 0x75, 0x28, 0x70, 0xbd,
		0xce, 0xb4, 0x5b, 0x77, 0x16, 0x57, 0x87, 0xf0, 0xa8, 0xb0, 0x1e, 0x86, 0xff, 0x25, 0x2e, 0xc9,
		0x3b, 0x87, 0xfa, 0x3e, 0x39, 0xb7, 0x99, 0x1b, 0xf0, 0x21, 0x67, 0xb2, 0xba, 0x89, 0xf4, 0x90,
		0xe5, 0x14, 0x58, 0x0f, 0xac, 0x37, 0x38, 0x04, 0xd1, 0x38, 0xfc, 0xd0, 0x3c, 0xf4, 0x68, 0x39,
		0xc2, 0xf7, 0x80, 0xf0, 0xa9, 0x8d, 0x7e, 0x8c, 0x6c, 0x0e, 0xc8, 0xe6, 0x60, 0x96, 0xcd, 0x41,
		0xe1, 0x3c, 0x45, 0x3d, 0xa1, 0x43, 0xd5, 0x19, 0xca, 0x56, 0x12, 0x3a, 0xa8, 0xf7, 0x4a, 0xa5,
		0x37, 0x2a, 0x29, 0x1d, 0x7c, 0x66, 0x85, 0x92, 0x07, 0x93, 0xea, 0xbc, 0x0e, 0x2b, 0x25, 0x5b,
		0x9b, 0xdc, 0xc1, 0x67, 0x56, 0xfb, 0x92, 0x3b, 0x44, 0x2f, 0xd5, 0x54, 0x72, 0x87, 0xca, 0x49,
		0xd3, 0x9d, 0xbc, 0xa2, 0x49, 0x9c, 0xa5, 0x79, 0x98, 0x55, 0x6f, 0x55, 0xae, 0x87, 0xfc, 0x69,
		0xd6, 0xb5, 0xec, 0x36, 0x9c, 0xeb, 0x21, 0x57, 0x0c, 0xcc, 0x14, 0x46, 0x65, 0xae, 0x87, 0x16,
		0x1c, 0xd7, 0x2e, 0x0b, 0xce, 0x2e, 0xec, 0x1c, 0xca, 0xe5, 0x6a, 0x47, 0x77, 0x0e, 0xa5, 0x72,
		0x07, 0xff, 0x3e, 0xbc, 0x43, 0x38, 0xb7, 0xdd, 0x1d, 0xf7, 0x10, 0xce, 0x6d, 0x81, 0xeb, 0xc0,
		0x75, 0xe0, 0xfa, 0xbe, 0xf8, 0x84, 0x00, 0xeb, 0x64, 0xa3, 0xe7, 0xb6, 0xcb, 0x56, 0xf9, 0x21,
		0xe0, 0x1b, 0xf0, 0x5d, 0xec, 0x2c, 0xc0, 0x09, 0x2e, 0xb0, 0x5c, 0x75, 0x28, 0x70, 0x82, 0x9b,
		0x60, 0xf9, 0xd8, 0xe7, 0x5d, 0x49, 0xdd, 0x11, 0xeb, 0x0e, 0xa5, 0x18, 0x6b, 0x00, 0xfb, 0x52,
		0x45, 0x3d, 0x94, 0xbf, 0x0c, 0xa8, 0x0c, 0xb8, 0x3b, 0x22, 0xe7, 0x9f, 0x2e, 0xcf, 0x23, 0x13,
		0x3d, 0x6e, 0x29, 0x32, 0xd9, 0xa9, 0xe7, 0x39, 0x93, 0x7c, 0xf8, 0x27, 0x81, 0x80, 0x02, 0x80,
		0x02, 0x58, 0x3c, 0xd1, 0x7d, 0x73, 0xa4, 0x81, 0xf9, 0x6f, 0x71, 0xa2, 0xfb, 0x74, 0xbd, 0x32,
		0x46, 0x77, 0x36, 0x3e, 0x31, 0x1d, 0x10, 0x08, 0x23, 0x0d, 0x50, 0x0d, 0xcc, 0xcb, 0x99, 0x7f,
		0x5c, 0x1b, 0xe8, 0x0f, 0xf4, 0x07, 0xfa, 0x03, 0xfd, 0x81, 0xfe, 0xdb, 0x45, 0xff, 0xef, 0x6c,
		0xa2, 0x8e, 0xf9, 0x51, 0x61, 0x4d, 0x4b, 0x9f, 0x59, 0x92, 0x05, 0xe4, 0x3b, 0x9b, 0xc4, 0x7e,
		0x9d, 0x2f, 0x97, 0xe7, 0x9f, 0x00, 0xe3, 0x80, 0x71, 0x38, 0xe1, 0xe1, 0xb8, 0x81, 0xe3, 0xa6,
		0x06, 0x6c, 0x0b, 0xcf, 0x52, 0x87, 0xed, 0xa8, 0x70, 0x2d, 0xd8, 0xfe, 0xd3, 0x63, 0x92, 0x06,
		0x42, 0x02, 0xba, 0x01, 0xdd, 0x80, 0x6e, 0x40, 0x37, 0xa0, 0xbb, 0x06, 0x74, 0xfb, 0x77, 0x1a,
		0x3c, 0xc7, 0xa8, 0xb0, 0x1e, 0x74, 0xfb, 0xec, 0x2e, 0x64, 0xae, 0xc5, 0x88, 0x1b, 0x8e, 0x6f,
		0x18, 0x20, 0x1b, 0x90, 0x8d, 0x20, 0x28, 0x38, 0x4d, 0x4c, 0x86, 0xc2, 0xf4, 0xe6, 0x01, 0x04,
		0x43, 0xcd, 0x8d, 0x99, 0xa7, 0x1e, 0x0c, 0xb5, 0x4c, 0xd2, 0xa8, 0xfe, 0x42, 0x3d, 0x36, 0xea,
		0x32, 0xa9, 0x39, 0x0b, 0x29, 0xaa, 0xf8, 0xbc, 0x95, 0x50, 0x29, 0x93, 0xee, 0xea, 0x75, 0x53,
		0x2d, 0x7c, 0x4a, 0xde, 0x73, 0x8b, 0x75, 0x47, 0x52, 0x84, 0x5e, 0x59, 0xec, 0x54, 0xb6, 0x58,
		0x7b, 0x03, 0xa7, 0x46, 0x2d, 0x8c, 0x9b, 0x1a, 0x35, 0x18, 0x36, 0x55, 0x36, 0x59, 0x5a, 0x93,
		0x56, 0x34, 0x79, 0xf3, 0x80, 0xa9, 0xb8, 0x2e, 0x89, 0xeb, 0xb6, 0x23, 0x5a, 0x6a, 0xb4, 0x83,
		0xc1, 0x52, 0xa3, 0xa7, 0x15, 0x2b, 0x95, 0x91, 0x99, 0x9d, 0xd8, 0x5d, 0x8c, 0xf6, 0x70, 0x73,
		0x31, 0x82, 0x3b, 0x08, 0xee, 0xa0, 0x9d, 0xde, 0x5d, 0x20, 0x4c, 0x6a, 0x86, 0xe9, 0x08, 0x93,
		0x02, 0xaa, 0x03, 0xd5, 0x81, 0xea, 0xfb, 0x80, 0xea, 0x08, 0x92, 0x9a, 0x76, 0x6b, 0x83, 0x41,
		0x52, 0x19, 0x73, 0xfc, 0x10, 0xc8, 0x0d, 0xe4, 0xce, 0x75, 0x0c, 0x20, 0x38, 0x0a, 0x18, 0xae,
		0x3a, 0x14, 0x38, 0xa8, 0x5d, 0x74, 0xc4, 0x79, 0xc2, 0xe1, 0x16, 0x67, 0xbe, 0xc6, 0xa9, 0xed,
		0x72, 0xcd, 0x1d, 0xb8, 0xde, 0x16, 0xb0, 0x6c, 0x02, 0xcb, 0xca, 0x97, 0xdb, 0x7e, 0x9f, 0x4e,
		0xb1, 0xe6, 0x15, 0x75, 0x71, 0x2d, 0xc3, 0xfb, 0x29, 0x27, 0x1e, 0xcb, 0xfa, 0x78, 0x1d, 0xee,
		0x7e, 0x37, 0xb8, 0xaa, 0xce, 0x4e, 0x1e, 0xf7, 0xe0, 0xc2, 0x3a, 0x25, 0x09, 0x37, 0x95, 0xf4,
		0xda, 0x12, 0x5f, 0x5b, 0xf2, 0x8d, 0x57, 0x80, 0x26, 0x16, 0xaf, 0xfd, 0xba, 0xba, 0x19, 0x7a,
		0x6a, 0x08, 0xbf, 0xae, 0xf1, 0x62, 0x6a, 0xc4, 0xe8, 0x1b, 0x33, 0xb5, 0x8c, 0x9a, 0x9a, 0x1a,
		0xbd, 0xae, 0x91, 0xd3, 0x84, 0x82, 0x37, 0x30, 0x7a, 0x6a, 0x19, 0x3f, 0x4d, 0x0f, 0x99, 0xae,
		0x31, 0xd4, 0xe8, 0x98, 0xad, 0xeb, 0xda, 0x3a, 0x8d, 0x05, 0x72, 0x41, 0x83, 0x80, 0x49, 0x57,
		0x7b, 0x85, 0xcc, 0x14, 0xc7, 0x3f, 0xc2, 0xed, 0xda, 0x6c, 0x4c, 0x5d, 0xbb, 0xb3, 0xf9, 0x6b,
		0xf5, 0x54, 0xae, 0xac, 0xcb, 0x9a, 0x6a, 0x06, 0x97, 0xc8, 0x2e, 0xd5, 0x37, 0xd3, 0xd5, 0x1f,
		0xb9, 0xfb, 0x9d, 0x04, 0x22, 0xd5, 0xd5, 0x7a, 0x8d, 0x41, 0xe7, 0x42, 0xe7, 0xd6, 0xd5, 0xb9,
		0x0e, 0xa3, 0x43, 0xc9, 0x86, 0x26, 0xea, 0xf6, 0x44, 0x0f, 0x4d, 0x66, 0xbc, 0x18, 0x79, 0x3f,
		0x58, 0x5c, 0x3b, 0xc5, 0xdf, 0x71, 0x45, 0xec, 0x58, 0xf7, 0x45, 0x9b, 0x09, 0xdd, 0x4b, 0x6b,
		0xc9, 0xab, 0x51, 0xc0, 0xb2, 0x56, 0x82, 0x1a, 0x15, 0x2c, 0xab, 0x24, 0x8d, 0x29, 0x61, 0x69,
		0x23, 0x4a, 0xd4, 0x30, 0xd5, 0x61, 0xaa, 0x79, 0x1f, 0xe9, 0x82, 0xdf, 0x4a, 0xe9, 0x93, 0xe2,
		0x36, 0x9b, 0xe4, 0x71, 0xab, 0xe2, 0x16, 0x7e, 0x8f, 0x9a, 0xbb, 0xae, 0xfc, 0x70, 0x31, 0xfb,
		0x1d, 0x90, 0x0b, 0xcd, 0x24, 0xa8, 0x71, 0x72, 0xa1, 0xa2, 0xa4, 0xe8, 0x70, 0x0a, 0x55, 0x04,
		0x62, 0x4b, 0x54, 0x42, 0x9d, 0xfe, 0xa9, 0xf6, 0x4b, 0x87, 0x3e, 0x58, 0x60, 0x23, 0xa9, 0xd9,
		0x42, 0xad, 0xca, 0xbc, 0x2e, 0xef, 0xdb, 0x98, 0x7a, 0x5d, 0xde, 0x37, 0x4e, 0x22, 0xac, 0x30,
		0x6b, 0xf5, 0xcc, 0xd8, 0x0a, 0x1a, 0x61, 0x4b, 0xd2, 0xad, 0xe7, 0xce, 0xad, 0xae, 0x89, 0xb9,
		0xf1, 0x7c, 0xeb, 0x79, 0x73, 0x6f, 0xa6, 0x37, 0x2a, 0x49, 0x84, 0x74, 0x7c, 0x23, 0xd5, 0x7d,
		0xd9, 0x71, 0xe9, 0x5d, 0xf0, 0x5f, 0x97, 0x4f, 0xfc, 0xae, 0x7a, 0xb0, 0x4b, 0x05, 0x63, 0xc3,
		0x3e, 0x6c, 0x5b, 0x3c, 0xb8, 0xb1, 0x1b, 0x59, 0x7b, 0x97, 0x9c, 0xd6, 0x34, 0xdb, 0x1f, 0xbf,
		0x17, 0x0f, 0xae, 0x1f, 0x48, 0x46, 0xc7, 0x84, 0x8e, 0x46, 0x92, 0x8d, 0x68, 0xc0, 0xc8, 0x98,
		0xfe, 0xe0, 0xe3, 0x70, 0x4c, 0x6e, 0x78, 0x40, 0x24, 0x0d, 0x98, 0x81, 0x73, 0xbb, 0xb7, 0x17,
		0x5b, 0x6c, 0x35, 0xc1, 0xdf, 0xb7, 0x4d, 0xb6, 0xd2, 0xc2, 0x68, 0xdb, 0x36, 0x5b, 0x39, 0xfe,
		0x6e, 0x59, 0xf2, 0x74, 0x36, 0xd9, 0x7a, 0xf1, 0x78, 0x3b, 0xee, 0xd2, 0xee, 0xc1, 0xa5, 0xad,
		0x3b, 0x64, 0xa6, 0x71, 0x7d, 0x3b, 0xe1, 0xda, 0xde, 0xa0, 0xeb, 0x38, 0xf4, 0xcc, 0x94, 0x61,
		0x52, 0xcf, 0x4c, 0x15, 0x7e, 0xf1, 0xa0, 0x08, 0xa1, 0x08, 0xa1, 0x08, 0xa1, 0x08, 0xa1, 0x08,
		0xa1, 0x08, 0x37, 0xa0, 0x08, 0xdb, 0x70, 0x14, 0x90, 0x39, 0x0c, 0x2a, 0xfe, 0xa8, 0xe0, 0xa8,
		0x28, 0x76, 0x8c, 0xc6, 0xae, 0xfd, 0xc9, 0x75, 0xd9, 0xa7, 0xb3, 0xa8, 0xfd, 0x35, 0xd0, 0x0c,
		0xa9, 0xf4, 0x34, 0xbc, 0x31, 0xd2, 0xd3, 0xcd, 0xb5, 0x7b, 0x2f, 0x9c, 0x7b, 0x66, 0x77, 0xcf,
		0x3e, 0x5f, 0xec, 0xdb, 0xe5, 0xd9, 0x70, 0xf9, 0x98, 0xae, 0x4b, 0x64, 0x8e, 0x69, 0x4c, 0xab,
		0x20, 0x73, 0xcc, 0xea, 0x50, 0x20, 0xb9, 0x6e, 0xe2, 0x30, 0xdd, 0x7e, 0xb8, 0xfe, 0x4e, 0xdd,
		0x68, 0x0a, 0x38, 0xdf, 0x14, 0x9c, 0x23, 0xac, 0x53, 0x01, 0xc5, 0x00, 0xe8, 0x08, 0xd6, 0x5f,
		0x46, 0x74, 0x04, 0xeb, 0x03, 0xd9, 0x81, 0xec, 0x40, 0xf6, 0x7d, 0x41, 0x76, 0x04, 0xec, 0x4f,
		0xbb, 0xb5, 0xe9, 0x80, 0xfd, 0x43, 0xe0, 0x36, 0x70, 0xbb, 0x98, 0x81, 0x87, 0x78, 0x7d, 0x40,
		0xb8, 0xea, 0x50, 0x20, 0x5e, 0x7f, 0xda, 0xad, 0x3b, 0x8b, 0xab, 0x63, 0x78, 0x54, 0x58, 0x0f,
		0xc4, 0xff, 0x12, 0x97, 0xe4, 0x9d, 0x43, 0x7d, 0x9f, 0x9c, 0xdb, 0xcc, 0x0d, 0xf8, 0x90, 0x57,
		0x67, 0x57, 0x87, 0x47, 0x1d, 0x80, 0x0f, 0x8f, 0x3a, 0x3c, 0xea, 0xf5, 0xcd, 0x74, 0x78, 0xd4,
		0xe3, 0x6e, 0xc9, 0xd0, 0xd1, 0x49, 0xc4, 0x32, 0x2d, 0x0e, 0xf6, 0x3a, 0xd8, 0xeb, 0xa4, 0xc3,
		0x5c, 0x7a, 0xe3, 0x30, 0x83, 0x24, 0x2c, 0xb3, 0x8a, 0x66, 0x84, 0xbd, 0x0f, 0x71, 0x6d, 0x22,
		0x24, 0xb1, 0xb9, 0x1f, 0x3f, 0x2e, 0xe4, 0x6d, 0x4b, 0x5c, 0x7a, 0xf1, 0x77, 0x91, 0xb4, 0x1a,
		0x90, 0xf7, 0xa2, 0xc9, 0x01, 0x7f, 0x4f, 0x03, 0x8a, 0xc1, 0xdf, 0xd3, 0x35, 0x5a, 0x56, 0xe6,
		0xea, 0x46, 0x08, 0x87, 0x51, 0xd7, 0x24, 0x5e, 0xbc, 0xbf, 0x41, 0x8a, 0x6e, 0xbc, 0xa2, 0xb4,
		0x17, 0xbc, 0xde, 0x3a, 0x2c, 0xcd, 0xe4, 0xa0, 0xd3, 0x14, 0xd6, 0x26, 0xd6, 0x66, 0x13, 0x6b,
		0x73, 0xe3, 0xb9, 0x1c, 0x64, 0x9a, 0xb5, 0x21, 0x12, 0xf7, 0xbc, 0xcf, 0x2d, 0xcb, 0xe0, 0xa0,
		0xb0, 0x2a, 0x91, 0xb7, 0xa1, 0xf2, 0xc7, 0xeb, 0x90, 0x35, 0x55, 0x0c, 0x73, 0x52, 0x87, 0xad,
		0xf9, 0x39, 0xfe, 0x01, 0x24, 0x6a, 0x30, 0x13, 0x99, 0x35, 0x25, 0x6a, 0x50, 0x11, 0x0d, 0xed,
		0x5c, 0x0d, 0xd5, 0xc2, 0xb0, 0xd5, 0x74, 0x0d, 0xaa, 0x9d, 0x54, 0xef, 0x9c, 0x4e, 0xca, 0x86,
		0x5c, 0x03, 0x68, 0xe5, 0xcc, 0x21, 0x07, 0x0f, 0xdb, 0x94, 0xae, 0x41, 0xb6, 0x30, 0x59, 0x83,
		0x6c, 0x3c, 0x55, 0x43, 0xa9, 0xad, 0xaa, 0x32, 0x65, 0xc5, 0x36, 0xe9, 0xe2, 0x6d, 0x4f, 0x65,
		0xd8, 0xbb, 0xd9, 0x5c, 0x0d, 0x72, 0x07, 0x33, 0x35, 0xc8, 0x8d, 0xe5, 0x69, 0xb0, 0x6e, 0xa9,
		0x1c, 0x71, 0x77, 0x14, 0xcf, 0xb5, 0x26, 0xe3, 0x28, 0xa7, 0xae, 0xde, 0x69, 0x47, 0xcc, 0x37,
		0x12, 0x43, 0x32, 0x6b, 0x48, 0x65, 0x27, 0xd3, 0x8e, 0x23, 0x0c, 0xb9, 0x87, 0x7e, 0x34, 0x09,
		0x9e, 0xd1, 0x2e, 0x1e, 0x60, 0xe0, 0x90, 0x1a, 0x3c, 0xa3, 0xa5, 0x6e, 0xb5, 0x20, 0x24, 0x00,
		0x48, 0x0e, 0x24, 0x07, 0x92, 0x03, 0xc9, 0x11, 0x0b, 0x50, 0x13, 0xca, 0x11, 0x0b, 0x00, 0x54,
		0x07, 0xaa, 0x03, 0xd5, 0x61, 0x9f, 0xef, 0x0f, 0xa8, 0x0f, 0x1d, 0xf1, 0xa0, 0x0e, 0xe6, 0x71,
		0xe9, 0x5d, 0xa0, 0x17, 0x01, 0x74, 0x0d, 0x40, 0x57, 0x99, 0x5a, 0xe4, 0x7b, 0xcc, 0xe2, 0x43,
		0x6e, 0xa9, 0x1f, 0x9e, 0x2d, 0xce, 0xce, 0x42, 0x75, 0x33, 0xe2, 0xc1, 0x42, 0x1b, 0xe9, 0x56,
		0x4f, 0x41, 0x3e, 0x0d, 0x01, 0x64, 0xc3, 0xf4, 0x03, 0xf9, 0x04, 0xc9, 0x07, 0x72, 0x07, 0xaf,
		0x6e, 0x52, 0x35, 0x3a, 0x4c, 0x8c, 0x0f, 0x53, 0x23, 0x44, 0xdf, 0x18, 0xa9, 0x65, 0x94, 0xd4,
		0xd4, 0xc8, 0x75, 0x8d, 0x94, 0x26, 0x14, 0xb4, 0x81, 0xd1, 0x52, 0xcb, 0x78, 0x69, 0x7c, 0xc8,
		0x7a, 0xaf, 0x8e, 0x90, 0xd2, 0x6b, 0x3d, 0x4a, 0xb1, 0x21, 0x96, 0xc8, 0x94, 0x19, 0x54, 0xf8,
		0x41, 0x51, 0x71, 0xe5, 0x1f, 0x9a, 0x7f, 0x0e, 0x1d, 0x76, 0x5d, 0xf4, 0xfc, 0x5b, 0xd4, 0x32,
		0x02, 0x48, 0x61, 0x77, 0xee, 0xd5, 0x66, 0x3f, 0xb3, 0x76, 0x10, 0x3a, 0x8a, 0x5d, 0xbf, 0xea,
		0x50, 0x20, 0x74, 0x74, 0xda, 0xad, 0x3b, 0xa1, 0x11, 0x54, 0x14, 0x15, 0xc6, 0x9e, 0xff, 0xa9,
		0xef, 0xf9, 0xd3, 0xfc, 0xdb, 0xdd, 0x24, 0xff, 0x76, 0xf7, 0x86, 0x07, 0x71, 0xfa, 0x6d, 0xed,
		0xfd, 0x7f, 0x71, 0x53, 0x7a, 0x5b, 0xf7, 0x3e, 0xb6, 0xee, 0x4f, 0x7d, 0xeb, 0xae, 0x2a, 0xbe,
		0x69, 0x05, 0xed, 0x3b, 0x5d, 0x56, 0x26, 0x58, 0xf3, 0x6e, 0x97, 0x22, 0x13, 0xb7, 0xea, 0x8e,
		0x17, 0x8d, 0xf5, 0x90, 0xf9, 0x09, 0xed, 0x0c, 0xf7, 0x75, 0x35, 0xab, 0xee, 0xda, 0xaa, 0xb3,
		0xc6, 0xea, 0xad, 0xb5, 0xba, 0x6b, 0xae, 0xb1, 0xb5, 0xd7, 0xd8, 0x1a, 0xac, 0xbd, 0x16, 0x0d,
		0x77, 0xf0, 0x9a, 0x33, 0xad, 0xed, 0x5e, 0x5b, 0x99, 0x67, 0xed, 0xec, 0xf9, 0xcb, 0x52, 0x7d,
		0x62, 0x50, 0xd5, 0x2c, 0x9b, 0xbe, 0xb9, 0xf3, 0xad, 0x11, 0x27, 0x5c, 0x43, 0x9e, 0xa5, 0x15,
		0xc3, 0xb9, 0x6e, 0x3b, 0x0d, 0xb8, 0x99, 0x6a, 0x38, 0xe9, 0x1a, 0x71, 0xd6, 0xad, 0x6b, 0x68,
		0xeb, 0x66, 0xe5, 0x5f, 0xcb, 0x18, 0x3f, 0xdb, 0x4c, 0xad, 0xab, 0x35, 0xb9, 0x0e, 0x75, 0xf6,
		0xa1, 0x9a, 0xd7, 0xda, 0xac, 0x82, 0x93, 0xd7, 0x80, 0x35, 0x50, 0x7e, 0xcd, 0x0d, 0x6c, 0x01,
		0xd8, 0x02, 0xb0, 0x05, 0x60, 0x0b, 0xc0, 0x16, 0x80, 0x2d, 0x00, 0x5b, 0x40, 0xd7, 0x16, 0x68,
		0xd4, 0xe1, 0xa0, 0x79, 0x1c, 0x98, 0xd6, 0x33, 0x3b, 0x16, 0xbc, 0x13, 0xfe, 0xcb, 0xba, 0xde,
		0x32, 0x62, 0x76, 0x6e, 0xf8, 0x97, 0xf0, 0xaf, 0xcf, 0x66, 0x3f, 0xfd, 0x69, 0xfa, 0xcb, 0xbf,
		0x26, 0x3f, 0xbc, 0xc1, 0x8c, 0x26, 0x2a, 0xb7, 0x05, 0xad, 0x3a, 0x18, 0x2b, 0x6f, 0x0d, 0x2a,
		0xb2, 0xc3, 0xd4, 0x6f, 0x0f, 0x82, 0x33, 0x12, 0xce, 0xc8, 0xba, 0xce, 0x48, 0x4f, 0x32, 0x36,
		0x8e, 0x65, 0xaf, 0x6b, 0x51, 0x8f, 0xde, 0x70, 0x87, 0x07, 0x13, 0xf3, 0x9d, 0x48, 0x7e, 0x73,
		0xf5, 0x36, 0x26, 0x7f, 0xcb, 0x90, 0x11, 0x3e, 0x24, 0x94, 0xdc, 0x30, 0x2a, 0x99, 0x24, 0x0f,
		0x3c, 0xb8, 0x25, 0x8e, 0x78, 0x60, 0x92, 0x78, 0x92, 0x0b, 0xc9, 0x83, 0x09, 0xf1, 0x6f, 0x45,
		0xe8, 0xd8, 0xe4, 0x86, 0x11, 0x5b, 0x0a, 0xcf, 0x53, 0xce, 0x1d, 0x96, 0xb7, 0x59, 0xd1, 0xc8,
		0xee, 0x85, 0xfd, 0x0a, 0xf6, 0x2b, 0xad, 0xdf, 0xaf, 0xe8, 0x67, 0x0e, 0x5b, 0xd1, 0x2c, 0xfd,
		0x16, 0x78, 0x49, 0x32, 0xd8, 0x72, 0x1f, 0x3a, 0x2e, 0x93, 0x4d, 0xa2, 0xd5, 0x62, 0x8b, 0x35,
		0x01, 0xeb, 0x96, 0xfb, 0x33, 0xac, 0x1a, 0xd3, 0x49, 0x06, 0x94, 0x62, 0x4a, 0xd1, 0x22, 0x8e,
		0xdd, 0xf2, 0xd1, 0x6d, 0x06, 0xc8, 0x00, 0x5b, 0x80, 0x2d, 0xc0, 0xd6, 0x7e, 0xc1, 0x56, 0xb2,
		0xb2, 0x6b, 0xc0, 0x94, 0x29, 0x36, 0x2c, 0xc0, 0xd2, 0x45, 0x7d, 0x88, 0x81, 0x1b, 0x17, 0xf8,
		0x02, 0x37, 0x2e, 0xdc, 0xb8, 0x70, 0xe3, 0xb6, 0xdd, 0x8d, 0xdb, 0x87, 0xfb, 0x16, 0xee, 0xdb,
		0x99, 0xfb, 0x56, 0xd9, 0x17, 0x59, 0xc7, 0x51, 0x2b, 0xbd, 0x4d, 0x3a, 0x65, 0x47, 0x21, 0x95,
		0xd4, 0x0d, 0x18, 0xb3, 0xcd, 0x49, 0xa0, 0x39, 0x6d, 0xc0, 0xe1, 0x0a, 0x87, 0xeb, 0x7a, 0x1d,
		0xae, 0x6d, 0x64, 0x7f, 0xce, 0x17, 0x02, 0xa8, 0x1e, 0xd8, 0x23, 0x60, 0x8f, 0x80, 0x3d, 0x02,
		0xf6, 0x08, 0x4f, 0x60, 0x8f, 0x00, 0xaa, 0xc7, 0x76, 0x3d, 0x83, 0xed, 0xa2, 0x7d, 0xc2, 0x08,
		0x80, 0x11, 0x00, 0x23, 0x00, 0x46, 0x00, 0x8c, 0x00, 0x18, 0x01, 0x30, 0x02, 0x9e, 0xb4, 0xc3,
		0xd0, 0xd8, 0x31, 0x56, 0xc3, 0x7f, 0xf8, 0x7b, 0xfa, 0x9b, 0x5b, 0xa0, 0x78, 0xce, 0x68, 0xad,
		0x92, 0xdd, 0x85, 0xcc, 0x0f, 0xa2, 0x7e, 0x53, 0xd7, 0x7e, 0xe0, 0x76, 0x3c, 0x76, 0x9a, 0x6e,
		0xc5, 0xb2, 0xc6, 0xe0, 0x5f, 0x84, 0x7f, 0xf1, 0xe9, 0xf9, 0x17, 0x67, 0x71, 0x64, 0xe9, 0x8a,
		0x20, 0xba, 0x2b, 0x02, 0x7b, 0x0c, 0xec, 0x31, 0xb0, 0xc7, 0xc0, 0x1e, 0x03, 0x7b, 0x0c, 0xec,
		0x31, 0xb0, 0xc7, 0xd8, 0x6d, 0x47, 0x23, 0xac, 0x01, 0x58, 0x03, 0xb0, 0x06, 0x60, 0x0d, 0xc0,
		0x1a, 0x80, 0x35, 0x00, 0x6b, 0x00, 0x1e, 0xc7, 0x3b, 0xe1, 0xbf, 0xac, 0xef, 0x33, 0xab, 0xe1,
		0x7a, 0x4c, 0x42, 0xcb, 0x3f, 0xcf, 0x7e, 0xfb, 0xd7, 0xf4, 0xa7, 0x37, 0xe8, 0x82, 0xbc, 0xb3,
		0xb8, 0xbe, 0xab, 0x31, 0xaa, 0x64, 0x16, 0x65, 0xfe, 0x97, 0xb8, 0x24, 0xef, 0x1c, 0xea, 0xfb,
		0xe4, 0xdc, 0x66, 0x6e, 0xc0, 0x87, 0x9c, 0x49, 0xf5, 0xa6, 0x52, 0xab, 0xeb, 0x14, 0x57, 0x5d,
		0xc0, 0xa3, 0xa9, 0x07, 0x2e, 0xe6, 0x57, 0x5d, 0x68, 0x5b, 0x45, 0x06, 0xd6, 0x90, 0xa1, 0x15,
		0xb4, 0xa3, 0x17, 0x5d, 0xf4, 0x70, 0xd1, 0x85, 0xee, 0x90, 0xbd, 0x3d, 0xc6, 0x35, 0x17, 0x66,
		0x25, 0xda, 0x71, 0xcd, 0x45, 0x75, 0x2a, 0x71, 0x73, 0x4b, 0xc2, 0xf8, 0x92, 0x0b, 0xad, 0x5b,
		0xec, 0xff, 0x60, 0x93, 0xd2, 0x1b, 0x2d, 0x3a, 0x1f, 0xb9, 0x1f, 0x9c, 0x05, 0x41, 0xc5, 0x5d,
		0xf7, 0x9f, 0xb8, 0xfb, 0xc1, 0x61, 0x91, 0x3e, 0xf0, 0xcb, 0x97, 0x45, 0xb4, 0xec, 0x32, 0x25,
		0xfb, 0x6f, 0x8f, 0x8e, 0xde, 0x9c, 0x1c, 0x1d, 0xf5, 0x4e, 0x5e, 0x9f, 0xf4, 0x4e, 0x8f, 0x8f,
		0xfb, 0x6f, 0xca, 0x62, 0x8d, 0x3a, 0x7f, 0x4a, 0x9b, 0x49, 0x66, 0xff, 0x1a, 0xbd, 0xb3, 0x1b,
		0x3a, 0x8e, 0x56, 0x57, 0x15, 0x45, 0xc2, 0x4c, 0x14, 0x4a, 0xc4, 0x40, 0x7f, 0xfa, 0xf3, 0xa7,
		0x7e, 0x75, 0x62, 0x17, 0xbf, 0x59, 0xea, 0x77, 0x55, 0x7f, 0x95, 0xfb, 0x99, 0xd3, 0x35, 0xb5,
		0x2e, 0x2d, 0x76, 0x63, 0xfe, 0xb2, 0x99, 0x17, 0xed, 0xf8, 0xe1, 0x4d, 0x64, 0x4a, 0xde, 0xb0,
		0x55, 0x01, 0x9b, 0x9b, 0x54, 0xf3, 0x32, 0x4b, 0x5d, 0x5c, 0xc9, 0x95, 0xc0, 0x48, 0x20, 0x3c,
		0xe2, 0xb0, 0x7b, 0xe6, 0x10, 0x4b, 0xb8, 0x01, 0xe5, 0xee, 0x6a, 0xad, 0xfc, 0x03, 0xf1, 0x42,
		0x33, 0xb1, 0xcc, 0x1c, 0xcc, 0xbe, 0x63, 0xde, 0x38, 0x55, 0xd8, 0x77, 0xca, 0x76, 0x9c, 0xb2,
		0xbd, 0xb6, 0x68, 0x97, 0x85, 0x37, 0x1d, 0x4d, 0xa1, 0x29, 0x3a, 0x22, 0xee, 0x84, 0x25, 0xbd,
		0x48, 0x6d, 0xaa, 0xa2, 0x65, 0xb0, 0x3c, 0x51, 0x11, 0xa8, 0x10, 0x31, 0x24, 0xf3, 0x99, 0x25,
		0x36, 0x8b, 0xc4, 0xa6, 0x08, 0x4e, 0x2b, 0x48, 0x0c, 0x95, 0x26, 0xbe, 0x8a, 0x49, 0x5f, 0x31,
		0x97, 0xba, 0x36, 0xbb, 0xb6, 0x8d, 0xae, 0x6d, 0x93, 0x57, 0xcf, 0xb5, 0x99, 0x4e, 0xa8, 0xa2,
		0x09, 0xe0, 0xe6, 0x64, 0xb3, 0x0b, 0x3d, 0x4a, 0xc5, 0xca, 0x74, 0x4b, 0xb8, 0xed, 0x1b, 0x3d,
		0xca, 0xc4, 0xae, 0x19, 0x53, 0x0e, 0x77, 0x27, 0x37, 0xb8, 0x05, 0xc1, 0x2d, 0x4a, 0x39, 0xbb,
		0x30, 0xdc, 0x9d, 0x1c, 0x77, 0x8b, 0xb9, 0xf4, 0xc6, 0x61, 0x1a, 0xf7, 0xe0, 0xcd, 0x2a, 0xe8,
		0x81, 0xf9, 0x87, 0xb8, 0x56, 0x04, 0xdc, 0x36, 0xf7, 0xe3, 0xc7, 0xf8, 0x5e, 0xbc, 0x50, 0x41,
		0x29, 0xa4, 0xae, 0xc2, 0x21, 0x75, 0x7c, 0x06, 0xd0, 0x07, 0xe8, 0x9b, 0x64, 0x78, 0x52, 0xcc,
		0xe8, 0x64, 0xba, 0x88, 0x02, 0x26, 0x3d, 0xc9, 0x7d, 0xa6, 0xb3, 0x8e, 0xd2, 0x3a, 0x7a, 0x4b,
		0xe9, 0x23, 0x77, 0xbf, 0x47, 0xf6, 0xd0, 0xbc, 0x01, 0x12, 0xdc, 0xd2, 0x80, 0x88, 0x07, 0xd7,
		0x9f, 0xae, 0xaa, 0x2f, 0x1f, 0x88, 0x8c, 0x9d, 0x90, 0x58, 0x2b, 0x58, 0x2b, 0xe9, 0x48, 0x3b,
		0x8c, 0x0e, 0x25, 0x1b, 0xea, 0xac, 0x15, 0x05, 0xb7, 0x77, 0xe7, 0x62, 0xe6, 0x4b, 0x60, 0x6e,
		0x30, 0x98, 0xcb, 0x64, 0xde, 0x47, 0x6e, 0xef, 0xdc, 0x25, 0xae, 0x3c, 0x3d, 0xdb, 0xca, 0x5c,
		0xe6, 0x9a, 0x6e, 0x60, 0x5f, 0x90, 0x60, 0xe2, 0x71, 0x8b, 0x3a, 0xce, 0x84, 0x50, 0xf2, 0xe5,
		0xcb, 0xf9, 0x7b, 0x2c, 0x39, 0x2c, 0xb9, 0x8c, 0x6f, 0x24, 0x6c, 0xfe, 0x5e, 0xd7, 0x0b, 0x1a,
		0x04, 0x4c, 0xba, 0xca, 0x5b, 0x92, 0xce, 0xd7, 0x5e, 0xf7, 0x94, 0x76, 0x87, 0x67, 0xdd, 0xdf,
		0xae, 0x7e, 0xbe, 0x7d, 0xec, 0x66, 0x3f, 0x1e, 0xe9, 0x7c, 0xec, 0xbf, 0x7a, 0xec, 0x6c, 0xc5,
		0x44, 0xe5, 0x63, 0x9f, 0x6b, 0x2c, 0xf1, 0xa8, 0xb4, 0xda, 0x2a, 0x3c, 0xc6, 0x2a, 0xdc, 0xbd,
		0x55, 0xa8, 0x7c, 0xd9, 0xa7, 0x4c, 0xce, 0x61, 0x35, 0x19, 0x11, 0x2a, 0x96, 0xd3, 0xb2, 0x20,
		0x1d, 0xb5, 0x92, 0x94, 0xa0, 0x24, 0x60, 0xa6, 0x82, 0x56, 0x5b, 0xe0, 0x6a, 0x0b, 0x9e, 0xb9,
		0x00, 0x6a, 0xee, 0xcb, 0xd7, 0x15, 0x68, 0x15, 0x21, 0x55, 0x37, 0x16, 0xb7, 0xee, 0x50, 0x8a,
		0xb1, 0x39, 0xbb, 0x7a, 0xb9, 0xa1, 0xa7, 0xc0, 0x63, 0xd6, 0x12, 0xee, 0xba, 0x42, 0xde, 0x98,
		0xb0, 0x37, 0x26, 0xf4, 0xf5, 0x85, 0x5f, 0x6f, 0x11, 0x18, 0xb8, 0xf5, 0x48, 0x73, 0x4c, 0xe6,
		0x37, 0x47, 0x35, 0x98, 0xcc, 0x6f, 0xc1, 0x64, 0x36, 0x6b, 0x06, 0x4c, 0xe6, 0xb5, 0x0f, 0xad,
		0x1e, 0x15, 0x62, 0xe3, 0xa3, 0xfd, 0x84, 0x22, 0x9c, 0x32, 0x3a, 0x34, 0x10, 0x8d, 0xa8, 0xe2,
		0x40, 0x40, 0x11, 0x43, 0x11, 0x43, 0x11, 0x43, 0x11, 0x43, 0x11, 0x43, 0x11, 0x23, 0xb8, 0xa8,
		0xb1, 0x8d, 0x76, 0x43, 0xc1, 0x45, 0x94, 0x05, 0xb7, 0x4c, 0x76, 0xe7, 0xde, 0xfc, 0x97, 0x99,
		0xc7, 0x90, 0xbd, 0x8c, 0x54, 0xf9, 0xcb, 0xa9, 0x37, 0x68, 0x83, 0x51, 0x3c, 0x0f, 0xdc, 0xb1,
		0x2d, 0x2a, 0x6d, 0x7d, 0xc7, 0x55, 0x5a, 0x13, 0xbe, 0x2b, 0xf8, 0xae, 0x36, 0xe2, 0xbb, 0xd2,
		0x96, 0xd5, 0x7c, 0x73, 0x59, 0x53, 0x70, 0x61, 0x2e, 0xc3, 0x5c, 0xde, 0x01, 0x73, 0x59, 0x99,
		0x8f, 0x58, 0x24, 0xd7, 0x7d, 0x13, 0x7b, 0x59, 0x93, 0xaf, 0xb8, 0xe7, 0x06, 0x73, 0x1f, 0x06,
		0xf3, 0xda, 0x86, 0x16, 0xe6, 0x31, 0xcc, 0xe3, 0x97, 0xa9, 0xea, 0xde, 0x87, 0xf8, 0x3f, 0x95,
		0x1e, 0xaf, 0x83, 0xc0, 0xa4, 0x7c, 0xbf, 0xa3, 0xee, 0x7d, 0x8e, 0x45, 0xf7, 0x37, 0xe6, 0x51,
		0x99, 0xd4, 0x18, 0x83, 0x1a, 0xe9, 0x92, 0x40, 0x75, 0x6a, 0xd0, 0x7c, 0xda, 0x01, 0xaa, 0x93,
		0x6a, 0x68, 0xbd, 0x46, 0x48, 0xbd, 0xa6, 0xf7, 0xaf, 0xe5, 0xc1, 0x17, 0x3d, 0x04, 0x5f, 0xa4,
		0xc6, 0x43, 0xaf, 0x87, 0xf0, 0x8b, 0x04, 0xfb, 0xc5, 0x90, 0x3b, 0xcc, 0xd7, 0xc1, 0xfe, 0xa4,
		0x86, 0x1a, 0xfc, 0xf6, 0x01, 0xbf, 0xbb, 0x07, 0xbf, 0xca, 0x1c, 0x37, 0x6a, 0x59, 0xcc, 0xf7,
		0xbb, 0x89, 0x4c, 0xe8, 0xfb, 0x0c, 0x97, 0xea, 0xef, 0x43, 0x72, 0x71, 0x78, 0x0e, 0xdb, 0xed,
		0x39, 0x34, 0x14, 0xd9, 0x66, 0x44, 0xb7, 0xc8, 0x32, 0x9e, 0xc5, 0xd4, 0x4c, 0x1b, 0x25, 0x86,
		0x8d, 0xc2, 0x21, 0x09, 0x87, 0x64, 0x7b, 0x1d, 0x92, 0xea, 0xf1, 0x3f, 0x85, 0x80, 0x6f, 0x92,
		0x14, 0x34, 0x8d, 0x0f, 0xa2, 0xde, 0x60, 0x71, 0xcd, 0xe6, 0x7f, 0xc3, 0xed, 0x4e, 0x0b, 0xe8,
		0x40, 0xd4, 0x71, 0xc4, 0x03, 0xab, 0x71, 0xb2, 0x31, 0x6b, 0xa0, 0x1e, 0x2e, 0x9d, 0x45, 0xad,
		0xcc, 0xa2, 0x66, 0xe3, 0xe7, 0x24, 0x6c, 0x76, 0x96, 0x10, 0x21, 0xfe, 0x58, 0x0f, 0xb5, 0x32,
		0x7b, 0xfa, 0x68, 0xf9, 0x00, 0xf4, 0x00, 0x7a, 0xfb, 0x03, 0x7a, 0xea, 0x01, 0xc2, 0x85, 0xa0,
		0xd7, 0xdf, 0x09, 0xaf, 0x6f, 0x92, 0xd3, 0xcb, 0xcc, 0xa0, 0x57, 0xca, 0xf7, 0x95, 0xe7, 0x44,
		0x51, 0xcb, 0xff, 0x95, 0xe7, 0x73, 0x30, 0xce, 0x07, 0xb6, 0xd2, 0x98, 0x52, 0x7e, 0xb0, 0x96,
		0x3b, 0xd3, 0x67, 0x9b, 0xfa, 0x97, 0xc6, 0x56, 0xed, 0x52, 0x76, 0xae, 0xb3, 0xf8, 0x07, 0x2f,
		0xd3, 0x1f, 0xb9, 0xce, 0x3c, 0x7e, 0x61, 0xd7, 0x17, 0xc9, 0xef, 0x5d, 0x9f, 0xc5, 0xbf, 0x97,
		0x7c, 0xdc, 0x24, 0xcf, 0x85, 0x7a, 0x6e, 0x8d, 0x6d, 0x6b, 0xa6, 0xb2, 0x59, 0xf6, 0xda, 0xd4,
		0xe0, 0xf7, 0x5c, 0x62, 0xb6, 0xfb, 0xed, 0x61, 0xf7, 0x8b, 0xdd, 0xaf, 0x79, 0x2a, 0x5a, 0x7d,
		0x6b, 0xdc, 0xc4, 0x0a, 0xcf, 0x5a, 0xdf, 0xee, 0x20, 0xb3, 0x6c, 0x72, 0x3f, 0x73, 0x7b, 0xa3,
		0xf9, 0xaa, 0x45, 0x0d, 0xc7, 0x55, 0xb6, 0x72, 0x3d, 0x04, 0xb8, 0x13, 0x3e, 0x10, 0x00, 0x08,
		0xb0, 0xff, 0x08, 0x70, 0x27, 0xfc, 0x41, 0x66, 0xd9, 0xe4, 0x7e, 0xde, 0x2c, 0x02, 0xf8, 0xcc,
		0x0a, 0x25, 0x0f, 0x26, 0xe6, 0x30, 0xb0, 0xd2, 0x42, 0x3d, 0x2c, 0x98, 0x35, 0x07, 0x40, 0x00,
		0x20, 0xec, 0x3f, 0x20, 0xf8, 0xcc, 0x1a, 0x2c, 0x2f, 0xa0, 0xe2, 0x2f, 0x37, 0x0b, 0x0d, 0xa1,
		0x67, 0x0e, 0x0a, 0x99, 0xba, 0xf5, 0xe0, 0x20, 0xf4, 0x99, 0x24, 0x9e, 0x43, 0x5d, 0x06, 0x40,
		0x00, 0x20, 0xec, 0x3f, 0x20, 0x84, 0xde, 0x60, 0xbe, 0x76, 0x56, 0x3f, 0xf1, 0xa7, 0x41, 0xf3,
		0x53, 0x24, 0x58, 0x98, 0x3b, 0x5d, 0xd6, 0xc1, 0x21, 0x9c, 0x5f, 0x7b, 0x44, 0x3d, 0x57, 0x9d,
		0x4c, 0xb2, 0x58, 0x4d, 0x8f, 0x4d, 0x38, 0xbf, 0x7d, 0x71, 0x76, 0xfe, 0x20, 0xb8, 0x1b, 0x10,
		0x95, 0x4c, 0xcf, 0xa0, 0x06, 0x36, 0x07, 0x77, 0xc8, 0xcc, 0x0c, 0x72, 0xe0, 0x5e, 0x91, 0x03,
		0x5f, 0xf7, 0x41, 0x0d, 0x9c, 0xee, 0x8e, 0xe5, 0x3d, 0x77, 0x47, 0x5d, 0xcf, 0x19, 0x6b, 0x20,
		0xfa, 0x42, 0x2d, 0x50, 0x04, 0x41, 0x11, 0x1c, 0x5b, 0x96, 0xfe, 0x16, 0x2a, 0xaa, 0x64, 0xb6,
		0x77, 0x1a, 0x8b, 0x1b, 0xee, 0x30, 0x62, 0x89, 0xd0, 0x0d, 0xe4, 0x84, 0x58, 0xc2, 0xc6, 0xa6,
		0x09, 0x9b, 0xa6, 0x0d, 0x6e, 0x9a, 0xd4, 0x45, 0x97, 0xe0, 0x82, 0xbf, 0xc6, 0x0d, 0x93, 0x26,
		0x94, 0xb2, 0x81, 0xa1, 0x52, 0xcb, 0x60, 0x69, 0x7a, 0xc8, 0x4e, 0x4f, 0x4f, 0x71, 0xc3, 0x5f,
		0x1d, 0xe7, 0xdf, 0xd8, 0x35, 0x51, 0x59, 0x6e, 0x4d, 0x95, 0xe5, 0xb2, 0xe0, 0x41, 0xc8, 0xef,
		0x50, 0x59, 0x50, 0x59, 0x9b, 0x56, 0x59, 0x2e, 0x54, 0x16, 0x54, 0x16, 0x54, 0xd6, 0x0e, 0xab,
		0xac, 0x80, 0x1a, 0xa8, 0xac, 0xa8, 0x92, 0x99, 0xca, 0x0a, 0x26, 0x1e, 0x23, 0xd4, 0x71, 0x84,
		0x15, 0xfb, 0xc1, 0xa1, 0xb3, 0xa0, 0xb3, 0x36, 0xac, 0xb3, 0xd4, 0x65, 0x17, 0x3a, 0x0b, 0x3a,
		0x6b, 0x4d, 0x3a, 0x2b, 0xfe, 0x0f, 0x8a, 0x6b, 0x3d, 0x1e, 0xc6, 0x35, 0x1f, 0xb3, 0x6a, 0x38,
		0xaa, 0x89, 0xf6, 0x51, 0xeb, 0xe5, 0xb4, 0xf1, 0x8b, 0xa8, 0x6d, 0x5c, 0xa9, 0xbe, 0x52, 0x79,
		0x1b, 0x57, 0xaa, 0x57, 0xc8, 0x83, 0xfa, 0x5d, 0xea, 0xe5, 0x53, 0xbf, 0x95, 0x6b, 0xd4, 0xcb,
		0xfa, 0x56, 0x7d, 0x93, 0x7a, 0x49, 0x87, 0x54, 0x6e, 0x53, 0x2f, 0xa1, 0x4a, 0x55, 0x53, 0xa2,
		0x5a, 0x74, 0x9b, 0xba, 0x27, 0x45, 0xfb, 0x6e, 0x53, 0x8f, 0x5e, 0xaa, 0xb1, 0xdb, 0xd4, 0xab,
		0x39, 0x6d, 0xea, 0x1c, 0xb6, 0xa2, 0xdb, 0xd5, 0x57, 0x39, 0x6b, 0xad, 0xb8, 0x5e, 0x3d, 0x7f,
		0x72, 0x75, 0x0d, 0xf9, 0x0d, 0x5f, 0xaf, 0x9e, 0x3b, 0xf9, 0x66, 0xfa, 0xa1, 0xf2, 0x7a, 0xf5,
		0x24, 0xf0, 0x2b, 0x5a, 0x71, 0x52, 0x38, 0xea, 0xe7, 0xbd, 0x4b, 0xf5, 0xf4, 0x28, 0x3c, 0x09,
		0x71, 0x27, 0xa9, 0x4c, 0x3c, 0xe1, 0x70, 0x6b, 0xb2, 0x0b, 0xe4, 0x9d, 0x72, 0x71, 0x32, 0xdd,
		0x1f, 0x6e, 0xf9, 0xd4, 0xb8, 0x54, 0xdc, 0x9a, 0xb1, 0xe9, 0x40, 0xde, 0x69, 0x70, 0x47, 0x82,
		0x6b, 0xd5, 0x57, 0x87, 0xe2, 0xf5, 0x2b, 0x90, 0x77, 0xa2, 0x6e, 0xd9, 0x0b, 0x40, 0xab, 0x88,
		0xe5, 0xd9, 0x4a, 0x7a, 0x40, 0x9e, 0xa9, 0x19, 0x19, 0x01, 0x71, 0x56, 0x08, 0x35, 0xca, 0x3a,
		0xe0, 0x1c, 0x70, 0x0e, 0x38, 0x07, 0x9c, 0x17, 0x0c, 0x05, 0xf2, 0x34, 0x26, 0x78, 0xce, 0x7d,
		0xcf, 0xa1, 0x93, 0x6e, 0xb2, 0x67, 0x57, 0x05, 0xf4, 0x6c, 0x2d, 0x4d, 0x44, 0x9f, 0x56, 0x8d,
		0xe9, 0xf4, 0xb3, 0x64, 0x3f, 0xdc, 0x25, 0xbf, 0x7f, 0x39, 0x27, 0x42, 0x92, 0x77, 0x1f, 0xcf,
		0x81, 0xeb, 0xc0, 0x75, 0xe0, 0x3a, 0x70, 0xdd, 0x68, 0x28, 0xde, 0x02, 0xd6, 0xe3, 0x6e, 0x71,
		0x5b, 0xe3, 0x62, 0x79, 0x5b, 0x13, 0xc2, 0xcf, 0xdf, 0xcf, 0x13, 0xad, 0xaf, 0xba, 0xe5, 0x0e,
		0x01, 0xe0, 0x00, 0xf0, 0x3c, 0x87, 0x6f, 0x97, 0xdb, 0xc0, 0x71, 0xe0, 0x38, 0xdc, 0x2d, 0x1a,
		0x38, 0x1e, 0xc1, 0x6b, 0x37, 0x86, 0x57, 0x75, 0x3c, 0xcf, 0xd4, 0xd1, 0xc3, 0xf5, 0x0c, 0x96,
		0xef, 0x4a, 0xb0, 0x2b, 0x70, 0x1c, 0x86, 0x38, 0x00, 0xbc, 0x85, 0x00, 0xfe, 0xea, 0xf8, 0xf8,
		0x09, 0x21, 0x38, 0x28, 0x35, 0x8d, 0x52, 0x6a, 0x16, 0xd2, 0x73, 0xe4, 0x3c, 0xaa, 0x73, 0x6a,
		0xbe, 0x78, 0x49, 0x72, 0x8a, 0xeb, 0x9c, 0xa7, 0xad, 0x50, 0x6a, 0x54, 0x3b, 0x54, 0xdd, 0x91,
		0x42, 0x0e, 0xcd, 0xb3, 0xcc, 0x6b, 0x16, 0xbd, 0x5e, 0x87, 0xfb, 0xbf, 0xd1, 0xef, 0xec, 0xb3,
		0x10, 0xab, 0x8a, 0x6a, 0xf9, 0x95, 0x3b, 0xd9, 0x3f, 0x2d, 0xbc, 0xd5, 0x7b, 0x76, 0xcf, 0xad,
		0xe4, 0x45, 0x1e, 0x9f, 0x3d, 0xfe, 0x1f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff,
		0xff, 0xaa, 0xe3, 0x01, 0xa8, 0xb3, 0xaa, 0x02, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
}

